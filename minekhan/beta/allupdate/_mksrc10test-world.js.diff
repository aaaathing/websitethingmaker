--- public/minekhan/_mksrc10-world.js	2025-01-26 02:56:23.104063186 +0000
+++ public/minekhan/beta/allupdate/_mksrc10test-world.js	2025-01-26 02:56:55.353039582 +0000
@@ -1,6 +1,7 @@
 "use strict"
+import * as dataLoad from "./dataload.js"
 
-const version = "Beta 1.1.2"
+const version = "Beta 1.1.2.test-allupdate"
 let win, isNode = false
 try{
 	win = window
@@ -111,6 +112,11 @@
 		return Math.random()*a
 	}else return Math.random()
 }
+win.rand = rand
+const randInt = function(a,b){
+	return floor((Math.random()*(b+1-a))+a)
+}
+win.randInt = randInt
 const avg = function(){
 	var res = 0, c = 0
 	for(var i=0; i<arguments.length; i++){
@@ -121,6 +127,7 @@
 	res /= c
 	return res
 }
+win.avg =avg
 /*const divideWithRemainder = function(a,b){
 	var n=a/b
 	var f=floor(n)
@@ -132,6 +139,7 @@
 const mod = function(a,b){
 	return a - floor(a/b)*b
 }
+win.mod = mod
 Math.PI2 = Math.PI / 2
 Math.PI4 = Math.PI / 4
 Math.PId = Math.PI * 2
@@ -193,94 +201,58 @@
 	for (let i = 0; i < bytes.length; i++) arr[i] = bytes.charCodeAt(i)
 	return arr
 }
-function chunkString (str, len) {
-	const size = Math.ceil(str.length/len)
-	const r = Array(size)
-	let offset = 0
-
-	for (let i = 0; i < size; i++) {
-		r[i] = str.substr(offset, len)
-		offset += len
-	}
-
-	return r
-}
-function chunkArray(array,chunkSize){
-	let chunks = []
-	for (let i = 0; i < array.length; i += chunkSize) {
-		const chunk = array.slice(i, i + chunkSize);
-		chunks.push(chunk)
-	}
-	return chunks
-}
-function hex2bin(hex){//from https://stackoverflow.com/questions/45053624/convert-hex-to-binary-in-javascript
-	hex = hex.toLowerCase()
-	var out = "";
-	for(var c of hex) {
-		switch(c) {
-			case '0': out += "0000"; break;
-			case '1': out += "0001"; break;
-			case '2': out += "0010"; break;
-			case '3': out += "0011"; break;
-			case '4': out += "0100"; break;
-			case '5': out += "0101"; break;
-			case '6': out += "0110"; break;
-			case '7': out += "0111"; break;
-			case '8': out += "1000"; break;
-			case '9': out += "1001"; break;
-			case 'a': out += "1010"; break;
-			case 'b': out += "1011"; break;
-			case 'c': out += "1100"; break;
-			case 'd': out += "1101"; break;
-			case 'e': out += "1110"; break;
-			case 'f': out += "1111"; break;
-			default: return "";
-		}
-	}
-	return out;
-}
+win.atoarr = atoarr
 
 function sleep(ms) {
 	return new Promise(resolve => setTimeout(resolve, ms))
 }
 const generateID = () => "" + Date.now().toString(36) + (Math.random() * 1000000 | 0).toString(36)
+win.generateID = generateID
 function map(v, min, max, min2, max2){
 	return min2 + (max2 - min2) * ((v - min) / (max - min));
 }
 function mapFrom(v, min, max){
 	return (v - min) / (max - min)
 }
+win.mapFrom = mapFrom
 function mapClamped(v, min, max){
 	return Math.min(Math.max(((v - min) / (max - min)),0),1);
 }
+win.mapClamped = mapClamped
 function lerp(t, a, b) {
 	return a + t * (b - a);
 }
+win.lerp = lerp
 function dist2(x,y,x2,y2){
 	let xDist = x - x2
 	let yDist = y - y2
 	return sqrt((xDist*xDist)+(yDist*yDist))
 }
+win.dist2 = dist2
 function dist3(x,y,z,x2,y2,z2){
 	let xDist = x - x2
 	let yDist = y - y2
 	let zDist = z - z2
 	return sqrt((xDist*xDist)+(yDist*yDist)+(zDist*zDist))
 }
+win.dist3 = dist3
 function dist3Sq(x,y,z,x2,y2,z2){
 	let xDist = x - x2
 	let yDist = y - y2
 	let zDist = z - z2
 	return (xDist*xDist)+(yDist*yDist)+(zDist*zDist)
 }
+win.dist3Sq = dist3Sq
 function mag(x,y,z) {
 	return sqrt(x * x + y * y + z * z)
 }
+win.mag = mag
 function angleOf(x,y,fromx,fromy){
 	let a = atan2(x - fromx, y - fromy)
 	if(a<0) a+=Math.PId
 	return a
 }
+win.angleOf = angleOf
 function line3DConncected(endX, endY, endZ, startX, startY, startZ, array){
 	var x1 = Math.round(endX), y1 = Math.round(endY), z1 = Math.round(endZ), x0 = Math.round(startX), y0 = Math.round(startY), z0 = Math.round(startZ);
 	var dx = Math.abs(x1 - x0);
@@ -453,9 +425,6 @@
 		})
 	}
 }
-function mapFrom(v, min, max){
-	return ((v - min) / (max - min))
-}
 function preferMiddle(x,middle,resMin,resMax){
 	//x is 0 to 1
 	//middle is a big number between resMin and resMax
@@ -867,6 +836,9 @@
 	}*/
 }
 
+let textures = {}
+win.serverTextures = textures
+
 let sit
 let generator = {
 	height: 80, // Height of the hills
@@ -884,18 +856,211 @@
 const netherHeight = 127
 const waterHeight = 62
 
+
+
+let CUBE,SLAB,STAIR,CROSS,TALLCROSS,DOOR,TORCH,LANTERN,LANTERNHANG,BEACON,
+		CACTUS,PANE,PORTAL,WALLFLAT,TRAPDOOR,TRAPDOOROPEN,FENCE,WALLPOST,
+		BUTTON,CHAIN,POT,POTCROSS,CORNERSTAIRIN,CORNERSTAIROUT,VERTICALSLAB,
+		//if you change this, change debugStick and server side
+		LAYER1,LAYER2,LAYER3,LAYER4,LAYER5,LAYER6,LAYER7,LAYER8,
+		FLIP,NORTH,SOUTH,EAST,WEST,ROTATION// Mask for the direction bits
+let isCube, isState
+let prevConstVersion = null
+
+function verMoreThan(a,b){
+	a = a.split(".").map(r => parseInt(r))
+	b = b.split(".").map(r => parseInt(r))
+	if(a[0] > b[0]) return true
+	if(a[1] > b[1] && a[0] === b[0]) return true
+	if(a[2] > b[2] && a[1] === b[1]) return true
+}
+function bin(n){
+	return parseInt(n,2)
+}
+function constVersion(v){
+	if(v === prevConstVersion) return
+	prevConstVersion = v
+	isCube = 0xff
+	//let verNum = v.replace(/(Alpha|Beta) /, '')//.replace(/(?<=\..*)\./g, '') //second regex removes the periods after the first
+	//if(verMoreThan(verNum, "1.0.3") || verNum==="1.0.3"){
+CUBE = 0
+LAYER2=SLAB =          0b10000000000000 // 9th bit
+LAYER3=STAIR =        0b100000000000000 // 10th bit
+LAYER4=CROSS =        0b110000000000000
+LAYER5=TALLCROSS =0b1001110000000000000
+LAYER6=LANTERN =    0b10010000000000000
+LAYER7=LANTERNHANG=0b100010000000000000
+BEACON =           0b100110000000000000
+CACTUS =           0b101000000000000000
+POT =              0b101010000000000000
+POTCROSS =         0b101110000000000000
+LAYER1 = TORCH =   0b110000000000000000
+CHAIN =            0b110010000000000000
+LAYER8 = DOOR =   0b1000010000000000000
+PORTAL =          0b1000100000000000000
+WALLFLAT =        0b1000110000000000000
+PANE =           0b10001000000000000000
+TRAPDOOR =        0b1010000000000000000
+TRAPDOOROPEN =   0b10000000000000000000
+FENCE =          0b11000000000000000000
+WALLPOST =       0b11000100000000000000
+//WALL = 0x6400<<5
+//WALLU = 0x6600<<5 //wall withe exteion under another wall
+//FENCQ = 0x4100<<5 //fence (one extension)
+BUTTON =         0b10000100000000000000
+//CARPET    =      0b10000110000000000000
+CORNERSTAIRIN =      0b1000000000000000
+CORNERSTAIROUT =     0b1010000000000000
+VERTICALSLAB =       0b1100000000000000
+FLIP      =               0b10000000000 // 11th bit
+NORTH = 0 // 12th and 13th bits for the 4 directions
+SOUTH =                  0b100000000000
+EAST =                  0b1000000000000
+WEST =                  0b1100000000000
+ROTATION =              0b1100000000000 // Mask for the direction bits
+isCube =                   0b1111111111 // Mask for block id bits
+isState =        0b11111110000000000000
+	/*}else if(verMoreThan(verNum, "1.0.0") || verNum === "1.0.0"){
+CUBE = 0
+LAYER2 = SLAB = 0x100 // 9th bit
+LAYER3 = STAIR = 0x200 // 10th bit
+LAYER4 = CROSS = 0x300
+FLIP = 0x400 // 11th bit
+LAYER5 = TALLCROSS = 0x700
+LAYER6 = LANTERN = 0x900
+LAYER7 = LANTERNHANG=0x1100
+BEACON = 0x1300
+CACTUS = 0x1400
+POT = 0x1500
+POTCROSS = 0x1700
+LAYER1 = TORCH = 0x1800
+CHAIN = 0x1900
+LAYER8 = DOOR = 0x2100
+PORTAL = 0x2200
+WALLFLAT = 0x2300
+PANE = 0x4400
+TRAPDOOR = 0x2800
+TRAPDOOROPEN=0x4000
+FENCE = 0x6000
+WALLPOST = 0x6200
+//WALL = 0x6400
+//WALLU = 0x6600 //wall withe exteion under another wall
+//FENCQ = 0x4100 //fence (one extension)
+BUTTON = 0x4200
+CARPET    = 0x4300
+FLIP      = 0x400 // 11th bit
+NORTH = 0 // 12th and 13th bits for the 4 directions
+SOUTH = 0x800
+EAST = 0x1000
+WEST = 0x1800
+ROTATION = 0x1800 // Mask for the direction bits
+	}else{
+		CUBE      = 0
+		LAYER2 = SLAB      = 0x100 // 9th bit
+		LAYER3 = STAIR     = 0x200 // 10th bit
+		LAYER4 = CROSS     = 0x2000
+		LAYER5 = TALLCROSS = 0x2200
+		LAYER8 = DOOR      = 0x2400
+		LAYER1 = TORCH     = 0x2600
+		LAYER6 = LANTERN   = 0x2800
+		LAYER7 = LANTERNHANG=0x3000
+		BEACON    = 0x4200
+		CACTUS    = 0x4400
+		PANE      = 0x4600
+		PORTAL    = 0x5000
+		WALLFLAT  = 0x4800
+		TRAPDOOR  = 0x5200
+		TRAPDOOROPEN=0x5400
+		FENCE     = 0x6000
+		WALLPOST  = 0x6200
+		//WALL      = 0x6400
+		//WALLU     = 0x6600 //wall withe exteion under another wall
+		//FENCQ     = 0x6800 //fence (one extension)
+		BUTTON    = 0x7000
+		CHAIN     = 0x7200
+		POT       = 0x8000
+		POTCROSS  = 0x8200
+		CARPET    = 0x8400
+		FLIP      = 0x400 // 11th bit
+		NORTH     = 0 // 12th and 13th bits for the 4 directions
+		SOUTH     = 0x800
+		EAST      = 0x1000
+		WEST      = 0x1800
+		ROTATION  = 0x1800 // Mask for the direction bits
+	}*/
+}
+constVersion(version)
+
+/* //binary flag block state code
+baseBlock.blockStates = [{group:["delay","powered"],map:{1:{0:0,1:PANE},2:{0:SLAB,1:PORTAL}},mapRev:{0:[1,0],[PANE]:[1,1],[SLAB]:[2,0],[PORTAL]:[2,1]},mask:isState}]
+baseBlock.blockStatesMap = {delay:baseBlock.blockStates[0], powered:baseBlock.blockStates[0]}
+function set(id, blockStateName, newValue){
+	let blockObj = blockData[id]
+	let {group,map,mask,mapRev} = blockObj.blockStatesMap[blockStateName]
+	let v = mapRev[id&mask]
+	let mapped = map
+	for(let i=0;i<v.length;i++){
+		mapped = mapped[group[i] === blockStateName ? newValue : v[i]]
+	}
+	return id&(~mask) | mapped
+}
+*/
+function setBlockStateValue(id, blockStateObj, newValue){
+	return (id % blockStateObj.minMult) + newValue * blockStateObj.minMult + floor(id / blockStateObj.maxMult) * blockStateObj.maxMult
+}
+function setBlockState(id, blockStateObj, newValue){
+	return (id % blockStateObj.minMult) + blockStateObj.values.indexOf(newValue) * blockStateObj.minMult + floor(id / blockStateObj.maxMult) * blockStateObj.maxMult
+}
+win.setBlockState = setBlockState
+function getBlockStateValue(id, blockStateObj){
+	return floor((id % blockStateObj.maxMult) / blockStateObj.minMult)
+}
+function getBlockState(id, blockStateObj){
+	return blockStateObj.values[ floor((id % blockStateObj.maxMult) / blockStateObj.minMult) ]
+}
+win.getBlockState = getBlockState
+
+function getBlockRotation(rot){
+	switch(rot){
+		case "north":
+			return 0
+		case "east":
+			return 1
+		case "south":
+			return 2
+		case "west":
+			return 3
+	}
+}
+function getRotationBlock(rot){
+	switch(rot){
+		case 0:
+			return "north"
+		case 1:
+			return "east"
+		case 2:
+			return "south"
+		case 3:
+			return "west"
+	}
+}
+
+//todo n: remove unused type & textures & shape specific textures, change those for mk only things
 const blockData = [
 	{
 		name: "air",
-		id: 0,
+		solid: false,
 		textures: new Array(6).fill("none"),
 		transparent: true,
 		shadow: false,
 		hidden: true
 	},
 	{
-		name: "grass",
+		name:"grass",
+		nameMcd: "grass_block",
 		Name: "Grass Block",
+		material: "mineable/shovel",
+		blockStates: [{"name":"snowy","values":[false,true]}],
 		textures: [ "dirt", "grassTop", "grassSide" ],
 		hardness: 0.6,
 		blastResistance:0.6,
@@ -905,10 +1070,11 @@
 		onupdate:function(x,y,z,b,world,sx,sy,sz){
 			var top = world.getBlock(x,y+1,z)
 			var isSnow = blockData[top].name === "snow" || blockData[top].name === "snowBlock"
-			if(b === blockIds.grass && isSnow){
-				world.setBlock(x,y,z,blockIds.grass | CROSS)
-			}else if(b === (blockIds.grass | CROSS) && !isSnow){
-				world.setBlock(x,y,z,blockIds.grass)
+			let curIsSnow = getBlockStateValue(b, this.blockStatesMap.snowy)
+			if(!curIsSnow && isSnow){
+				world.setBlock(x,y,z, setBlockStateValue(b,this.blockStatesMap.snowy,1))
+			}else if(curIsSnow && !isSnow){
+				world.setBlock(x,y,z, setBlockStateValue(b,this.blockStatesMap.snowy,0))
 			}
 		},
 		compostChance:0.3,
@@ -916,7 +1082,7 @@
 		craftSlabs:true, craftStairs:true,
 		invTint: [grassColor.r,grassColor.g,grassColor.b],
 		tint:grassTint,
-		biomeTintTop:true,
+		biomeTintTop:true,//todo n: remove unused ones
 		biomeTintEast:true,
 		biomeTintWest:true,
 		biomeTintNorth:true,
@@ -924,15 +1090,37 @@
 		randomRotate:true,
 		randomRotateTop:true,
 		randomRotateBottom:true,
+		grow:function(x,y,z,world,blockID){
+			// Spread grass
+			if (!blockData[world.getBlock(x, y + 1, z, this.type)].transparent) {
+				world.setBlock(x, y, z, blockIds.dirt, false,false,false,false, this.type)
+				return
+			}
+
+			let rnd2 = Math.random() * 27 | 0
+			let x2 = rnd2 % 3 - 1
+			rnd2 = (rnd2 - x2 - 1) / 3
+			let y2 = rnd2 % 3 - 1
+			rnd2 = (rnd2 - y2 - 1) / 3
+			z += rnd2 - 1
+			x += x2
+			y += y2
+
+			if (blockData[blockID].name === "dirt" && world.getBlock(x, y + 1, z, this.type) === blockIds.air) {
+				world.setBlock(x, y, z, blockID, false,false,false,false, this.type)
+			}
+		}
 	},
-	{ name: "dirt", Name:"Dirt", hardness:0.5, blastResistance:0.5, type:"ground",category:"nature",
+	{ name: "dirt", Name:"Dirt",
+		material: "mineable/shovel", hardness:0.5, blastResistance:0.5, type:"ground",category:"nature",
 		digSound: ["dirt.dig1", "dirt.dig2", "dirt.dig3", "dirt.dig4"],
 		stepSound: ["dirt.step1", "dirt.step2","dirt.step3","dirt.step4"],
 	 	randomRotate:true,randomRotateTop:true,randomRotateBottom:true,randomRotateNorth:true,randomRotateSouth:true,randomRotateEast:true,randomRotateWest:true,
 	},
-	{ name: "stone", Name:"Stone", drop:"cobblestone", type:"rock1",category:"nature", hardness:5, blastResistance:6, stoneSound:true, craftSlabs:true, craftStairs:true,randomRotate:"flip",randomRotateTop:true,randomRotateBottom:true,randomRotateNorth:true,randomRotateSouth:true,randomRotateEast:true,randomRotateWest:true},
-	{ name: "bedrock", Name:"Bedrock", category:"nature", hardness:1000, blastResistance:3600000, stoneSound:true, pistonPush:false, pistonPull:false,randomRotate:"flip",randomRotateTop:true,randomRotateBottom:true,randomRotateNorth:true,randomRotateSouth:true,randomRotateEast:true,randomRotateWest:true},
-	{ name: "sand", Name:"Sand", hardness:0.5, blastResistance:0.5,fallingDust:[212/255, 195/255, 148/255], category:"nature",
+	{ name: "stone", Name:"Stone", harvestToolsNames: ["woodenPickaxe","stonePickaxe","goldenPickaxe","ironPickaxe","diamondPickaxe","netheritePickaxe"], material: "mineable/pickaxe", drop:"cobblestone", type:"rock1",category:"nature", hardness:1.5, blastResistance:6, stoneSound:true, craftSlabs:true, craftStairs:true,randomRotate:"flip",randomRotateTop:true,randomRotateBottom:true,randomRotateNorth:true,randomRotateSouth:true,randomRotateEast:true,randomRotateWest:true},
+	{ name: "bedrock", Name:"Bedrock", category:"nature", hardness:Infinity, blastResistance:3600000, stoneSound:true, pistonPush:false, pistonPull:false,randomRotate:"flip",randomRotateTop:true,randomRotateBottom:true,randomRotateNorth:true,randomRotateSouth:true,randomRotateEast:true,randomRotateWest:true},
+	{ name: "sand", Name:"Sand",
+		material: "mineable/shovel", hardness:0.5, blastResistance:0.5,fallingDust:[212/255, 195/255, 148/255], category:"nature",
 		onupdate: function(x,y,z,b,world,sx,sy,sz){
 			fall(x,y,z,b,world,false)
 		},
@@ -941,7 +1129,8 @@
 		},
 		digSound: ["sand.dig1", "sand.dig2", "sand.dig3", "sand.dig4"],
 		stepSound: ["sand.step1", "sand.step2","sand.step3","sand.step4","sand.step5"]},
-	{ name: "gravel", Name:"Gravel", hardness:0.6, blastResistance:0.6, type:"ground",category:"nature",fallingDust:[132/255, 126/255, 124/255],
+	{ name: "gravel", Name:"Gravel",
+		material: "mineable/shovel", hardness:0.6, blastResistance:0.6, type:"ground",category:"nature",fallingDust:[132/255, 126/255, 124/255],
 		onupdate: function(x,y,z,b,world,sx,sy,sz){
 			fall(x,y,z,b,world,false)
 		},
@@ -991,24 +1180,28 @@
 		category:"build",
 		glassSound: true
 	},
-	{ name: "cobblestone", Name:"Cobblestone", hardness:2, blastResistance:6, type:"rock1",category:"build", stoneSound:true, craftSlabs:true, craftStairs:true},
-	{ name: "mossyCobble", Name:"Mossy Cobblestone", hardness:2, blastResistance:6, type:"rock1",category:"build", stoneSound:true, craftSlabs:true, craftStairs:true},
-	{ name: "stoneBricks", Name:"Stone Bricks", hardness:1.5, type:"rock1",category:"build", stoneSound:true, craftSlabs:true, craftStairs:true},
-	{ name: "mossyStoneBricks", Name:"Mossy Stone Bricks", hardness:1.5, type:"rock1",category:"build", stoneSound:true, craftSlabs:true, craftStairs:true},
-	{ name: "bricks", Name:"Bricks", hardness:2, type:"rock1",category:"build", stoneSound:true, craftSlabs:true, craftStairs:true},
-	{ name: "coalOre", Name:"Coal Ore", hardness:3, type:"rock1",category:"nature", drop:"coal", stoneSound:true, experience:0.1},
-	{ name: "ironOre", Name:"Iron Ore", hardness:3, type:"rock2",category:"nature", drop:"rawIron", stoneSound:true, dropAmount:[1,3]},
-	{ name: "goldOre", Name:"Gold Ore", hardness:3, type:"rock3",category:"nature", drop:"rawGold", stoneSound:true, dropAmount:[1,3]},
-	{ name: "diamondOre", Name:"Diamond Ore", hardness:3, type:"rock3",category:"nature", drop:"diamond", stoneSound:true, experience:1, dropAmount:[1,3]},
-	{ name: "redstoneOre", Name:"Redstone Ore", hardness:3, type:"rock3",category:"nature", stoneSound:true, drop:"redstone", dropAmount:[6,9], experience:0.3},
-	{ name: "lapisOre", Name:"Lapis Lazuli Ore", hardness:3, type:"rock2",category:"nature", drop:"lapisLazuli", stoneSound:true, experience:0.5, dropAmount:[1,3]},
-	{ name: "emeraldOre", Name:"Emerald Ore", hardness:3, type:"rock3",category:"nature", drop:"emerald", stoneSound:true, experience:1.5, dropAmount:[1,3]},
-	{ name: "coalBlock", Name:"Block of Coal", hardness:5, type:"rock1",category:"build", stoneSound:true, burnChance:0.4, burnTime:50},
-	{ name: "ironBlock", Name:"Block of Iron", hardness:5, type:"metal2",category:"build", stoneSound:true},
-	{ name: "goldBlock", Name:"Block of Gold", hardness:3, type:"metal3",category:"build", stoneSound:true},
-	{ name: "diamondBlock", Name:"Block of Diamond", hardness:3, type:"metal3",category:"build", stoneSound:true},
-	{
-		name: "redstoneBlock", Name:"Block of Redstone", hardness:5, type:"metal1",category:"redstone", stoneSound:true,
+	{ name: "cobblestone", Name:"Cobblestone", harvestToolsNames: "stone", material: "mineable/pickaxe", hardness:2, blastResistance:6, type:"rock1",category:"build", stoneSound:true, craftSlabs:true, craftStairs:true},
+	{ name: "mossyCobble", nameMcd:"mossy_cobblestone", Name:"Mossy Cobblestone", harvestToolsNames: "stone", material: "mineable/pickaxe", hardness:2, blastResistance:6, type:"rock1",category:"build", stoneSound:true, craftSlabs:true, craftStairs:true},
+	{ name: "stoneBricks", nameMcd:"stone_bricks", Name:"Stone Bricks", harvestToolsNames: "stone", blastResistance: 6, material: "mineable/pickaxe", hardness:1.5, type:"rock1",category:"build", stoneSound:true, craftSlabs:true, craftStairs:true},
+	{ name: "mossyStoneBricks", nameMcd:"mossy_stone_bricks", Name:"Mossy Stone Bricks", harvestToolsNames: "stone", blastResistance: 6, material: "mineable/pickaxe", hardness:1.5, type:"rock1",category:"build", stoneSound:true, craftSlabs:true, craftStairs:true},
+	{ name: "bricks", Name:"Bricks", harvestToolsNames: "stone", blastResistance: 6, material: "mineable/pickaxe", hardness:2, type:"rock1",category:"build", stoneSound:true, craftSlabs:true, craftStairs:true},
+	{ name: "coalOre", nameMcd:"coal_ore", Name:"Coal Ore", harvestToolsNames: "stone", blastResistance: 3, material: "mineable/pickaxe", hardness:3, type:"rock1",category:"nature", drop:"coal", stoneSound:true, experience:0.1},
+	{ name: "ironOre", nameMcd:"iron_ore", Name:"Iron Ore", harvestToolsNames: ["stonePickaxe","ironPickaxe","diamondPickaxe","netheritePickaxe"], blastResistance: 3, material: "incorrect_for_wooden_tool", hardness:3, type:"rock2",category:"nature", drop:"rawIron", stoneSound:true, dropAmount:[1,3]},
+	{ name: "goldOre", nameMcd:"gold_ore", Name:"Gold Ore", harvestToolsNames: ["ironPickaxe","diamondPickaxe","netheritePickaxe"], blastResistance: 3, material: "incorrect_for_wooden_tool", hardness:3, type:"rock3",category:"nature", drop:"rawGold", stoneSound:true, dropAmount:[1,3]},
+	{ name: "diamondOre", nameMcd:"diamond_ore", Name:"Diamond Ore", harvestToolsNames: "goldOre", blastResistance: 3, material: "incorrect_for_wooden_tool", hardness:3, type:"rock3",category:"nature", drop:"diamond", stoneSound:true, experience:1, dropAmount:[1,3]},
+	{ name: "redstoneOre", nameMcd:"redstone_ore", Name:"Redstone Ore", harvestToolsNames: "goldOre", blockStates: [{"name":"lit","values":[false,true]}], blastResistance: 3, material: "incorrect_for_wooden_tool", hardness:3, type:"rock3",category:"nature", stoneSound:true, drop:"redstone", dropAmount:[6,9], experience:0.3},
+	{ name: "lapisOre", nameMcd:"lapis_ore", Name:"Lapis Lazuli Ore", harvestToolsNames: "ironOre", blastResistance: 3, material: "incorrect_for_wooden_tool", hardness:3, type:"rock2",category:"nature", drop:"lapisLazuli", stoneSound:true, experience:0.5, dropAmount:[1,3]},
+	{ name: "emeraldOre", nameMcd:"emerald_ore", Name:"Emerald Ore", harvestToolsNames: "goldOre", blastResistance: 3, material: "incorrect_for_wooden_tool", hardness:3, type:"rock3",category:"nature", drop:"emerald", stoneSound:true, experience:1.5, dropAmount:[1,3]},
+	{ name: "coalBlock", nameMcd:"coal_block", Name:"Block of Coal", harvestToolsNames: "stone", blastResistance: 6, material: "mineable/pickaxe", hardness:5, type:"rock1",category:"build", stoneSound:true, burnChance:0.4, burnTime:50},
+	{ name: "ironBlock", nameMcd:"iron_block", Name:"Block of Iron", harvestToolsNames: "ironOre", blastResistance: 6, material: "incorrect_for_wooden_tool", hardness:5, type:"metal2",category:"build", stoneSound:true},
+	{ name: "goldBlock", nameMcd:"gold_block", Name:"Block of Gold", harvestToolsNames: "goldOre", blastResistance: 6, material: "incorrect_for_wooden_tool", hardness:3, type:"metal3",category:"build", stoneSound:true},
+	{ name: "diamondBlock", nameMcd:"diamond_block", Name:"Block of Diamond", harvestToolsNames: "goldOre", blastResistance: 6, material: "incorrect_for_wooden_tool", hardness:5, type:"metal3",category:"build", stoneSound:true},
+	{
+		name: "redstoneBlock",
+		nameMcd:"redstone_block", Name:"Block of Redstone",
+		harvestToolsNames: "stone",
+		blastResistance: 6,
+		material: "mineable/pickaxe", hardness:5, type:"metal1",category:"redstone", stoneSound:true,
 		onset:function(x,y,z,world){
 			world.setPower(x,y,z,16,false)
 			world.spreadPower(x,y,z, 16)
@@ -1020,12 +1213,16 @@
 		damage:1,
 		dieMessage: p => p.username+" died from radiation from block of redstone."
 	},
-	{ name: "lapisBlock", Name:"Block of Lapis Lazuli", hardness:3, type:"metal2",category:"build", stoneSound:true},
-	{ name: "emeraldBlock", Name:"Block of Emerald", hardness:5, type:"metal3",category:"build", stoneSound:true},
-	{ name: "oakPlanks", Name:"Oak Planks", type:"wood",category:"build", hardness:2, woodSound:true, burnChance:0.1, burnTime:40, craftSlabs:true, craftStairs:true},
+	{ name: "lapisBlock", nameMcd:"lapis_block", Name:"Block of Lapis Lazuli", harvestToolsNames: "ironOre", blastResistance: 3, material: "incorrect_for_wooden_tool", hardness:3, type:"metal2",category:"build", stoneSound:true},
+	{ name: "emeraldBlock", nameMcd:"emerald_block", Name:"Block of Emerald", harvestToolsNames: "goldOre", blastResistance: 6, material: "incorrect_for_wooden_tool", hardness:5, type:"metal3",category:"build", stoneSound:true},
+	{ name: "oakPlanks", nameMcd:"oak_planks", Name:"Oak Planks", blastResistance: 3, material: "mineable/axe", type:"wood",category:"build", hardness:2, woodSound:true, burnChance:0.1, burnTime:40, craftSlabs:true, craftStairs:true},
 	{
 		name: "oakLog",
+		nameMcd:"oak_log",
 		Name:"Oak Log",
+		blockStates: "paleOakWood",
+		blastResistance: 2,
+		material: "mineable/axe",
 		textures: [ "logTop", "logSide" ],
 		hardness:2,
 		woodSound:true,
@@ -1035,10 +1232,14 @@
 		burnTime:50,
 		log:true
 	},
-	{ name: "acaciaPlanks", Name:"Acacia Planks", type:"wood",category:"build", hardness:2, woodSound:true, burnChance:0.1, burnTime:40, craftSlabs:true, craftStairs:true},
+	{ name: "acaciaPlanks", nameMcd:"acacia_planks", Name:"Acacia Planks", blastResistance: 3, material: "mineable/axe", type:"wood",category:"build", hardness:2, woodSound:true, burnChance:0.1, burnTime:40, craftSlabs:true, craftStairs:true},
 	{
 		name: "acaciaLog",
+		nameMcd:"acacia_log",
 		Name:"Acacia Log",
+		blockStates: "paleOakWood",
+		blastResistance: 2,
+		material: "mineable/axe",
 		textures: [ "acaciaLogTop", "acaciaLogSide" ],
 		hardness:2,
 		woodSound:true,
@@ -1048,10 +1249,14 @@
 		burnTime:50,
 		log:true
 	},
-	{ name: "birchPlanks", Name:"Birch Planks", type:"wood",category:"build", hardness:2, woodSound:true, burnChance:0.1, burnTime:40, craftSlabs:true, craftStairs:true},
+	{ name: "birchPlanks", nameMcd:"birch_planks", Name:"Birch Planks", blastResistance: 3, material: "mineable/axe", type:"wood",category:"build", hardness:2, woodSound:true, burnChance:0.1, burnTime:40, craftSlabs:true, craftStairs:true},
 	{
 		name: "birchLog",
+		nameMcd:"birch_log",
 		Name:"Birch Log",
+		blockStates: "paleOakWood",
+		blastResistance: 2,
+		material: "mineable/axe",
 		textures: [ "birchLogTop", "birchLogSide" ],
 		hardness:2,
 		woodSound:true,
@@ -1061,10 +1266,14 @@
 		burnTime:50,
 		log:true
 	},
-	{ name: "darkOakPlanks", Name:"Dark Oak Planks", type:"wood",category:"build", hardness:2, woodSound:true, burnChance:0.1, burnTime:40, craftSlabs:true, craftStairs:true},
+	{ name: "darkOakPlanks", nameMcd:"dark_oak_planks", Name:"Dark Oak Planks", blastResistance: 3, material: "mineable/axe", type:"wood",category:"build", hardness:2, woodSound:true, burnChance:0.1, burnTime:40, craftSlabs:true, craftStairs:true},
 	{
 		name: "darkOakLog",
+		nameMcd:"dark_oak_log",
 		Name:"Dark Oak Log",
+		blockStates: "paleOakWood",
+		blastResistance: 2,
+		material: "mineable/axe",
 		textures: [ "darkOakLogTop", "darkOakLogSide" ],
 		hardness:2,
 		woodSound:true,
@@ -1074,10 +1283,14 @@
 		burnTime:50,
 		log:true
 	},
-	{ name: "junglePlanks", Name:"Jungle Planks", type:"wood",category:"build", hardness:2,woodSound:true, burnChance:0.1, burnTime:40, craftSlabs:true, craftStairs:true},
+	{ name: "junglePlanks", nameMcd:"jungle_planks", Name:"Jungle Planks", blastResistance: 3, material: "mineable/axe", type:"wood",category:"build", hardness:2,woodSound:true, burnChance:0.1, burnTime:40, craftSlabs:true, craftStairs:true},
 	{
 		name: "jungleLog",
+		nameMcd:"jungle_log",
 		Name:"Jungle Log",
+		blockStates: "paleOakWood",
+		blastResistance: 2,
+		material: "mineable/axe",
 		textures: [ "jungleLogTop", "jungleLogSide" ],
 		hardness:2,
 		woodSound:true,
@@ -1087,10 +1300,14 @@
 		burnTime:50,
 		log:true
 	},
-	{ name: "sprucePlanks", Name:"Spruce Planks", type:"wood",category:"build", hardness:2, woodSound:true, burnChance:0.1, burnTime:40, craftSlabs:true, craftStairs:true},
+	{ name: "sprucePlanks", nameMcd:"spruce_planks", Name:"Spruce Planks", blastResistance: 3, material: "mineable/axe", type:"wood",category:"build", hardness:2, woodSound:true, burnChance:0.1, burnTime:40, craftSlabs:true, craftStairs:true},
 	{
 		name: "spruceLog",
+		nameMcd:"spruce_log",
 		Name:"Spruce Log",
+		blockStates: "paleOakWood",
+		blastResistance: 2,
+		material: "mineable/axe",
 		textures: [ "spruceLogTop", "spruceLogSide" ],
 		hardness:2,
 		woodSound:true,
@@ -1100,41 +1317,44 @@
 		burnTime:50,
 		log:true
 	},
-	{ name: "whiteWool", Name:"White Wool",hardness:0.8, clothSound:true, shearBreakTime:0.2, type:"wool",category:"build", burnChance: 0.2, burnTime: 30},
-	{ name: "orangeWool", Name:"Orange Wool",hardness:0.8, clothSound:true, shearBreakTime:0.2, type:"wool",category:"build", burnChance: 0.2, burnTime: 30},
-	{ name: "magentaWool", Name:"Magenta Wool",hardness:0.8, clothSound:true, shearBreakTime:0.2, type:"wool",category:"build", burnChance: 0.2, burnTime: 30},
-	{ name: "lightBlueWool", Name:"Light Blue Wool",hardness:0.8, clothSound:true, shearBreakTime:0.2, type:"wool",category:"build", burnChance: 0.2, burnTime: 30},
-	{ name: "yellowWool", Name:"Yellow Wool",hardness:0.8, clothSound:true, shearBreakTime:0.2, type:"wool",category:"build", burnChance: 0.2, burnTime: 30},
-	{ name: "limeWool", Name:"Lime Wool",hardness:0.8, clothSound:true, shearBreakTime:0.2, type:"wool",category:"build", burnChance: 0.2, burnTime: 30},
-	{ name: "pinkWool", Name:"Pink Wool",hardness:0.8, clothSound:true, shearBreakTime:0.2, type:"wool",category:"build", burnChance: 0.2, burnTime: 30},
-	{ name: "grayWool", Name:"Gray Wool",hardness:0.8, clothSound:true, shearBreakTime:0.2, type:"wool",category:"build", burnChance: 0.2, burnTime: 30},
-	{ name: "lightGrayWool", Name:"Light Gray Wool",hardness:0.8, clothSound:true, shearBreakTime:0.2, type:"wool",category:"build", burnChance: 0.2, burnTime: 30},
-	{ name: "cyanWool", Name:"Cyan Wool",hardness:0.8, clothSound:true, shearBreakTime:0.2, type:"wool",category:"build", burnChance: 0.2, burnTime: 30},
-	{ name: "purpleWool", Name:"Purple Wool",hardness:0.8, clothSound:true, shearBreakTime:0.2, type:"wool",category:"build", burnChance: 0.2, burnTime: 30},
-	{ name: "blueWool", Name:"Blue Wool",hardness:0.8, clothSound:true, shearBreakTime:0.2, type:"wool",category:"build", burnChance: 0.2, burnTime: 30},
-	{ name: "brownWool", Name:"Brown Wool",hardness:0.8, clothSound:true, shearBreakTime:0.2, type:"wool",category:"build", burnChance: 0.2, burnTime: 30},
-	{ name: "greenWool", Name:"Green Wool",hardness:0.8, clothSound:true, shearBreakTime:0.2, type:"wool",category:"build", burnChance: 0.2, burnTime: 30},
-	{ name: "redWool", Name:"Red Wool",hardness:0.8, clothSound:true, shearBreakTime:0.2, type:"wool",category:"build", burnChance: 0.2, burnTime: 30},
-	{ name: "blackWool", Name:"Black Wool",hardness:0.8, clothSound:true, shearBreakTime:0.2, type:"wool",category:"build", burnChance: 0.2, burnTime: 30},
-	{ name: "whiteConcrete", Name:"White Concrete",hardness:1.8, type:"rock1",category:"build", stoneSound:true},
-	{ name: "orangeConcrete", Name:"Orange Concrete",hardness:1.8, type:"rock1",category:"build", stoneSound:true},
-	{ name: "magentaConcrete", Name:"Magenta Concrete",hardness:1.8, type:"rock1",category:"build", stoneSound:true},
-	{ name: "lightBlueConcrete", Name:"Light Blue Concrete",hardness:1.8, type:"rock1",category:"build", stoneSound:true},
-	{ name: "yellowConcrete", Name:"Yellow Concrete",hardness:1.8, type:"rock1",category:"build", stoneSound:true},
-	{ name: "limeConcrete", Name:"Lime Concrete",hardness:1.8, type:"rock1",category:"build", stoneSound:true},
-	{ name: "pinkConcrete", Name:"Pink Concrete",hardness:1.8, type:"rock1",category:"build", stoneSound:true},
-	{ name: "grayConcrete", Name:"Gray Concrete",hardness:1.8, type:"rock1",category:"build", stoneSound:true},
-	{ name: "lightGrayConcrete", Name:"Light Gray Concrete",hardness:1.8, type:"rock1",category:"build", stoneSound:true},
-	{ name: "cyanConcrete", Name:"Cyan Concrete",hardness:1.8, type:"rock1",category:"build", stoneSound:true},
-	{ name: "purpleConcrete", Name:"Purple Concrete",hardness:1.8, type:"rock1",category:"build", stoneSound:true},
-	{ name: "blueConcrete", Name:"Blue Concrete",hardness:1.8, type:"rock1",category:"build", stoneSound:true},
-	{ name: "brownConcrete", Name:"Brown Concrete",hardness:1.8, type:"rock1",category:"build", stoneSound:true},
-	{ name: "greenConcrete", Name:"Green Concrete",hardness:1.8, type:"rock1",category:"build", stoneSound:true},
-	{ name: "redConcrete", Name:"Red Concrete",hardness:1.8, type:"rock1",category:"build", stoneSound:true},
-	{ name: "blackConcrete", Name:"Black Concrete",hardness:1.8, type:"rock1",category:"build", stoneSound:true},
+	{ name: "whiteWool", nameMcd:"white_wool", Name:"White Wool", blastResistance: 0.8, material: "wool",hardness:0.8, clothSound:true, shearBreakTime:0.2, type:"wool",category:"build", burnChance: 0.2, burnTime: 30},
+	{ name: "orangeWool", nameMcd:"orange_wool", Name:"Orange Wool", blastResistance: 0.8, material: "wool",hardness:0.8, clothSound:true, shearBreakTime:0.2, type:"wool",category:"build", burnChance: 0.2, burnTime: 30},
+	{ name: "magentaWool", nameMcd:"magenta_wool", Name:"Magenta Wool", blastResistance: 0.8, material: "wool",hardness:0.8, clothSound:true, shearBreakTime:0.2, type:"wool",category:"build", burnChance: 0.2, burnTime: 30},
+	{ name: "lightBlueWool", nameMcd:"light_blue_wool", Name:"Light Blue Wool", blastResistance: 0.8, material: "wool",hardness:0.8, clothSound:true, shearBreakTime:0.2, type:"wool",category:"build", burnChance: 0.2, burnTime: 30},
+	{ name: "yellowWool", nameMcd:"yellow_wool", Name:"Yellow Wool", blastResistance: 0.8, material: "wool",hardness:0.8, clothSound:true, shearBreakTime:0.2, type:"wool",category:"build", burnChance: 0.2, burnTime: 30},
+	{ name: "limeWool", nameMcd:"lime_wool", Name:"Lime Wool", blastResistance: 0.8, material: "wool",hardness:0.8, clothSound:true, shearBreakTime:0.2, type:"wool",category:"build", burnChance: 0.2, burnTime: 30},
+	{ name: "pinkWool", nameMcd:"pink_wool", Name:"Pink Wool", blastResistance: 0.8, material: "wool",hardness:0.8, clothSound:true, shearBreakTime:0.2, type:"wool",category:"build", burnChance: 0.2, burnTime: 30},
+	{ name: "grayWool", nameMcd:"gray_wool", Name:"Gray Wool", blastResistance: 0.8, material: "wool",hardness:0.8, clothSound:true, shearBreakTime:0.2, type:"wool",category:"build", burnChance: 0.2, burnTime: 30},
+	{ name: "lightGrayWool", nameMcd:"light_gray_wool", Name:"Light Gray Wool", blastResistance: 0.8, material: "wool",hardness:0.8, clothSound:true, shearBreakTime:0.2, type:"wool",category:"build", burnChance: 0.2, burnTime: 30},
+	{ name: "cyanWool", nameMcd:"cyan_wool", Name:"Cyan Wool", blastResistance: 0.8, material: "wool",hardness:0.8, clothSound:true, shearBreakTime:0.2, type:"wool",category:"build", burnChance: 0.2, burnTime: 30},
+	{ name: "purpleWool", nameMcd:"purple_wool", Name:"Purple Wool", blastResistance: 0.8, material: "wool",hardness:0.8, clothSound:true, shearBreakTime:0.2, type:"wool",category:"build", burnChance: 0.2, burnTime: 30},
+	{ name: "blueWool", nameMcd:"blue_wool", Name:"Blue Wool", blastResistance: 0.8, material: "wool",hardness:0.8, clothSound:true, shearBreakTime:0.2, type:"wool",category:"build", burnChance: 0.2, burnTime: 30},
+	{ name: "brownWool", nameMcd:"brown_wool", Name:"Brown Wool", blastResistance: 0.8, material: "wool",hardness:0.8, clothSound:true, shearBreakTime:0.2, type:"wool",category:"build", burnChance: 0.2, burnTime: 30},
+	{ name: "greenWool", nameMcd:"green_wool", Name:"Green Wool", blastResistance: 0.8, material: "wool",hardness:0.8, clothSound:true, shearBreakTime:0.2, type:"wool",category:"build", burnChance: 0.2, burnTime: 30},
+	{ name: "redWool", nameMcd:"red_wool", Name:"Red Wool", blastResistance: 0.8, material: "wool",hardness:0.8, clothSound:true, shearBreakTime:0.2, type:"wool",category:"build", burnChance: 0.2, burnTime: 30},
+	{ name: "blackWool", nameMcd:"black_wool", Name:"Black Wool", blastResistance: 0.8, material: "wool",hardness:0.8, clothSound:true, shearBreakTime:0.2, type:"wool",category:"build", burnChance: 0.2, burnTime: 30},
+	{ name: "whiteConcrete", nameMcd:"white_concrete", Name:"White Concrete", harvestToolsNames: "stone", blastResistance: 1.8, material: "mineable/pickaxe",hardness:1.8, type:"rock1",category:"build", stoneSound:true},
+	{ name: "orangeConcrete", nameMcd:"orange_concrete", Name:"Orange Concrete", harvestToolsNames: "stone", blastResistance: 1.8, material: "mineable/pickaxe",hardness:1.8, type:"rock1",category:"build", stoneSound:true},
+	{ name: "magentaConcrete", nameMcd:"magenta_concrete", Name:"Magenta Concrete", harvestToolsNames: "stone", blastResistance: 1.8, material: "mineable/pickaxe",hardness:1.8, type:"rock1",category:"build", stoneSound:true},
+	{ name: "lightBlueConcrete", nameMcd:"light_blue_concrete", Name:"Light Blue Concrete", harvestToolsNames: "stone", blastResistance: 1.8, material: "mineable/pickaxe",hardness:1.8, type:"rock1",category:"build", stoneSound:true},
+	{ name: "yellowConcrete", nameMcd:"yellow_concrete", Name:"Yellow Concrete", harvestToolsNames: "stone", blastResistance: 1.8, material: "mineable/pickaxe",hardness:1.8, type:"rock1",category:"build", stoneSound:true},
+	{ name: "limeConcrete", nameMcd:"lime_concrete", Name:"Lime Concrete", harvestToolsNames: "stone", blastResistance: 1.8, material: "mineable/pickaxe",hardness:1.8, type:"rock1",category:"build", stoneSound:true},
+	{ name: "pinkConcrete", nameMcd:"pink_concrete", Name:"Pink Concrete", harvestToolsNames: "stone", blastResistance: 1.8, material: "mineable/pickaxe",hardness:1.8, type:"rock1",category:"build", stoneSound:true},
+	{ name: "grayConcrete", nameMcd:"gray_concrete", Name:"Gray Concrete", harvestToolsNames: "stone", blastResistance: 1.8, material: "mineable/pickaxe",hardness:1.8, type:"rock1",category:"build", stoneSound:true},
+	{ name: "lightGrayConcrete", nameMcd:"light_gray_concrete", Name:"Light Gray Concrete", harvestToolsNames: "stone", blastResistance: 1.8, material: "mineable/pickaxe",hardness:1.8, type:"rock1",category:"build", stoneSound:true},
+	{ name: "cyanConcrete", nameMcd:"cyan_concrete", Name:"Cyan Concrete", harvestToolsNames: "stone", blastResistance: 1.8, material: "mineable/pickaxe",hardness:1.8, type:"rock1",category:"build", stoneSound:true},
+	{ name: "purpleConcrete", nameMcd:"purple_concrete", Name:"Purple Concrete", harvestToolsNames: "stone", blastResistance: 1.8, material: "mineable/pickaxe",hardness:1.8, type:"rock1",category:"build", stoneSound:true},
+	{ name: "blueConcrete", nameMcd:"blue_concrete", Name:"Blue Concrete", harvestToolsNames: "stone", blastResistance: 1.8, material: "mineable/pickaxe",hardness:1.8, type:"rock1",category:"build", stoneSound:true},
+	{ name: "brownConcrete", nameMcd:"brown_concrete", Name:"Brown Concrete", harvestToolsNames: "stone", blastResistance: 1.8, material: "mineable/pickaxe",hardness:1.8, type:"rock1",category:"build", stoneSound:true},
+	{ name: "greenConcrete", nameMcd:"green_concrete", Name:"Green Concrete", harvestToolsNames: "stone", blastResistance: 1.8, material: "mineable/pickaxe",hardness:1.8, type:"rock1",category:"build", stoneSound:true},
+	{ name: "redConcrete", nameMcd:"red_concrete", Name:"Red Concrete", harvestToolsNames: "stone", blastResistance: 1.8, material: "mineable/pickaxe",hardness:1.8, type:"rock1",category:"build", stoneSound:true},
+	{ name: "blackConcrete", nameMcd:"black_concrete", Name:"Black Concrete", harvestToolsNames: "stone", blastResistance: 1.8, material: "mineable/pickaxe",hardness:1.8, type:"rock1",category:"build", stoneSound:true},
 	{
 		name: "bookshelf",
 		Name:"Bookshelf",
+		hardness: 1.5,
+		blastResistance: 1.5,
+		material: "mineable/axe",
 		textures: [ "oakPlanks", "bookshelf" ],
 		stoneSound: true,
 		type:"wood",
@@ -1144,6 +1364,9 @@
 	},
 	{ name: "netherrack",
 		Name:"Netherrack",
+		harvestToolsNames: "stone",
+		blastResistance: 0.4,
+		material: "mineable/pickaxe",
 		hardness:0.4,
 		type:"rock1",
 		category:"nature",
@@ -1152,8 +1375,11 @@
 		stepSound: ["netherrack.step1", "netherrack.step2","netherrack.step3","netherrack.step4","netherrack.step5","netherrack.step6"],
 		randomRotate:true,randomRotateTop:true,randomRotateBottom:true,randomRotateNorth:true,randomRotateSouth:true,randomRotateEast:true,randomRotateWest:true
 	},
-	{ name: "soulSand",
+	{ name: "soulSand", nameMcd:"soul_sand",
 		Name:"Soul Sand",
+		hardness: 0.5,
+		blastResistance: 0.5,
+		material: "mineable/shovel",
 		category:"nature",
 		speedFactor: 0.5,
 		canHaveSoulFire: true,
@@ -1164,6 +1390,7 @@
 	{
 		name: "glowstone",
 		Name:"Glowstone",
+		blastResistance: 0.3,
 		hardness:0.3,
 		type:"rock1",
 		category:"decoration",
@@ -1172,21 +1399,32 @@
 		shadow:false,
 		randomRotate:true,randomRotateTop:true,randomRotateBottom:true,randomRotateNorth:true,randomRotateSouth:true,randomRotateEast:true,randomRotateWest:true
 	},
-	{ name: "netherBricks",
+	{ name: "netherBricks", nameMcd:"nether_bricks",
 		Name:"Nether Bricks",
+		harvestToolsNames: "stone",
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
 		category:"build",
 		craftSlabs:true, craftStairs:true,
 		digSound: ["nether_bricks.dig1", "nether_bricks.dig2", "nether_bricks.dig3", "nether_bricks.dig4", "nether_bricks.dig5", "nether_bricks.dig6"],
 		stepSound: ["nether_bricks.step1", "nether_bricks.step2","nether_bricks.step3","nether_bricks.step4","nether_bricks.step5","nether_bricks.step6"]},
-	{ name: "redNetherBricks",
+	{ name: "redNetherBricks", nameMcd:"red_nether_bricks",
 		Name:"Red Nether Bricks",
+		harvestToolsNames: "stone",
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
 		category:"build",
 		craftSlabs:true, craftStairs:true,
 		digSound: ["nether_bricks.dig1", "nether_bricks.dig2", "nether_bricks.dig3", "nether_bricks.dig4", "nether_bricks.dig5", "nether_bricks.dig6"],
 		stepSound: ["nether_bricks.step1", "nether_bricks.step2","nether_bricks.step3","nether_bricks.step4","nether_bricks.step5","nether_bricks.step6"]},
 	{
-		name: "netherQuartzOre", 
+		name: "netherQuartzOre",
+		nameMcd:"nether_quartz_ore", 
 		Name:"Nether Quartz Ore",
+		harvestToolsNames: "stone",
+		material: "mineable/pickaxe",
 		category:"nature",
 		digSound: ["nether_ore.dig1", "nether_ore.dig2", "nether_ore.dig3", "nether_ore.dig4"],
 		stepSound: ["nether_ore.step1", "nether_ore.step2","nether_ore.step3","nether_ore.step4","nether_ore.step5"],
@@ -1198,43 +1436,54 @@
 	},
 	{
 		name: "quartzBlock",
+		nameMcd:"quartz_block",
 		Name:"Block of Quartz",
+		harvestToolsNames: "stone",
+		material: "mineable/pickaxe",
 		category:"build",
 		textures: ["quartzBlockBottom", "quartzBlockTop", "quartzBlockSide"],
 		stoneSound: true,
-		hardness:1.5,
-		blastResistance:6,
+		hardness:0.8,
+		blastResistance:0.8,
 		craftSlabs:true, craftStairs:true,
 	},
 	{
 		name: "quartzPillar",
+		nameMcd:"quartz_pillar",
 		Name:"Pillar",
+		harvestToolsNames: "stone",
+		blockStates: "paleOakWood",
+		material: "mineable/pickaxe",
 		category:"build",
 		textures: ["quartzPillarTop", "quartzPillar"],
 		stoneSound: true,
-		hardness:1.5,
-		blastResistance:6
+		hardness:0.8,
+		blastResistance:0.8
 	},
 	{
 		name: "chiseledQuartzBlock",
+		nameMcd:"chiseled_quartz_block",
 		Name:"Chiseled Quartz Block",
+		harvestToolsNames: "stone",
+		material: "mineable/pickaxe",
 		category:"build",
 		textures: ["chiseledQuartzBlockTop", "chiseledQuartzBlock"],
 		stoneSound: true,
-		hardness:1.5,
-		blastResistance:6
+		hardness:0.8,
+		blastResistance:0.8
 	},
-	{ name: "chiseledStoneBricks", Name:"Chiseled Stone Bricks",category:"build", hardness:1.5, blastResistance:6, stoneSound:true},
-	{ name: "smoothStone", Name:"Smooth Stone",category:"build", hardness:1.5, blastResistance:6, stoneSound:true, randomRotate:"flip",randomRotateTop:true,randomRotateBottom:true,randomRotateNorth:true,randomRotateSouth:true,randomRotateEast:true,randomRotateWest:true, craftSlabs:true, craftStairs:true},
-	{ name: "andesite", Name:"Andesite", stoneSound:true,category:"nature", hardness:1.5, blastResistance:6, randomRotate:"flip",randomRotateTop:true,randomRotateBottom:true,randomRotateNorth:true,randomRotateSouth:true,randomRotateEast:true,randomRotateWest:true, craftSlabs:true, craftStairs:true},
-	{ name: "polishedAndesite", Name:"Polished Andesite",category:"build", hardness:1.5, blastResistance:6, stoneSound:true, craftSlabs:true, craftStairs:true},
-	{ name: "diorite", Name:"Diorite", stoneSound:true,category:"nature", hardness:1.5, blastResistance:6, randomRotate:true,randomRotateTop:true,randomRotateBottom:true,randomRotateNorth:true,randomRotateSouth:true,randomRotateEast:true,randomRotateWest:true, craftSlabs:true, craftStairs:true},
-	{ name: "polishedDiorite", Name:"Polished Diorite",category:"build", hardness:1.5, blastResistance:6, stoneSound:true, craftSlabs:true, craftStairs:true},
-	{ name: "granite", Name:"Granite", stoneSound:true,category:"nature", hardness:1.5, blastResistance:6, randomRotate:true,randomRotateTop:true,randomRotateBottom:true,randomRotateNorth:true,randomRotateSouth:true,randomRotateEast:true,randomRotateWest:true, craftSlabs:true, craftStairs:true},
-	{ name: "polishedGranite", Name:"Polished Granite",category:"build", hardness:1.5, blastResistance:6, stoneSound:true, craftSlabs:true, craftStairs:true},
+	{ name: "chiseledStoneBricks", nameMcd:"chiseled_stone_bricks", Name:"Chiseled Stone Bricks", harvestToolsNames: "stone", material: "mineable/pickaxe",category:"build", hardness:1.5, blastResistance:6, stoneSound:true},
+	{ name: "smoothStone", nameMcd:"smooth_stone", Name:"Smooth Stone", harvestToolsNames: "stone", material: "mineable/pickaxe",category:"build", hardness:2, blastResistance:6, stoneSound:true, randomRotate:"flip",randomRotateTop:true,randomRotateBottom:true,randomRotateNorth:true,randomRotateSouth:true,randomRotateEast:true,randomRotateWest:true, craftSlabs:true, craftStairs:true},
+	{ name: "andesite", Name:"Andesite", harvestToolsNames: "stone", material: "mineable/pickaxe", stoneSound:true,category:"nature", hardness:1.5, blastResistance:6, randomRotate:"flip",randomRotateTop:true,randomRotateBottom:true,randomRotateNorth:true,randomRotateSouth:true,randomRotateEast:true,randomRotateWest:true, craftSlabs:true, craftStairs:true},
+	{ name: "polishedAndesite", nameMcd:"polished_andesite", Name:"Polished Andesite", harvestToolsNames: "stone", material: "mineable/pickaxe",category:"build", hardness:1.5, blastResistance:6, stoneSound:true, craftSlabs:true, craftStairs:true},
+	{ name: "diorite", Name:"Diorite", harvestToolsNames: "stone", material: "mineable/pickaxe", stoneSound:true,category:"nature", hardness:1.5, blastResistance:6, randomRotate:true,randomRotateTop:true,randomRotateBottom:true,randomRotateNorth:true,randomRotateSouth:true,randomRotateEast:true,randomRotateWest:true, craftSlabs:true, craftStairs:true},
+	{ name: "polishedDiorite", nameMcd:"polished_diorite", Name:"Polished Diorite", harvestToolsNames: "stone", material: "mineable/pickaxe",category:"build", hardness:1.5, blastResistance:6, stoneSound:true, craftSlabs:true, craftStairs:true},
+	{ name: "granite", Name:"Granite", harvestToolsNames: "stone", material: "mineable/pickaxe", stoneSound:true,category:"nature", hardness:1.5, blastResistance:6, randomRotate:true,randomRotateTop:true,randomRotateBottom:true,randomRotateNorth:true,randomRotateSouth:true,randomRotateEast:true,randomRotateWest:true, craftSlabs:true, craftStairs:true},
+	{ name: "polishedGranite", nameMcd:"polished_granite", Name:"Polished Granite", harvestToolsNames: "stone", material: "mineable/pickaxe",category:"build", hardness:1.5, blastResistance:6, stoneSound:true, craftSlabs:true, craftStairs:true},
 	{ // I swear, if y'all don't stop asking about TNT every 5 minutes!
 		name: "tnt",
 		Name:"TNT",
+		blockStates: [{"name":"unstable","values":[false,true]}],
 		textures: ["tntBottom", "tntTop", "tntSides"],
 		superTntTextures: ["superTntBottom","superTntTop","superTnt"],
 		ultraTntTextures: ["ultraTntBottom","ultraTntTop","ultraTnt"],
@@ -1280,6 +1529,9 @@
 	},
 	{
 		name: "portal",
+		nameMcd:"nether_portal",
+		blockStates: [{"name":"axis","values":["x","z"]}],
+		hardness: Infinity,
 		solid:false,
 		shadow: false,
 		portal: true,
@@ -1344,16 +1596,16 @@
 						world.setBlock(x+1,y-5,z,blockIds.obsidian)
 						//layer2
 						world.setBlock(x-2,y-4,z,blockIds.obsidian)
-						world.setBlock(x-1,y-4,z,blockIds.portal|PORTAL|NORTH)
-						world.setBlock(x,y-4,z,blockIds.portal|PORTAL|NORTH)
+						world.setBlock(x-1,y-4,z,blockIds.portal+blockStateMaps.portal.axis.z)
+						world.setBlock(x,y-4,z,blockIds.portal+blockStateMaps.portal.axis.z)
 						world.setBlock(x+1,y-4,z,blockIds.obsidian)
 						world.setBlock(x-2,y-3,z,blockIds.obsidian)
-						world.setBlock(x-1,y-3,z,blockIds.portal|PORTAL|NORTH)
-						world.setBlock(x,y-3,z,blockIds.portal|PORTAL|NORTH)
+						world.setBlock(x-1,y-3,z,blockIds.portal+blockStateMaps.portal.axis.z)
+						world.setBlock(x,y-3,z,blockIds.portal+blockStateMaps.portal.axis.z)
 						world.setBlock(x+1,y-3,z,blockIds.obsidian)
 						world.setBlock(x-2,y-2,z,blockIds.obsidian)
-						world.setBlock(x-1,y-2,z,blockIds.portal|PORTAL|NORTH)
-						world.setBlock(x,y-2,z,blockIds.portal|PORTAL|NORTH)
+						world.setBlock(x-1,y-2,z,blockIds.portal+blockStateMaps.portal.axis.z)
+						world.setBlock(x,y-2,z,blockIds.portal+blockStateMaps.portal.axis.z)
 						world.setBlock(x+1,y-2,z,blockIds.obsidian)
 						//layer5
 						world.setBlock(x-2,y-1,z,blockIds.obsidian)
@@ -1367,16 +1619,16 @@
 						world.setBlock(x,y-5,z+1,blockIds.obsidian)
 						//layer2
 						world.setBlock(x,y-4,z-2,blockIds.obsidian)
-						world.setBlock(x,y-4,z-1,blockIds.portal|PORTAL|EAST)
-						world.setBlock(x,y-4,z,blockIds.portal|PORTAL|EAST)
+						world.setBlock(x,y-4,z-1,blockIds.portal+blockStateMaps.portal.axis.x)
+						world.setBlock(x,y-4,z,blockIds.portal+blockStateMaps.portal.axis.x)
 						world.setBlock(x,y-4,z+1,blockIds.obsidian)
 						world.setBlock(x,y-3,z-2,blockIds.obsidian)
-						world.setBlock(x,y-3,z-1,blockIds.portal|PORTAL|EAST)
-						world.setBlock(x,y-3,z,blockIds.portal|PORTAL|EAST)
+						world.setBlock(x,y-3,z-1,blockIds.portal+blockStateMaps.portal.axis.x)
+						world.setBlock(x,y-3,z,blockIds.portal+blockStateMaps.portal.axis.x)
 						world.setBlock(x,y-3,z+1,blockIds.obsidian)
 						world.setBlock(x,y-2,z-2,blockIds.obsidian)
-						world.setBlock(x,y-2,z-1,blockIds.portal|PORTAL|EAST)
-						world.setBlock(x,y-2,z,blockIds.portal|PORTAL|EAST)
+						world.setBlock(x,y-2,z-1,blockIds.portal+blockStateMaps.portal.axis.x)
+						world.setBlock(x,y-2,z,blockIds.portal+blockStateMaps.portal.axis.xT)
 						world.setBlock(x,y-2,z+1,blockIds.obsidian)
 						//layer5
 						world.setBlock(x,y-1,z-2,blockIds.obsidian)
@@ -1390,7 +1642,7 @@
 			}
 		}
 	},
-	{ name: "obsidian", Name:"Obsidian", stoneSound:true, type:"rock4",category:"nature", hardness:50, blastResistance:1200, pistonPush:false, pistonPull:false, randomRotate:true,randomRotateTop:true,randomRotateBottom:true,randomRotateNorth:true,randomRotateSouth:true,randomRotateEast:true,randomRotateWest:true},
+	{ name: "obsidian", Name:"Obsidian", harvestToolsNames: ["diamondPickaxe","netheritePickaxe"], material: "incorrect_for_wooden_tool", stoneSound:true, type:"rock4",category:"nature", hardness:50, blastResistance:1200, pistonPush:false, pistonPull:false, randomRotate:true,randomRotateTop:true,randomRotateBottom:true,randomRotateNorth:true,randomRotateSouth:true,randomRotateEast:true,randomRotateWest:true},
 	//the old redstone dust added before this version of minekhan was public (early 2021)
 	/*{
 		name:"redstoneDust",
@@ -1464,6 +1716,8 @@
 	},
 	{
 		name:"redstoneDust",
+		nameMcd:"redstone_wire",
+		blockStates: [{"name":"east","values":["up","side","none"]},{"name":"north","values":["up","side","none"]},{"name":"power","values":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15"]},{"name":"south","values":["up","side","none"]},{"name":"west","values":["up","side","none"]}],
 		textures:"redstoneDustDot",
 		shadow:false,
 		transparent:true,
@@ -1491,13 +1745,8 @@
 			down:[13,1]
 		},
 		tint:[[75,0,0],[111,0,0],[121,0,0],[130,0,0],[140,0,0],[151,0,0],[161,0,0],[171,0,0],[181,0,0],[191,0,0],[202,0,0],[211,0,0],[221,0,0],[231,6,0],[241,27,0],[252,49,0]].map(v => {v[0]/=255;v[1]/=255;v[2]/=255;return v}),
-		blueTint:[[0,75,75],[0,111,111],[0,121,121],[0,130,130],[0,140,140],[0,151,151],[0,161,161],[0,171,171],[0,181,181],[0,191,191],[0,202,202],[0,211,211],[0,221,221],[6,231,231],[27,241,241],[49,252,252]].map(v => {v[0]/=255;v[1]/=255;v[2]/=255;return v}),
-		tagTintPropertyTop: "power",
-		tagTintPropertyBottom: "power",
-		tagTintPropertyNorth: "power",
-		tagTintPropertySouth: "power",
-		tagTintPropertyEast: "power",
-		tagTintPropertyWest: "power",
+		tagTint: "power",
+		copyFromProperties:["tagBits","damage","dieMessage","connectable","connectables"],
 		onupdate: function(x,y,z,b,world,sx,sy,sz){
 			let tags = world.getTags(x,y,z)
 			let north, south, east, west
@@ -1555,28 +1804,12 @@
 			world.setTagByName(x,y,z,"down",down,false,false)//notice last one not lazy and not remote
 			
 			//set texture and stuff
-			let sum = north + south + east + west
-			let block = this.id //dot
-			if(sum === 2){
-				if(north && west) block = this.id | STAIR | EAST
-				else if(west && south) block = this.id | STAIR | SOUTH
-				else if(south && east) block = this.id | STAIR | WEST
-				else if(east && north) block = this.id | STAIR | NORTH
-				else{
-					if(north || south) block = this.id | SLAB | NORTH
-					if(east || west) block = this.id | SLAB | EAST
-				}
-			}else if(sum === 3){
-				if(east && west){
-					if(north) block = this.id | DOOR | NORTH
-					else block = this.id | DOOR | SOUTH
-				}else if(north && south){
-					if(east) block = this.id | DOOR | WEST
-					else block = this.id | DOOR | EAST
-				}
-			}else if(sum === 4) block = this.id | PANE
-			if((b & FLIP) === FLIP) block |= FLIP //blue redstone
-			if(world.getBlock(x,y,z) !== block){
+			let block = b
+			block = setBlockState(block,this.blockStatesMap.north, northUp?"up":north?"side":"none")
+			block = setBlockState(block,this.blockStatesMap.south, southUp?"up":south?"side":"none")
+			block = setBlockState(block,this.blockStatesMap.east, eastUp?"up":east?"side":"none")
+			block = setBlockState(block,this.blockStatesMap.west, westUp?"up":west?"side":"none")
+			if(b !== block){
 				world.setBlock(x,y,z,block,false,false,false,true)
 				//world.updateBlock(x,y,z,false,false,null,null,null,dimension)
 			}
@@ -1742,11 +1975,11 @@
 				var block = world.getBlock(x,y+1,z)
 				if(block && !blockData[block].transparent) return false
 			}
-			if(up || down) return blockData[id].name === "redstoneDust" && (id & FLIP) === (b & FLIP)
+			if(up || down) return blockData[id].id === this.id
 			
-			if(blockData[id].name === "redstoneDust" && (id & FLIP) === (b & FLIP)) return true
-			if(this.connectables.includes(blockData[id].name)) return true
+			if(blockData[id].id === this.id) return true
 			for(var i of this.connectables){
+				if(i === blockData[id].name) return true
 				if(i.startsWith("is:")){
 					if(blockData[id][i.replace("is:","")]) return true
 				}
@@ -1830,10 +2063,10 @@
 		}
 	},*/
 	{
-		name:"blueRedstone",
+		name:"blueRedstone",//todo n: maybe convert from old block states
 		Name:"Blue Redstone Dust",
 		item:true,
-		useAs:() => blockIds.redstoneDust | FLIP,
+		useAs:() => blockIds.blueRedstoneDust,
 		category:"redstone",
 	},
 	{ name: "soup",category:"food"},
@@ -1857,6 +2090,9 @@
 	
 	{
 		name: "light",
+		blockStates: [{"name":"level","values":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15"]},{"name":"waterlogged","values":[false,true]}],
+		hardness: Infinity,
+		blastResistance: 3600000.8,
 		textures: "none",
 		transparent:true,
 		lightLevel: 15,
@@ -1958,7 +2194,9 @@
 	},
 	
 	{ name: "lilyOftheValley",
+	 	nameMcd:"lily_of_the_valley",
 		Name:"Lily of The Valley",
+		material: "plant",
 		solid: false,
 		transparent: true,
 		shadow: false,
@@ -1971,6 +2209,7 @@
 	},
 	{ name: "poppy",
 		Name:"Poppy",
+		material: "plant",
 		solid: false,
 		transparent: true,
 		shadow: false,
@@ -1983,6 +2222,7 @@
 	},
 	{ name: "dandelion",
 		Name:"Dandelion",
+		material: "plant",
 		solid: false,
 		transparent: true,
 		shadow: false,
@@ -1993,8 +2233,9 @@
 		category:"nature",
 		randomOffset:true
 	},
-	{ name: "blueOrchid",
+	{ name: "blueOrchid", nameMcd:"blue_orchid",
 		Name:"Blue Orchid",
+		material: "plant",
 		solid: false,
 		transparent: true,
 		shadow: false,
@@ -2005,8 +2246,9 @@
 		potCross:true,
 		randomOffset:true
 	},
-	{ name: "pinkTulip",
+	{ name: "pinkTulip", nameMcd:"pink_tulip",
 		Name:"Pink Tulip",
+		material: "plant",
 			solid: false,
 			transparent: true,
 			shadow: false,
@@ -2017,8 +2259,9 @@
 		category:"nature",
 		randomOffset:true
 	},
-	{ name: "orangeTulip",
+	{ name: "orangeTulip", nameMcd:"orange_tulip",
 		Name:"Orange Tulip",
+		material: "plant",
 			solid: false,
 			transparent: true,
 			shadow: false,
@@ -2029,8 +2272,9 @@
 		category:"nature",
 		randomOffset:true
 	},
-	{ name: "redTulip",
+	{ name: "redTulip", nameMcd:"red_tulip",
 		Name:"Red Tulip",
+		material: "plant",
 			solid: false,
 			transparent: true,
 			shadow: false,
@@ -2041,8 +2285,9 @@
 		category:"nature",
 		randomOffset:true
 	},
-	{ name: "whiteTulip",
+	{ name: "whiteTulip", nameMcd:"white_tulip",
 		Name:"White Tulip",
+		material: "plant",
 			solid: false,
 			transparent: true,
 			shadow: false,
@@ -2053,8 +2298,9 @@
 		category:"nature",
 		randomOffset:true
 	},
-	{ name: "azureBluet",
+	{ name: "azureBluet", nameMcd:"azure_bluet",
 		Name:"Azure Bluet",
+		material: "plant",
 			solid: false,
 			transparent: true,
 			shadow: false,
@@ -2066,12 +2312,14 @@
 		randomOffset:true
 	},
 	{ name: "cornFlower",
+		nameMcd:"cornflower",
 		Name:"Cornflower",
-			solid: false,
-			transparent: true,
-			shadow: false,
+		material: "plant",
+		solid: false,
+		transparent: true,
+		shadow: false,
 		potCross: true,
-			crossShape: true,
+		crossShape: true,
 		compostChance:0.65,
 		liquidBreakable:"drop",
 		category:"nature",
@@ -2091,6 +2339,7 @@
 	},
 	{ name: "allium",
 		Name:"Allium",
+		material: "plant",
 			solid: false,
 			transparent: true,
 			shadow: false,
@@ -2101,8 +2350,9 @@
 		category:"nature",
 		randomOffset:true
 	},
-	{ name: "oxeyeDaisy",
+	{ name: "oxeyeDaisy", nameMcd:"oxeye_daisy",
 		Name:"Oxeye Daisy",
+		material: "plant",
 			solid: false,
 			transparent: true,
 			shadow: false,
@@ -2115,6 +2365,8 @@
 	},
 	{ name: "lilac",
 		Name:"Lilac",
+		blockStates: "tallSeagrass",
+		material: "plant",
 			solid: false,
 			transparent: true,
 			shadow: false,
@@ -2124,8 +2376,10 @@
 		category:"nature",
 		randomOffset:true
 	},
-	{ name: "roseBush",
+	{ name: "roseBush", nameMcd:"rose_bush",
 		Name:"Rose Bush",
+		blockStates: "tallSeagrass",
+		material: "plant",
 			solid: false,
 			transparent: true,
 			shadow: false,
@@ -2137,6 +2391,8 @@
 	},
 	{ name: "peony",
 		Name:"Peony",
+		blockStates: "tallSeagrass",
+		material: "plant",
 			solid: false,
 			transparent: true,
 			shadow: false,
@@ -2146,8 +2402,9 @@
 		category:"nature",
 		randomOffset:true
 	},
-	{ name: "witherRose",
+	{ name: "witherRose", nameMcd:"wither_rose",
 		Name:"Wither Rose",
+		material: "plant",
 		solid: false,
 		transparent: true,
 		shadow: false,
@@ -2161,7 +2418,9 @@
 	},
 	{
 		name: "TallGrass",
+		nameMcd:"short_grass",
 		Name:"Grass",
+		material: "plant;mineable/axe",
 		solid: false,
 		transparent: true,
 		shadow: false,
@@ -2186,7 +2445,11 @@
 	
 	{ 
 		name: "oakDoor",
+		nameMcd:"oak_door",
 		Name:"Oak Door",
+		blockStates: [{"name":"facing","values":["north","south","west","east"]},{"name":"half","values":["upper","lower"]},{"name":"hinge","values":["left","right"]},{"name":"open","values":[false,true]},{"name":"powered","values":[false,true]}],
+		blastResistance: 3,
+		material: "mineable/axe",
 		transparent: true,
 		shadow: false,
 		textures: "oakDoorConnected",
@@ -2194,11 +2457,30 @@
 		woodSound:true,
 		hardness:3,
 		type:"wood",
-		category:"build"
+		category:"build",
+		onclick: function(x,y,z,world){
+			var b = world.getBlock(x,y,z)
+			var o = getBlockState(b,this.blockStatesMap.open)
+			world.setBlock(x,y,z,setBlockState(b,this.blockStatesMap.open, !o))
+			doorSound(x,y,z,this.name === "ironDoor"?"iron_door":"wooden_door",!o,world)
+		},
+		onpowerupdate: function(x,y,z,sx,sy,sz,blockPowerChanged,world){
+			var power = world.getRedstonePower(x,y,z) || world.getSurroundingBlockPower(x,y,z) ? true : false
+			var b = world.getBlock(x,y,z)
+			var o = getBlockState(b,this.blockStatesMap.open)
+			if(power !== o){
+				world.setBlock(x,y,z,setBlockState(b,this.blockStatesMap.open, power))
+				doorSound(x,y,z,this.name === "ironDoor"?"iron_door":"wooden_door",!o,world)
+			}
+		}
 	},
 	{
 		name: "spruceDoor",
+		nameMcd:"spruce_door",
 		Name:"Spruce Door",
+		blockStates: "oakDoor",
+		blastResistance: 3,
+		material: "mineable/axe",
 		transparent: true,
 		shadow: false,
 		textures:"spruceDoorConnected",
@@ -2206,23 +2488,35 @@
 		woodSound:true,
 		hardness:3,
 		type:"wood",
-		category:"build"
+		category:"build",
+		copyPropertiesHere:"oakDoor"
 	},
 	{
 		name: "ironDoor",
+		nameMcd:"iron_door",
 		Name:"Iron Door",
+		harvestToolsNames: "stone",
+		blockStates: "oakDoor",
+		blastResistance: 5,
+		material: "mineable/pickaxe",
 		transparent: true,
 		shadow: false,
 		textures:"ironDoorConnected",
 		door:true,
 		stoneSound:true,
-		hardness:3,
+		hardness:5,
 		type:"wood",
-		category:"build"
+		category:"build",
+		copyPropertiesHere:"oakDoor",
+		onclick: null
 	},
 	{
 		name: "darkOakDoor",
+		nameMcd:"dark_oak_door",
 		Name:"Dark Oak Door",
+		blockStates: "oakDoor",
+		blastResistance: 3,
+		material: "mineable/axe",
 		transparent: true,
 		shadow: false,
 		textures:"darkOakDoorConnected",
@@ -2230,11 +2524,16 @@
 		woodSound:true,
 		hardness:3,
 		type:"wood",
-		category:"build"
+		category:"build",
+		copyPropertiesHere:"oakDoor"
 	},
 	{
 		name: "birchDoor",
+		nameMcd:"birch_door",
 		Name:"Birch Door",
+		blockStates: "oakDoor",
+		blastResistance: 3,
+		material: "mineable/axe",
 		transparent: true,
 		shadow: false,
 		textures:"birchDoorConnected",
@@ -2242,11 +2541,16 @@
 		woodSound:true,
 		hardness:3,
 		type:"wood",
-		category:"build"
+		category:"build",
+		copyPropertiesHere:"oakDoor"
 	},
 	{
 		name: "jungleDoor",
+		nameMcd:"jungle_door",
 		Name:"Jungle Door",
+		blockStates: "oakDoor",
+		blastResistance: 3,
+		material: "mineable/axe",
 		transparent: true,
 		shadow: false,
 		textures:"jungleDoorConnected",
@@ -2254,11 +2558,16 @@
 		woodSound:true,
 		hardness:3,
 		type:"wood",
-		category:"build"
+		category:"build",
+		copyPropertiesHere:"oakDoor"
 	},
 	{
 		name: "acaciaDoor",
+		nameMcd:"acacia_door",
 		Name:"Acacia Door",
+		blockStates: "oakDoor",
+		blastResistance: 3,
+		material: "mineable/axe",
 		transparent: true,
 		shadow: false,
 		textures:"acaciaDoorConnected",
@@ -2266,11 +2575,16 @@
 		woodSound:true,
 		hardness:3,
 		type:"wood",
-		category:"build"
+		category:"build",
+		copyPropertiesHere:"oakDoor"
 	},
 	{
 		name: "warpedDoor",
+		nameMcd:"warped_door",
 		Name:"Warped Door",
+		blockStates: "oakDoor",
+		blastResistance: 3,
+		material: "mineable/axe",
 		transparent: true,
 		shadow: false,
 		textures:"warpedDoorConnected",
@@ -2278,11 +2592,16 @@
 		woodSound:true,
 		hardness:3,
 		type:"wood",
-		category:"build"
+		category:"build",
+		copyPropertiesHere:"oakDoor"
 	},
 	{
 		name: "crimsonDoor",
+		nameMcd:"crimson_door",
 		Name:"Crimson Door",
+		blockStates: "oakDoor",
+		blastResistance: 3,
+		material: "mineable/axe",
 		transparent: true,
 		shadow: false,
 		textures:"crimsonDoorConnected",
@@ -2290,7 +2609,8 @@
 		woodSound:true,
 		hardness:3,
 		type:"wood",
-		category:"build"
+		category:"build",
+		copyPropertiesHere:"oakDoor"
 	},
 	
 	{
@@ -2299,13 +2619,15 @@
 		transparent: true,
 		shadow: false,
 		torch: true,
-		lightLevel: 13,
+		lightLevel: 14,
 		woodSound:true,
 		solid:false,
-		category:"decoration"
+		category:"decoration",
+		useAsWall:"wallTorch"
 	},
 	{
 		name: "soulTorch",
+		nameMcd:"soul_torch",
 		Name:"Soul Torch",
 		transparent: true,
 		shadow: false,
@@ -2313,24 +2635,40 @@
 		lightLevel: 10,
 		woodSound:true,
 		solid:false,
-		category:"decoration"
+		category:"decoration",
+		useAsWall:"soulWallTorch"
 	},
 	
 	{
 		name: "lantern",
 		Name:"Lantern",
+		harvestToolsNames: "stone",
+		blockStates: [{"name":"hanging","values":[false,true]},{"name":"waterlogged","values":[false,true]}],
+		hardness: 3.5,
+		blastResistance: 3.5,
+		material: "mineable/pickaxe",
 		transparent: true,
 		shadow: false,
-		lightLevel: 13,
+		lightLevel: 15,
 		iconTexture: "lanternIcon",
 		lantern: true,
 		category:"decoration",
 		digSound: ["lantern.dig1", "lantern.dig2", "lantern.dig3", "lantern.dig4", "lantern.dig5", "lantern.dig6"],
-		placeSound: ["lantern.place1", "lantern.place2","lantern.place3","lantern.place4","lantern.place5","lantern.place6"]
+		placeSound: ["lantern.place1", "lantern.place2","lantern.place3","lantern.place4","lantern.place5","lantern.place6"],
+		useAs:function(x,y,z,block,face,world){
+			if(world.getBlock(x,y+1,z)) return this.id+this.blockStatesMap.hanging.true
+			else return this.id+this.blockStatesMap.hanging.false
+		}
 	},
 	{
 		name: "soulLantern",
+		nameMcd:"soul_lantern",
 		Name:"Soul Lantern",
+		harvestToolsNames: "stone",
+		blockStates: "lantern",
+		hardness: 3.5,
+		blastResistance: 3.5,
+		material: "mineable/pickaxe",
 		transparent: true,
 		shadow: false,
 		lightLevel: 10,
@@ -2338,12 +2676,15 @@
 		lantern: true,
 		category:"decoration",
 		digSound: ["lantern.dig1", "lantern.dig2", "lantern.dig3", "lantern.dig4", "lantern.dig5", "lantern.dig6"],
-		placeSound: ["lantern.place1", "lantern.place2","lantern.place3","lantern.place4","lantern.place5","lantern.place6"]
+		placeSound: ["lantern.place1", "lantern.place2","lantern.place3","lantern.place4","lantern.place5","lantern.place6"],
+		copyPropertiesHere:"lantern"
 	},
 	
 	{
 		name: "beacon",
 		Name:"Beacon",
+		decreaseLight: 1,
+		blastResistance: 3,
 		hardness:3,
 		transparent: true,
 		shadow: false,
@@ -2367,23 +2708,22 @@
 			}
 			return minSize
 		},
-		update: function(x,y,z,world){
-			let minSize = this.getSize(x,y,z,world), block = world.getBlock(x,y,z)
-			if(minSize){
-				if(block !== (this.id | BEACON)){
-					world.setBlock(x,y,z,this.id|BEACON,false,false,false,true)
-				}
-			}else if(block !== this.id) world.setBlock(x,y,z,this.id,false,false,false,true)
+		tick: function(block,x,y,z,world){
+			let minSize = this.getSize(x,y,z,world)
+			world.setTagByName(x,y,z,"on",minSize)
 			return minSize
 		},
 		onplace: function(x,y,z, player,world){
-			this.update(x,y,z,world)
+			this.tick(world.getBlock(x,y,z), x,y,z,world)
 		}
 	},
 	
 	{
 		name: "cactus",
 		Name:"Cactus",
+		blockStates: [{"name":"age","values":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15"]}],
+		hardness: 0.4,
+		blastResistance: 0.4,
 		textures: ["cactusBottom", "cactusTop", "cactusSide"],
 		transparent: true,
 		cactus: true,
@@ -2394,12 +2734,31 @@
 		},
 		compostChance:0.5,
 		liquidBreakable:"drop",
-		category:"nature"
+		category:"nature",
+		growSlow:function(x,y,z,world,block){
+			var tall = 0
+			var maxTall = 3
+			for(var t=0; t<maxTall; t++){
+				if(blockData[world.getBlock(x,y-t,z)].id === this.id) tall++
+				else break
+			}
+			if(tall >= maxTall) return
+			
+			var above = world.getBlock(x,y+1,z)
+			if(blockData[above].cactusFruit){
+				if(world.getBlock(x,y+2,z)) return //the cactus fruit can't replace blocks
+				world.setBlock(x,y+2,z, above, false,false,false,false, this.type) //move the cactus fruit up
+			}else if(above) return //there is a block so it can't grow
+			world.setBlock(x,y+1,z, blockIds.cactus, false,false,false,false, this.type)
+		},
 	},
 	
-	{
+	{//todo n: sideways pane, all color panes
 		name: "glassPane",
+		nameMcd:"glass_pane",
 		Name:"Glass Pane",
+		blockStates: "oakFence",
+		blastResistance: 0.3,
 		transparent: true,
 		shadow: false,
 		hardness: 0.3,
@@ -2412,6 +2771,9 @@
 	{
 		name: "ladder",
 		Name:"Ladder",
+		blockStates: [{"name":"facing","values":["north","south","west","east"]},{"name":"waterlogged","values":[false,true]}],
+		blastResistance: 0.4,
+		material: "mineable/axe",
 		transparent: true,
 		shadow: false,
 		wallFlat: true,ladder:true,
@@ -2422,6 +2784,10 @@
 	{
 		name: "vine",
 		Name:"Vine",
+		blockStates: [{"name":"east","values":[false,true]},{"name":"north","values":[false,true]},{"name":"south","values":[false,true]},{"name":"up","values":[false,true]},{"name":"west","values":[false,true]}],
+		hardness: 0.2,
+		blastResistance: 0.2,
+		material: "vine_or_glow_lichen;plant;mineable/axe",
 		transparent: true,
 		shadow: false,
 		wallFlat: true,ladder:true,
@@ -2432,20 +2798,10 @@
 		solid:false,
 		onupdate:function(x,y,z,b,world,sx,sy,sz){
 			var fx = x, fz = z
-			switch(b){
-				case this.id | WALLFLAT | NORTH:
-					fz++
-					break
-				case this.id | WALLFLAT | SOUTH:
-					fz--
-					break
-				case this.id | WALLFLAT | EAST:
-					fx++
-					break
-				case this.id | WALLFLAT | WEST:
-					fx--
-					break
-			}
+			if(getBlockState(b,this.blockStatesMap.north)) fz++
+			else if(getBlockState(b,this.blockStatesMap.south)) fz--
+			else if(getBlockState(b,this.blockStatesMap.east)) fx++
+			else if(getBlockState(b,this.blockStatesMap.west)) fx--
 			var block = world.getBlock(fx,y,fz)
 			var above = world.getBlock(x,y+1,z)
 			if(!world.world.settings.blocksFall || block && blockData[block].solid || above === b) return
@@ -2455,12 +2811,16 @@
 				if(block && blockData[block].solid || above === b) return
 				
 				world.setBlock(x,y,z, 0)
-				world.addItems(x,y,z,0,0,0,b&isCube,true)
+				world.addItems(x,y,z,0,0,0,this.id,true)
 				world.blockParticles(b,x,y,z,30, "break")
 				world.blockSound(b, "dig", x,y,z)
 			},tickTime,x,y,z)
 		},
-		
+		grow:function(x,y,z,world,blockID){
+			if(!world.getBlock(x,y-1,z)){
+				world.setBlock(x,y-1,z,blockID)
+			}
+		},
 		compostChance:0.5,
 		category:"nature",
 		tint:leafTint,
@@ -2475,6 +2835,9 @@
 	
 	{
 		name: "Water",
+		nameMcd:"water",
+		blockStates: [{"name":"level","values":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15"]}],
+		hardness: 100,
 		textures:["Water","waterFlow"],
 		transparent: true,
 		liquid: true,
@@ -2519,6 +2882,10 @@
 	},
 	{
 		name: "Lava",
+		nameMcd:"lava",
+		blockStates: "Water",
+		decreaseLight: 1,
+		hardness: 100,
 		textures:["Lava","lavaFlow"],
 		transparent: true,
 		liquid: true,
@@ -2537,7 +2904,7 @@
 		inLiquid:2,
 		ambientSound:"liquid.lava",
 		getLevelDifference:function(level,dimension){return dimension === "nether" ? level-1 : level-2},
-		tick:function(x,y,z,world){
+		tick:function(block,x,y,z,world){
 			blockData[blockIds.fire].spread(x,y,z,world)
 		},
 		onupdate:function(x,y,z,b,world,sx,sy,sz){
@@ -2577,7 +2944,10 @@
 	
 	{
 		name: "craftingTable",
+		nameMcd:"crafting_table",
 		Name:"Crafting Table",
+		blastResistance: 2.5,
+		material: "mineable/axe",
 		textures: ["oakPlanks","craftingTableTop","craftingTableFront","craftingTableSide"],
 		onclientclick: () => {changeScene("crafting"); releasePointer()},
 		woodSound: true,
@@ -2588,27 +2958,57 @@
 	
 	{
 		name: "crimsonNylium",
+		nameMcd:"crimson_nylium",
 		Name:"Crimson Nylium",
+		harvestToolsNames: "stone",
+		material: "mineable/pickaxe",
 		textures: ["netherrack", "crimsonNyliumTop", "crimsonNyliumSide"],
 		nyliumSound: true,
 		category:"nature",
 		hardness:0.4,
 		blastResistance:0.4,
-		randomRotate:true,randomRotateTop:true,randomRotateBottom:true
+		randomRotate:true,randomRotateTop:true,randomRotateBottom:true,
+		grow:function(x,y,z,world,blockID){
+			// Spread nylium
+			if (!blockData[world.getBlock(x, y + 1, z, this.type)].transparent) {
+				world.setBlock(x, y, z, blockIds.netherrack, false,false,false,false, this.type)
+				return
+			}
+
+			let rnd2 = Math.random() * 27 | 0
+			let x2 = rnd2 % 3 - 1
+			rnd2 = (rnd2 - x2 - 1) / 3
+			let y2 = rnd2 % 3 - 1
+			rnd2 = (rnd2 - y2 - 1) / 3
+			z += rnd2 - 1
+			x += x2
+			y += y2
+
+			if (blockData[blockID].name === "netherrack" && world.getBlock(x, y + 1, z, this.type) === blockIds.air) {
+				world.setBlock(x, y, z, blockID, false,false,false,false, this.type)
+			}
+		}
 	},
 	{
 		name: "warpedNylium",
+		nameMcd:"warped_nylium",
 		Name:"Warped Nylium",
+		harvestToolsNames: "stone",
+		material: "mineable/pickaxe",
 		textures: ["netherrack", "warpedNyliumTop", "warpedNyliumSide"],
 		nyliumSound: true,
 		category:"nature",
 		hardness:0.4,
 		blastResistance:0.4,
-		randomRotate:true,randomRotateTop:true,randomRotateBottom:true
+		randomRotate:true,randomRotateTop:true,randomRotateBottom:true,
+		copyPropertiesHere:"crimsonNylium"
 	},
 	{
 		name: "crimsonStem",
+		nameMcd:"crimson_stem",
 		Name:"Crimson Stem",
+		blockStates: "paleOakWood",
+		material: "mineable/axe",
 		textures: ["crimsonStemTop", "crimsonStemSide"],
 		stemSound: true,
 		hardness:2,
@@ -2618,7 +3018,10 @@
 	},
 	{
 		name: "warpedStem",
+		nameMcd:"warped_stem",
 		Name:"Warped Stem",
+		blockStates: "paleOakWood",
+		material: "mineable/axe",
 		textures: ["warpedStemTop", "warpedStemSide"],
 		stemSound: true,
 		hardness:2,
@@ -2626,24 +3029,32 @@
 		type:"wood",
 		category:"nature"
 	},
-	{ name: "netherWartBlock",
-		Name:"Nether Wart Block",hardness:1,compostChance:0.85,category:"nature",
+	{ name: "netherWartBlock", nameMcd:"nether_wart_block",
+		Name:"Nether Wart Block",
+		blastResistance: 1,
+		material: "mineable/hoe",hardness:1,compostChance:0.85,category:"nature",
 		digSound: ["netherwart.dig1", "netherwart.dig2", "netherwart.dig3", "netherwart.dig4", "netherwart.dig5", "netherwart.dig6"],
 		stepSound: ["netherwart.step1", "netherwart.step2","netherwart.step3","netherwart.step4","netherwart.step5"],
 		randomRotate:true,randomRotateTop:true,randomRotateBottom:true,randomRotateNorth:true,randomRotateSouth:true,randomRotateEast:true,randomRotateWest:true
 	},
-	{ name: "warpedWartBlock",
-		Name:"Warped Wart Block",hardness:1,compostChance:0.85,category:"nature",
+	{ name: "warpedWartBlock", nameMcd:"warped_wart_block",
+		Name:"Warped Wart Block",
+		blastResistance: 1,
+		material: "mineable/hoe",hardness:1,compostChance:0.85,category:"nature",
 		digSound: ["netherwart.dig1", "netherwart.dig2", "netherwart.dig3", "netherwart.dig4", "netherwart.dig5", "netherwart.dig6"],
 		stepSound: ["netherwart.step1", "netherwart.step2","netherwart.step3","netherwart.step4","netherwart.step5"],
 		randomRotate:true,randomRotateTop:true,randomRotateBottom:true,randomRotateNorth:true,randomRotateSouth:true,randomRotateEast:true,randomRotateWest:true
 	},
-	{ name: "shroomlight", lightLevel:15,Name:"Shroomlight",hardness:1,compostChance:0.65,category:"nature",
+	{ name: "shroomlight", lightLevel:15,Name:"Shroomlight",
+		blastResistance: 1,
+		material: "mineable/hoe",hardness:1,compostChance:0.65,category:"nature",
 		digSound: ["shroomlight.dig1", "shroomlight.dig2", "shroomlight.dig3", "shroomlight.dig4", "shroomlight.dig5"],
 		stepSound: ["shroomlight.step1", "shroomlight.step2","shroomlight.step3","shroomlight.step4","shroomlight.step5","shroomlight.step6"]},
 	{ 
 		name: "warpedFungus",
+		nameMcd:"warped_fungus",
 		Name:"Warped Fungus",
+		material: "plant;mineable/axe",
 		solid: false,
 		shadow: false,
 		transparent: true,
@@ -2662,18 +3073,25 @@
 	{
 		name: "blackstone",
 		Name:"Blackstone",
+		harvestToolsNames: "stone",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
 		textures: ["blackstoneTop", "blackstone" ],
 		stoneSound: true,
 		category:"nature",
 		randomRotate:true,randomRotateTop:true,randomRotateBottom:true,
 		craftSlabs:true, craftStairs:true,
 	},
-	{ name: "gildedBlackstone", Name:"Gilded Blackstone", category:"nature",stoneSound: true, randomRotate:true,randomRotateTop:true,randomRotateBottom:true,randomRotateNorth:true,randomRotateSouth:true,randomRotateEast:true,randomRotateWest:true},
-	{ name: "polishedBlackstoneBricks", Name:"Polished Blackstone Bricks", category:"build",stoneSound: true, craftSlabs:true, craftStairs:true},
-	{ name: "chiseledPolishedBlackstone", Name:"Chiseled Polished Blackstone", category:"build",stoneSound: true},
+	{ name: "gildedBlackstone", nameMcd:"gilded_blackstone", Name:"Gilded Blackstone", harvestToolsNames: "stone", hardness: 1.5, blastResistance: 6, material: "mineable/pickaxe", category:"nature",stoneSound: true, randomRotate:true,randomRotateTop:true,randomRotateBottom:true,randomRotateNorth:true,randomRotateSouth:true,randomRotateEast:true,randomRotateWest:true},
+	{ name: "polishedBlackstoneBricks", nameMcd:"polished_blackstone_bricks", Name:"Polished Blackstone Bricks", harvestToolsNames: "stone", hardness: 1.5, blastResistance: 6, material: "mineable/pickaxe", category:"build",stoneSound: true, craftSlabs:true, craftStairs:true},
+	{ name: "chiseledPolishedBlackstone", nameMcd:"chiseled_polished_blackstone", Name:"Chiseled Polished Blackstone", harvestToolsNames: "stone", hardness: 1.5, blastResistance: 6, material: "mineable/pickaxe", category:"build",stoneSound: true},
 	{
 		name: "netheriteBlock",
+		nameMcd:"netherite_block",
 		Name:"Netherite Block",
+		harvestToolsNames: "obsidian",
+		material: "incorrect_for_wooden_tool",
 		type:"rock4",
 		category:"build",
 		hardness:50,
@@ -2684,6 +3102,10 @@
 	{
 		name: "basalt",
 		Name: "Basalt",
+		harvestToolsNames: "stone",
+		blockStates: "paleOakWood",
+		blastResistance: 4.2,
+		material: "mineable/pickaxe",
 		category:"nature",
 		textures: [ "basaltTop", "basaltSide" ],
 		basaltSound: true,
@@ -2691,24 +3113,41 @@
 	},
 	{
 		name: "polishedBasalt",
+		nameMcd:"polished_basalt",
 		Name: "Polished Basalt",
+		harvestToolsNames: "stone",
+		blockStates: "paleOakWood",
+		blastResistance: 4.2,
+		material: "mineable/pickaxe",
 		category:"build",
 		textures: [ "polishedBasaltTop", "polishedBasaltSide" ],
 		basaltSound: true,
 		hardness:1.25
 	},
-	{ name: "chain", Name:"Chain", category:"build",transparent:true, shadow:false, chain:true, iconTexture:"chainIcon",
+	{ name: "chain", Name:"Chain",
+		harvestToolsNames: "stone",
+		blockStates: [{"name":"axis","values":["x","y","z"]},{"name":"waterlogged","values":[false,true]}],
+		hardness: 5,
+		blastResistance: 6,
+		material: "mineable/pickaxe", category:"build",transparent:true, shadow:false, chain:true, iconTexture:"chainIcon",
+		copyPropertiesHere:"oakLog",
 		digSound: ["chain.dig1", "chain.dig2", "chain.dig3", "chain.dig4"],
 		stepSound: ["chain.step1", "chain.step2","chain.step3","chain.step4","chain.step5","chain.step6"]},
-	{ name: "warpedPlanks", Name:"Warped Planks", hardness:2, type:"wood",category:"build", woodSound:true, craftSlabs:true, craftStairs:true},
+	{ name: "warpedPlanks", nameMcd:"warped_planks", Name:"Warped Planks", blastResistance: 3, material: "mineable/axe", hardness:2, type:"wood",category:"build", woodSound:true, craftSlabs:true, craftStairs:true},
 	{ 
 		name: "warpedTrapdoor",
+		nameMcd:"warped_trapdoor",
 		Name: "Warped Trapdoor",
+		blockStates: "oakTrapdoor",
+		hardness: 3,
+		blastResistance: 3,
+		material: "mineable/axe",
 		transparent: true,
 		shadow: false,
 		trapdoor: true,
 		woodSound:true,
-		category:"build"
+		category:"build",
+		copyPropertiesHere:"oakTrapdoor"
 	},
 	{
 		name: "magma", Name:"Magma Block", lightLevel:15,hardness:0.5, type:"rock1",
@@ -2720,7 +3159,9 @@
 	},
 	{
 		name: "crimsonFungus",
+		nameMcd:"crimson_fungus",
 		Name: "Crimson Fungus",
+		material: "plant;mineable/axe",
 		solid: false,
 		shadow: false,
 		transparent: true,
@@ -2738,7 +3179,9 @@
 	},
 	{ 
 		name: "warpedRoots",
+		nameMcd:"warped_roots",
 		Name: "Warped Roots",
+		material: "plant",
 		transparent: true,
 		solid: false,
 		shadow: false,
@@ -2752,7 +3195,9 @@
 	},
 	{ 
 		name: "crimsonRoots",
+		nameMcd:"crimson_roots",
 		Name: "Crimson Roots",
+		material: "plant",
 		transparent: true,
 		solid: false,
 		shadow: false,
@@ -2766,6 +3211,10 @@
 	},
 	{ 
 		name: "twistingVines",
+		nameMcd:"twisting_vines",
+		category: "nature",
+		blockStates: "kelp",
+		material: "plant;mineable/axe",
 		transparent: true,
 		solid: false,
 		shadow: false,
@@ -2776,7 +3225,12 @@
 			var top = world.getBlock(x,y+1,z)
 			var isIt = blockData[top].name === "twistingVines" || blockData[top].name === "twistingVinesPlant"
 			if(isIt){
-				world.setBlock(x,y,z,blockIds.twistingVinesPlant | CROSS,false,false,false,false)
+				world.setBlock(x,y,z,blockIds.twistingVinesPlant,false,false,false,false)
+			}
+		},
+		grow:function(x,y,z,world,blockID){
+			if(!world.getBlock(x,y+1,z)){
+				world.setBlock(x,y+1,z,blockID)
 			}
 		},
 		hidden:true,
@@ -2784,7 +3238,9 @@
 	},
 	{
 		name: "twistingVinesPlant",
+		nameMcd:"twisting_vines_plant",
 		Name: "Twisting Vines",
+		material: "plant;mineable/axe",
 		transparent: true,
 		solid: false,
 		shadow: false,
@@ -2795,13 +3251,17 @@
 			var top = world.getBlock(x,y+1,z)
 			var isIt = blockData[top].name === "twistingVines" || blockData[top].name === "twistingVinesPlant"
 			if(!isIt){
-				world.setBlock(x,y,z,blockIds.twistingVines | CROSS,false,false,false,false)
+				world.setBlock(x,y,z,blockIds.twistingVines,false,false,false,false)
 			}
 		},
 		category:"nature",
 	},
 	{
 		name: "weepingVines",
+		nameMcd:"weeping_vines",
+		category: "nature",
+		blockStates: "kelp",
+		material: "plant;mineable/axe",
 		transparent: true,
 		solid: false,
 		shadow: false,
@@ -2811,7 +3271,12 @@
 			var top = world.getBlock(x,y-1,z)
 			var isIt = blockData[top].name === "weepingVines" || blockData[top].name === "weepingVinesPlant"
 			if(isIt){
-				world.setBlock(x,y,z,blockIds.weepingVinesPlant | CROSS,false,false,false,false)
+				world.setBlock(x,y,z,blockIds.weepingVinesPlant,false,false,false,false)
+			}
+		},
+		grow:function(x,y,z,world,blockID){
+			if(!world.getBlock(x,y-1,z)){
+				world.setBlock(x,y-1,z,blockID)
 			}
 		},
 		hidden:true,
@@ -2819,24 +3284,26 @@
 	},
 	{
 		name: "weepingVinesPlant",
+		nameMcd:"weeping_vines_plant",
 		Name:"Weeping Vines",
+		material: "plant;mineable/axe",
 		transparent: true,
 		solid: false,
 		shadow: false,
 		crossShape: true,
 		ladder:true,
-		onupdate:function(x,y,z,b,world,sx,sy,sz){
-			var top = world.getBlock(x,y-1,z)
-			var isIt = blockData[top].name === "weepingVines" || blockData[top].name === "weepingVinesPlant"
-			if(!isIt){
-				world.setBlock(x,y,z,blockIds.weepingVines | CROSS,false,false,false,false)
+		grow:function(x,y,z,world,blockID){
+			if(!world.getBlock(x,y-1,z)){
+				world.setBlock(x,y-1,z,blockID)
 			}
 		},
 		category:"nature"
 	},
 	{ 
 		name: "netherSprouts",
+		nameMcd:"nether_sprouts",
 		Name: "Nether Sprouts",
+		material: "plant",
 		solid: false,
 		shadow: false,
 		transparent: true,
@@ -2848,10 +3315,16 @@
 		randomOffset:true,
 	},
 	
-	{ name: "stoneButton", Name:"Stone Button", textures:"stone", category:"redstone",button:true, transparent: true, shadow:false, stone:true },
+	{ name: "stoneButton", nameMcd:"stone_button", Name:"Stone Button", blockStates: "lever", solid: false, hardness: 0.5, blastResistance: 0.5, material: "mineable/pickaxe", textures:"stone", category:"redstone",button:true, transparent: true, shadow:false, stone:true },
 	
 	{ 
-		name: "RespawnAnchorOff",
+		name: "RespawnAnchor",
+		nameMcd:"respawn_anchor",
+		harvestToolsNames: "obsidian",
+		blockStates: [{"name":"charges","values":["0","1","2","3","4"]}],
+		hardness: 50,
+		blastResistance: 1200,
+		material: "incorrect_for_wooden_tool",
 		category:"items",
 		textures: ["respawnAnchorBottom", "respawnAnchorTopOff", "respawnAnchorSide0"],
 		//onupdate: (x,y,z) => {if(world.type !== "nether"){explode(x,y,z,2)}}
@@ -2872,25 +3345,64 @@
 		hidden: true
 	},
 	{ 
-		name: "RespawnAnchor",
+		name: "RespawnAnchor?",
 		textures: ["respawnAnchorBottom", "respawnAnchorTop", "respawnAnchorSide4"],
 		hidden: true
 	},
 	
 	{
 		name:"redBed",
+		nameMcd:"red_bed",
 		Name:"Red Bed",
+		blockStates: "whiteBed",
+		hardness: 0.2,
+		blastResistance: 0.2,
+		stackSize: 1,
 		textures: "redBed",
 		iconTexture: "redBedIcon",
 		flatIcon: true,
 		transparent: true,
 		bed: true,
 		bounciness: 0.6,
-		category:"items"
+		category:"items",
+		onclick: function(x,y,z,world,p){
+			if(p.dimension !== "") return world.explode(x,y,z,5,false)
+			p.spawnPoint.x = x
+			p.spawnPoint.y = y+1
+			p.spawnPoint.z = z
+			p.connection.send({type:"message",data:"Respawn point set",fromServer:true})
+			if(world.world.skyLight < 0.5){
+				let block = world.getBlock(x,y,z)
+				y += 0.25
+				p.rx = Math.PI2
+				switch(block & ROTATION){
+					case NORTH:
+						z += 0.5
+						p.ry = Math.PI
+						break
+					case SOUTH:
+						z -= 0.5
+						p.ry = 0
+						break
+					case EAST:
+						x += 0.5
+						p.ry = Math.PI2
+						break
+					case WEST:
+						x -= 0.5
+						p.ry = -Math.PI2
+						break
+				}
+				p.setRot(p.rx,p.ry,p.ry,true)
+				p.tp(x,y,z)
+				p.connection.send({type:"sleep"})
+			}else p.connection.send({type:"message",data:"Too bright to sleep",fromServer:true})
+		}
 	},
 	
 	{
 		name: "flintAndSteel",
+		nameMcd:"flint_and_steel",
 		Name:"Flint & Steel",
 		textures: "flintAndSteel",
 		item: true,
@@ -2898,7 +3410,7 @@
 			if(block === blockIds.tnt){
 				blockData[blockIds.tnt].explode(x,y,z,null,world)
 				item.durability--
-			}else if(block === (blockIds.tnt | SLAB)){
+			}else if(block === (blockIds.tnt | SLAB)){//todo n
 				blockData[blockIds.tnt].superTntExplode(x,y,z,world)
 				item.durability--
 			}else if(block === (blockIds.tnt | STAIR)){
@@ -2913,11 +3425,11 @@
 				if(attached && blockData[attached].canHaveSoulFire) b = blockIds.soulFire
 				;([x,y,z] = movePositionByFace(face,x,y,z))
 				switch(face){
-					case "bottom": b |= STAIR; break
-					case "north": b |= SLAB | SOUTH; break
-					case "south": b |= SLAB | NORTH; break
-					case "east": b |= SLAB | WEST; break
-					case "west": b |= SLAB | EAST; break
+					case "top": b += blockStateMaps[b].up.true; break
+					case "north": b += blockStateMaps[b].north.true; break
+					case "south": b += blockStateMaps[b].south.true; break
+					case "east": b += blockStateMaps[b].east.true; break
+					case "west": b += blockStateMaps[b].west.true; break
 				}
 				item.durability--
 				if(block === blockIds.obsidian && blockData[blockIds.fire].tryCreatePortal(x,y,z,world)) return
@@ -2933,6 +3445,8 @@
 	{
 		name: "barrier",
 		Name:"That Invisible Block with a 🚫 Icon",
+		blockStates: "mangroveRoots",
+		blastResistance: 3600000.8,
 		textures: "none",
 		iconTexture: "barrier",
 		flatIcon:true,
@@ -2945,7 +3459,10 @@
 	},
 	{
 		name: "oakSapling",
+		nameMcd:"oak_sapling",
 		Name:"Oak Sapling",
+		blockStates: [{"name":"stage","values":["0","1"]}],
+		material: "plant;mineable/axe",
 		crossShape: true,
 		potCross: true,
 		transparent: true,
@@ -2963,72 +3480,138 @@
 	
 	{ 
 		name: "crimsonTrapdoor",
+		nameMcd:"crimson_trapdoor",
 		Name:"Crimson Trapdoor",
+		blockStates: "oakTrapdoor",
+		hardness: 3,
+		blastResistance: 3,
+		material: "mineable/axe",
 		transparent: true,
 		trapdoor: true,
 		woodSound: true,
-		category:"build"
+		category:"build",
+		copyPropertiesHere:"oakTrapdoor"
 	},
 	{ 
 		name: "oakTrapdoor",
+		nameMcd:"oak_trapdoor",
 		Name:"Oak Trapdoor",
+		blockStates: [{"name":"facing","values":["north","south","west","east"]},{"name":"half","values":["top","bottom"]},{"name":"open","values":[false,true]},{"name":"powered","values":[false,true]},{"name":"waterlogged","values":[false,true]}],
+		hardness: 3,
+		blastResistance: 3,
+		material: "mineable/axe",
 		transparent: true,
 		trapdoor: true,
 		woodSound: true,
-		category:"build"
+		category:"build",
+		onclick: function(x,y,z,world){
+			let block = world.getBlock(x,y,z)
+			world.setBlock(x,y,z, setBlockState(block,this.blockStatesMap.open, !getBlockState(block,this.blockStatesMap.open)))
+			doorSound(x,y,z,this.name === "ironTrapdoor"?"iron_trapdoor":"wooden_trapdoor",true,world)
+		},
+		onpowerupdate: function(x,y,z,sx,sy,sz,blockPowerChanged,world){
+			var power = world.getRedstonePower(x,y,z) || world.getSurroundingBlockPower(x,y,z) ? true : false
+			let block = world.getBlock(x,y,z)
+			var open = getBlockState(block,this.blockStatesMap.open)
+			if(power !== open){
+				world.setBlock(x,y,z, setBlockState(block,this.blockStatesMap.open, !open))
+				doorSound(x,y,z,this.name === "ironTrapdoor"?"iron_trapdoor":"wooden_trapdoor",true,world)
+			}
+		}
 	},
 	{ 
 		name: "spruceTrapdoor",
+		nameMcd:"spruce_trapdoor",
 		Name:"Spruce Trapdoor",
+		blockStates: "oakTrapdoor",
+		hardness: 3,
+		blastResistance: 3,
+		material: "mineable/axe",
 		transparent: true,
 		trapdoor: true,
 		woodSound: true,
-		category:"build"
+		category:"build",
+		copyPropertiesHere:"oakTrapdoor"
 	},
 	{ 
 		name: "darkOakTrapdoor",
+		nameMcd:"dark_oak_trapdoor",
 		Name:"Dark Oak Trapdoor",
+		blockStates: "oakTrapdoor",
+		hardness: 3,
+		blastResistance: 3,
+		material: "mineable/axe",
 		transparent: true,
 		trapdoor: true,
 		woodSound: true,
-		category:"build"
+		category:"build",
+		copyPropertiesHere:"oakTrapdoor"
 	},
 	{ 
 		name: "birchTrapdoor",
+		nameMcd:"birch_trapdoor",
 		Name:"Birck Trapdoor",
+		blockStates: "oakTrapdoor",
+		hardness: 3,
+		blastResistance: 3,
+		material: "mineable/axe",
 		transparent: true,
 		trapdoor: true,
 		woodSound: true,
-		category:"build"
+		category:"build",
+		copyPropertiesHere:"oakTrapdoor"
 	},
 	{ 
 		name: "jungleTrapdoor",
+		nameMcd:"jungle_trapdoor",
 		Name:"Jungle Trapdoor",
+		blockStates: "oakTrapdoor",
+		hardness: 3,
+		blastResistance: 3,
+		material: "mineable/axe",
 		transparent: true,
 		trapdoor: true,
 		woodSound: true,
-		category:"build"
+		category:"build",
+		copyPropertiesHere:"oakTrapdoor"
 	},
 	{ 
 		name: "acaciaTrapdoor",
+		nameMcd:"acacia_trapdoor",
 		Name:"Acaica Trapdoor",
+		blockStates: "oakTrapdoor",
+		hardness: 3,
+		blastResistance: 3,
+		material: "mineable/axe",
 		transparent: true,
 		trapdoor: true,
 		woodSound: true,
-		category:"build"
+		category:"build",
+		copyPropertiesHere:"oakTrapdoor"
 	},
 	{ 
 		name: "ironTrapdoor",
+		nameMcd:"iron_trapdoor",
 		Name:"Iron Trapdoor",
+		harvestToolsNames: "stone",
+		blockStates: "oakTrapdoor",
+		hardness: 5,
+		blastResistance: 5,
+		material: "mineable/pickaxe",
 		transparent: true,
 		trapdoor: true,
 		stoneSound: true,
-		category:"build"
+		category:"build",
+		copyPropertiesHere:"oakTrapdoor",
+		onclick:null
 	},
 	
 	{ 
 		name: "cryingObsidian",
+		nameMcd:"crying_obsidian",
 		Name:"Obsidian: 😢",
+		harvestToolsNames: "obsidian",
+		material: "incorrect_for_wooden_tool",
 		shadow: false,
 		lightLevel: 10,
 		stoneSound:true,
@@ -3041,8 +3624,11 @@
 		category:"nature",
 		randomRotate:true,randomRotateTop:true,randomRotateBottom:true,randomRotateNorth:true,randomRotateSouth:true,randomRotateEast:true,randomRotateWest:true
 	},
-	{ name: "netherGoldOre",
+	{ name: "netherGoldOre", nameMcd:"nether_gold_ore",
 		Name:"Nether Gold Ore",
+		harvestToolsNames: "stone",
+		blastResistance: 3,
+		material: "mineable/pickaxe",
 		digSound: ["nether_ore.dig1", "nether_ore.dig2", "nether_ore.dig3", "nether_ore.dig4"],
 		stepSound: ["nether_ore.step1", "nether_ore.step2","nether_ore.step3","nether_ore.step4","nether_ore.step5"],
 		drop: "goldNugget",
@@ -3053,6 +3639,7 @@
 	},
 	{
 		name: "flowerPot",
+		nameMcd:"flower_pot",
 		Name:"Flower Pot",
 		transparent: true,
 		shadow: false,
@@ -3060,11 +3647,21 @@
 		iconTexture:"flowerPotIcon",
 		flatIcon:true,
 		category:"decoration",
-		liquidBreakable:"drop"
+		liquidBreakable:"drop",
+		onclick:function(x,y,z,world,p,holdObj){
+			if(!holdObj) return true
+			let name = blockData[holdObj.id].name
+			name = "potted" + name[0].toUpperCase() + name.substring(1)
+			if(blockIds[name]) world.setBlock(x,y,z,blockIds[name])
+			else return true
+		}
 	},
 	{
 		name: "acaciaSapling",
+		nameMcd:"acacia_sapling",
 		Name:"Acacia Sapling",
+		blockStates: "oakSapling",
+		material: "plant;mineable/axe",
 		transparent: true,
 		shadow: false,
 		solid: false,
@@ -3081,7 +3678,10 @@
 	},
 	{
 		name: "birchSapling",
+		nameMcd:"birch_sapling",
 		Name:"Birch Sapling",
+		blockStates: "oakSapling",
+		material: "plant;mineable/axe",
 		transparent: true,
 		shadow: false,
 		solid: false,
@@ -3098,7 +3698,10 @@
 	},
 	{
 		name: "darkOakSapling",
+		nameMcd:"dark_oak_sapling",
 		Name:"Dark Oak Sapling",
+		blockStates: "oakSapling",
+		material: "plant;mineable/axe",
 		transparent: true,
 		shadow: false,
 		solid: false,
@@ -3110,7 +3713,10 @@
 	},
 	{
 		name: "jungleSapling",
+		nameMcd:"jungle_sapling",
 		Name:"Jungle Sapling",
+		blockStates: "oakSapling",
+		material: "plant;mineable/axe",
 		transparent: true,
 		shadow: false,
 		solid: false,
@@ -3127,7 +3733,10 @@
 	},
 	{
 		name: "spruceSapling",
+		nameMcd:"spruce_sapling",
 		Name:"Spruce Sapling",
+		blockStates: "oakSapling",
+		material: "plant;mineable/axe",
 		transparent: true,
 		shadow: false,
 		solid: false,
@@ -3172,39 +3781,47 @@
 		hidden:true,
 		drop:"crimsonRoots",
 		liquidBreakable:"drop"
-	},
-	{ name: "whiteCarpet", Name: "White Carpet", textures: "whiteWool", category:"decoration",carpet: true, clothSound:true, type:"wool"},
-	{ name: "orangeCarpet", Name: "Orange Carpet", textures: "orangeWool", category:"decoration",carpet: true, clothSound:true, type:"wool"},
-	{ name: "magentaCarpet", Name: "Magenta Carpet", textures: "magentaWool", category:"decoration",carpet: true, clothSound:true, type:"wool"},
-	{ name: "lightBlueCarpet", Name: "Light Blue Carpet", textures: "lightBlueWool", category:"decoration",carpet: true, clothSound:true, type:"wool"},
-	{ name: "yellowCarpet", Name: "Yellow Carpet", textures: "yellowWool", category:"decoration",carpet: true, clothSound:true, type:"wool"},
-	{ name: "limeCarpet", Name: "Lime Carpet", textures: "limeWool", category:"decoration",carpet: true, clothSound:true, type:"wool"},
-	{ name: "pinkCarpet", Name: "Pink Carpet", textures: "pinkWool", category:"decoration",carpet: true, clothSound:true, type:"wool"},
-	{ name: "grayCarpet", Name: "Gray Carpet", textures: "grayWool", category:"decoration",carpet: true, clothSound:true, type:"wool"},
-	{ name: "lightGrayCarpet", Name: "Light Gray Carpet", textures: "lightGrayWool", category:"decoration",carpet: true, clothSound:true, type:"wool"},
-	{ name: "cyanCarpet", Name: "Cyan Carpet", textures: "cyanWool", category:"decoration",carpet: true, clothSound:true, type:"wool"},
-	{ name: "purpleCarpet", Name: "Purple Carpet", textures: "purpleWool", category:"decoration",carpet: true, clothSound:true, type:"wool"},
-	{ name: "blueCarpet", Name: "Blue Carpet", textures: "blueWool", category:"decoration",carpet: true, clothSound:true, type:"wool"},
-	{ name: "brownCarpet", Name: "Brown Carpet", textures: "brownWool", category:"decoration",carpet: true, clothSound:true, type:"wool"},
-	{ name: "greenCarpet", Name: "Green Carpet", textures: "greenWool", category:"decoration",carpet: true, clothSound:true, type:"wool"},
-	{ name: "redCarpet", Name: "Red Carpet", textures: "redWool", category:"decoration",carpet: true, clothSound:true, type:"wool"},
-	{ name: "blackCarpet", Name: "Black Carpet", textures: "blackWool", category:"decoration",carpet: true, clothSound:true, type:"wool"},
+	},//todo n: wall carpet
+	{ name: "whiteCarpet", nameMcd:"white_carpet", Name: "White Carpet", hardness: 0.1, blastResistance: 0.1, textures: "whiteWool", category:"decoration",carpet: true, clothSound:true, type:"wool"},
+	{ name: "orangeCarpet", nameMcd:"orange_carpet", Name: "Orange Carpet", hardness: 0.1, blastResistance: 0.1, textures: "orangeWool", category:"decoration",carpet: true, clothSound:true, type:"wool"},
+	{ name: "magentaCarpet", nameMcd:"magenta_carpet", Name: "Magenta Carpet", hardness: 0.1, blastResistance: 0.1, textures: "magentaWool", category:"decoration",carpet: true, clothSound:true, type:"wool"},
+	{ name: "lightBlueCarpet", nameMcd:"light_blue_carpet", Name: "Light Blue Carpet", hardness: 0.1, blastResistance: 0.1, textures: "lightBlueWool", category:"decoration",carpet: true, clothSound:true, type:"wool"},
+	{ name: "yellowCarpet", nameMcd:"yellow_carpet", Name: "Yellow Carpet", hardness: 0.1, blastResistance: 0.1, textures: "yellowWool", category:"decoration",carpet: true, clothSound:true, type:"wool"},
+	{ name: "limeCarpet", nameMcd:"lime_carpet", Name: "Lime Carpet", hardness: 0.1, blastResistance: 0.1, textures: "limeWool", category:"decoration",carpet: true, clothSound:true, type:"wool"},
+	{ name: "pinkCarpet", nameMcd:"pink_carpet", Name: "Pink Carpet", hardness: 0.1, blastResistance: 0.1, textures: "pinkWool", category:"decoration",carpet: true, clothSound:true, type:"wool"},
+	{ name: "grayCarpet", nameMcd:"gray_carpet", Name: "Gray Carpet", hardness: 0.1, blastResistance: 0.1, textures: "grayWool", category:"decoration",carpet: true, clothSound:true, type:"wool"},
+	{ name: "lightGrayCarpet", nameMcd:"light_gray_carpet", Name: "Light Gray Carpet", hardness: 0.1, blastResistance: 0.1, textures: "lightGrayWool", category:"decoration",carpet: true, clothSound:true, type:"wool"},
+	{ name: "cyanCarpet", nameMcd:"cyan_carpet", Name: "Cyan Carpet", hardness: 0.1, blastResistance: 0.1, textures: "cyanWool", category:"decoration",carpet: true, clothSound:true, type:"wool"},
+	{ name: "purpleCarpet", nameMcd:"purple_carpet", Name: "Purple Carpet", hardness: 0.1, blastResistance: 0.1, textures: "purpleWool", category:"decoration",carpet: true, clothSound:true, type:"wool"},
+	{ name: "blueCarpet", nameMcd:"blue_carpet", Name: "Blue Carpet", hardness: 0.1, blastResistance: 0.1, textures: "blueWool", category:"decoration",carpet: true, clothSound:true, type:"wool"},
+	{ name: "brownCarpet", nameMcd:"brown_carpet", Name: "Brown Carpet", hardness: 0.1, blastResistance: 0.1, textures: "brownWool", category:"decoration",carpet: true, clothSound:true, type:"wool"},
+	{ name: "greenCarpet", nameMcd:"green_carpet", Name: "Green Carpet", hardness: 0.1, blastResistance: 0.1, textures: "greenWool", category:"decoration",carpet: true, clothSound:true, type:"wool"},
+	{ name: "redCarpet", nameMcd:"red_carpet", Name: "Red Carpet", hardness: 0.1, blastResistance: 0.1, textures: "redWool", category:"decoration",carpet: true, clothSound:true, type:"wool"},
+	{ name: "blackCarpet", nameMcd:"black_carpet", Name: "Black Carpet", hardness: 0.1, blastResistance: 0.1, textures: "blackWool", category:"decoration",carpet: true, clothSound:true, type:"wool"},
 	
-	{ name: "polishedBlackstone", Name: "Polished Blackstone", category:"build",stoneSound:true, craftSlabs:true, craftStairs:true},
-	{ name: "chiseledNetherBricks",
+	{ name: "polishedBlackstone", nameMcd:"polished_blackstone", Name: "Polished Blackstone", harvestToolsNames: "stone", hardness: 2, blastResistance: 6, material: "mineable/pickaxe", category:"build",stoneSound:true, craftSlabs:true, craftStairs:true},
+	{ name: "chiseledNetherBricks", nameMcd:"chiseled_nether_bricks",
 		Name: "Chiseled Nether Bricks",
+		harvestToolsNames: "stone",
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
 		category:"build",
 		digSound: ["nether_bricks.dig1", "nether_bricks.dig2", "nether_bricks.dig3", "nether_bricks.dig4", "nether_bricks.dig5", "nether_bricks.dig6"],
 		stepSound: ["nether_bricks.step1", "nether_bricks.step2","nether_bricks.step3","nether_bricks.step4","nether_bricks.step5","nether_bricks.step6"]},
-	{ name: "crackedNetherBricks",
+	{ name: "crackedNetherBricks", nameMcd:"cracked_nether_bricks",
 		Name:"Cracked Nether Bricks",
+		harvestToolsNames: "stone",
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
 		category:"build",
 		digSound: ["nether_bricks.dig1", "nether_bricks.dig2", "nether_bricks.dig3", "nether_bricks.dig4", "nether_bricks.dig5", "nether_bricks.dig6"],
 		stepSound: ["nether_bricks.step1", "nether_bricks.step2","nether_bricks.step3","nether_bricks.step4","nether_bricks.step5","nether_bricks.step6"]},
-	{ name: "smoothBasalt", Name: "Smooth Basalt", basaltSound: true},
+	{ name: "smoothBasalt", nameMcd:"smooth_basalt", Name: "Smooth Basalt", category: "build", harvestToolsNames: "stone", hardness: 1.25, blastResistance: 4.2, material: "mineable/pickaxe", basaltSound: true},
 	
 	{
-		name: "oakLogSW",
+		name: "oakLogSW",//todo n: maybe convert
 		textures: ["logSide","logSide","logTop","logSide"],
 		SW: true, woodSound:true, hidden:true
 	},
@@ -3253,10 +3870,12 @@
 		textures: ["polishedBasaltSide","polishedBasaltSide","polishedBasaltTop","polishedBasaltSide"],
 		SW: true, basaltSound: true, hidden:true
 	},
-	{ name:"crimsonPlanks", Name: "Crimson Planks", woodSound:true, hardness:2, type:"wood",category:"build", craftSlabs:true, craftStairs:true },
+	{ name:"crimsonPlanks", nameMcd:"crimson_planks", Name: "Crimson Planks", blastResistance: 3, material: "mineable/axe", woodSound:true, hardness:2, type:"wood",category:"build", craftSlabs:true, craftStairs:true },
 	{
 		name:"deadBush",
+		nameMcd:"dead_bush",
 		Name:"Dead Bush",
+		material: "plant;mineable/axe",
 		solid: false,
 		transparent: true,
 		shadow: false,
@@ -3272,20 +3891,23 @@
 	},
 	{ name:"stick", Name:"Stick", category:"items",item:true },
 	{ name:"coal", Name:"Coal", category:"items",item:true },
-	{ name:"ironIngot", Name:"Iron Ingot", category:"items",item:true },
-	{ name:"copperIngot", Name:"Copper Ingot", category:"items",item:true },
-	{ name:"goldIngot", Name:"Gold Ingot", category:"items",item:true },
+	{ name:"ironIngot", nameMcd:"iron_ingot", Name:"Iron Ingot", category:"items",item:true },
+	{ name:"copperIngot", nameMcd:"copper_ingot", Name:"Copper Ingot", category:"items",item:true },
+	{ name:"goldIngot", nameMcd:"gold_ingot", Name:"Gold Ingot", category:"items",item:true },
 	{ name:"diamond", Name:"Diamond", category:"items",item:true },
-	{ name:"lapisLazuli", Name:"Lapis Lazuli", category:"items",item:true },
+	{ name:"lapisLazuli", nameMcd:"lapis_lazuli", Name:"Lapis Lazuli", category:"items",item:true },
 	{ name:"emerald", Name:"Emerald", category:"items",item:true },
-	{ name:"copperOre", Name:"Copper Ore", hardness:3, drop:"rawCopper", dropAmount:[2,5], type:"rock2",category:"nature", stoneSound:true },
-	{ name:"rawIron", Name:"Raw Iron", category:"items",item:true },
-	{ name:"rawCopper", Name:"Raw Copper", category:"items",item:true },
-	{ name:"rawGold", Name:"Raw Gold", category:"items",item:true },
+	{ name:"copperOre", nameMcd:"copper_ore", Name:"Copper Ore", harvestToolsNames: "ironOre", blastResistance: 3, material: "incorrect_for_wooden_tool", hardness:3, drop:"rawCopper", dropAmount:[2,5], type:"rock2",category:"nature", stoneSound:true },
+	{ name:"rawIron", nameMcd:"raw_iron", Name:"Raw Iron", category:"items",item:true },
+	{ name:"rawCopper", nameMcd:"raw_copper", Name:"Raw Copper", category:"items",item:true },
+	{ name:"rawGold", nameMcd:"raw_gold", Name:"Raw Gold", category:"items",item:true },
 	
 	{
 		name: "netherWart",
+		nameMcd:"nether_wart",
 		Name:"Nether Wart",
+		blockStates: [{"name":"age","values":["0","1","2","3"]}],
+		material: "plant;mineable/axe",
 		transparent: true,
 		shadow: false,
 		solid: false,
@@ -3298,6 +3920,8 @@
 	{
 		name: "wheat",
 		Name:"Wheat",
+		blockStates: [{"name":"age","values":["0","1","2","3","4","5","6","7"]}],
+		material: "plant;mineable/axe",
 		transparent: true,
 		shadow: false,
 		solid: false,
@@ -3318,17 +3942,34 @@
 		compostChance:0.65,
 		category:"nature",
 		growBonemeal:function(x,y,z,world){
-			world.setBlock(x,y,z, this.id|LANTERN)
+			world.setBlock(x,y,z, this.id+this.blockStatesMap.age[7])
+		},
+		growSlow:function(x,y,z,world,block){
+			let age = +getBlockState(block,this.blockStatesMap.age)
+			if(age !== 4) world.setBlock(x,y,z,setBlockState(block,this.blockStatesMap.age,(age+1)+""))
+		},
+		drop:function(block){
+			return +getBlockState(block, this.blockStatesMap.age) === 7 ? ["wheat","wheatSeeds"] : "wheat"
 		}
 	},
 	{
 		name: "lodestone",
 		Name:"Lodestone",
+		category: "build",
+		harvestToolsNames: "stone",
+		hardness: 3.5,
+		blastResistance: 3.5,
+		material: "mineable/pickaxe",
 		textures: ["lodestoneTop", "lodestoneSide"]
 	},
 	{
 		name: "anvil",
 		Name:"Anvil",
+		harvestToolsNames: "stone",
+		blockStates: "wallTorch",
+		hardness: 5,
+		blastResistance: 1200,
+		material: "mineable/pickaxe",
 		transparent: true,
 		anvil: true,
 		digSound: "anvil.land",
@@ -3348,7 +3989,9 @@
 	
 	{
 		name: "slimeBlock",
+		nameMcd:"slime_block",
 		Name:"Slime Block",
+		decreaseLight: 1,
 		transparent: true,
 		shadow: false,
 		bounciness: 1,
@@ -3360,21 +4003,33 @@
 	},
 	{ 
 		name:"soulSoil",
+		nameMcd:"soul_soil",
 		Name:"Soul Soil",
+		hardness: 0.5,
+		blastResistance: 0.5,
+		material: "mineable/shovel",
 		speedFactor: 0.5,
 		canHaveSoulFire: true,
 		category:"nature",
 	},
-	{ name:"blueIce", Name:"Blue Ice", category:"nature",slide:0.9, glassSound: true, temperature:3},
-	{ name:"ice", Name:"Ice", category:"nature",transparent:true, shadow:false, slide:0.9, glassSound: true, temperature:3},
-	{ name:"packedIce", Name:"Packed Ice", category:"nature",slide:0.9, glassSound: true, temperature:3},
-	{ name:"calcite", Name:"Calcite", category:"nature" },
+	{ name:"blueIce", nameMcd:"blue_ice", Name:"Blue Ice", hardness: 2.8, blastResistance: 2.8, material: "mineable/pickaxe", category:"nature",slide:0.9, glassSound: true, temperature:3},
+	{ name:"ice", Name:"Ice", decreaseLight: 1, hardness: 0.5, blastResistance: 0.5, material: "mineable/pickaxe", category:"nature",transparent:true, shadow:false, slide:0.9, glassSound: true, temperature:3},
+	{ name:"packedIce", nameMcd:"packed_ice", Name:"Packed Ice", hardness: 0.5, blastResistance: 0.5, material: "mineable/pickaxe", category:"nature",slide:0.9, glassSound: true, temperature:3},
+	{ name:"calcite", Name:"Calcite", harvestToolsNames: "stone", hardness: 0.75, blastResistance: 0.75, material: "mineable/pickaxe", category:"nature" },
 	{
 		name:"furnace",
 		Name:"Furnace",
+		harvestToolsNames: "stone",
+		blockStates: [{"name":"facing","values":["north","south","west","east"]},{"name":"lit","values":[false,true]}],
+		hardness: 3.5,
+		blastResistance: 3.5,
+		material: "mineable/pickaxe",
 		textures: ["furnaceTop","furnaceTop","furnaceSide","furnaceFront","furnaceSide","furnaceSide"],
 		rotate: true,
 		tagBits: null,
+		init:function(){
+			blockData[this.id+this.blockStatesMap.lit.true].lightLevel = 13
+		},
 		hasContents:function(tags){return tags&&tags.furnace},
 		setContents: function(x,y,z,world){
 			var data = {furnace:true, input:0, fuel:0, output:0, smeltStart:0, burnStart:0, canBurn:false, smelting:false, xp:0}
@@ -3459,10 +4114,7 @@
 			}
 			
 			var block = world.getBlock(x,y,z)
-			var needs = blockIds.furnace | (block & ROTATION)
-			if(data.smelting){
-				needs |= SLAB
-			}
+			var needs = setBlockState(block,this.blockStatesMap.lit, !!data.smelting)
 			if(block !== needs){
 				world.setBlock(x,y,z, needs, false, false, false, true)//last argument is keepTags
 			}
@@ -3475,7 +4127,13 @@
 	},
 	{
 		name:"blastFurnace",
+		nameMcd:"blast_furnace",
 		Name:"Blast Furnace",
+		harvestToolsNames: "stone",
+		blockStates: "furnace",
+		hardness: 3.5,
+		blastResistance: 3.5,
+		material: "mineable/pickaxe",
 		textures: ["blastFurnaceTop","blastFurnaceTop","blastFurnaceSide","blastFurnaceFront","blastFurnaceSide","blastFurnaceSide"],
 		rotate: true,
 		category:"items",
@@ -3483,13 +4141,23 @@
 	{
 		name:"smoker",
 		Name:"Smoker",
+		harvestToolsNames: "stone",
+		blockStates: "furnace",
+		hardness: 3.5,
+		blastResistance: 3.5,
+		material: "mineable/pickaxe",
 		textures: ["smokerBottom","smokerTop","smokerSide","smokerFront","smokerSide","smokerSide"],
 		rotate: true,
 		category:"items",
 	},
 	{
 		name:"noteBlock",
+		nameMcd:"note_block",
 		Name:"Note Block",
+		blockStates: [{"name":"instrument","values":["harp","basedrum","snare","hat","bass","flute","bell","guitar","chime","xylophone","iron_xylophone","cow_bell","didgeridoo","bit","banjo","pling","zombie","skeleton","creeper","dragon","wither_skeleton","piglin","custom_head"]},{"name":"note","values":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"]},{"name":"powered","values":[false,true]}],
+		hardness: 0.8,
+		blastResistance: 0.8,
+		material: "mineable/axe",
 		tagBits:{
 			on:[0,1],
 			note:[1,5]
@@ -3567,12 +4235,20 @@
 	{
 		name:"jukebox",
 		Name:"Jukebox",
+		blockStates: [{"name":"has_record","values":[false,true]}],
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/axe",
 		textures: ["jukeboxTop","jukeboxSide"],
 		category:"items"
 	},
 	{
 		name:"loom",
 		Name:"Loom",
+		blockStates: "wallTorch",
+		hardness: 2.5,
+		blastResistance: 2.5,
+		material: "mineable/axe",
 		textures: ["loomBottom","loomTop","loomFront","loomSide","loomSide","loomSide"],
 		rotate: true,
 		category:"items"
@@ -3581,28 +4257,43 @@
 	{
 		name:"sandstone",
 		Name:"Sandstone",
+		harvestToolsNames: "stone",
+		hardness: 0.8,
+		blastResistance: 0.8,
+		material: "mineable/pickaxe",
 		textures: ["sandstoneBottom", "sandstoneTop", "sandstone"],
 		category:"nature",
 		randomRotate:true,randomRotateTop:true,randomRotateBottom:true,
 		craftSlabs:true, craftStairs:true
 	},
-	{ name:"chiseledSandstone",
+	{ name:"chiseledSandstone", nameMcd:"chiseled_sandstone",
 		Name:"Chiseled Sandstone",
+		harvestToolsNames: "stone",
+		hardness: 0.8,
+		blastResistance: 0.8,
+		material: "mineable/pickaxe",
 		textures: ["sandstoneBottom", "sandstoneTop","chiseledSandstone"],
 		category:"build",
 		randomRotate:true,randomRotateTop:true,randomRotateBottom:true
 	},
-	{ name:"cutSandstone",
+	{ name:"cutSandstone", nameMcd:"cut_sandstone",
 		Name:"Cut Sandstone",
+		harvestToolsNames: "stone",
+		hardness: 0.8,
+		blastResistance: 0.8,
+		material: "mineable/pickaxe",
 		textures: ["sandstoneBottom", "sandstoneTop","cutSandstone"],
 		category:"build",
 		randomRotate:true,randomRotateTop:true,randomRotateBottom:true,
 		craftSlabs:true, craftStairs:true
 	},
-	{ name:"smoothSandstone", Name:"Smooth Sandstone", textures:"sandstoneTop", category:"nature",randomRotate:true,randomRotateTop:true,randomRotateBottom:true,randomRotateNorth:true,randomRotateSouth:true,randomRotateEast:true,randomRotateWest:true, craftSlabs:true, craftStairs:true },
+	{ name:"smoothSandstone", nameMcd:"smooth_sandstone", Name:"Smooth Sandstone", harvestToolsNames: "stone", hardness: 2, blastResistance: 6, material: "mineable/pickaxe", textures:"sandstoneTop", category:"nature",randomRotate:true,randomRotateTop:true,randomRotateBottom:true,randomRotateNorth:true,randomRotateSouth:true,randomRotateEast:true,randomRotateWest:true, craftSlabs:true, craftStairs:true },
 	{
 		name: "DoubleTallGrass",
+		nameMcd:"tall_grass",
 		Name:"Tall Grass",
+		blockStates: "tallSeagrass",
+		material: "plant;mineable/axe",
 		solid: false,
 		transparent: true,
 		shadow: false,
@@ -3644,7 +4335,9 @@
 	
 	{
 		name:"woodenPickaxe",
+		nameMcd:"wooden_pickaxe",
 		Name:"Wooden Pickaxe",
+		stackSize: 1,
 		item: true,
 		pickaxe: true,
 		mineSpeed: 2,
@@ -3654,52 +4347,63 @@
 	},
 	{
 		name:"stonePickaxe",
+		nameMcd:"stone_pickaxe",
 		Name:"Stone Pickaxe",
+		stackSize: 1,
 		item: true,
 		pickaxe: true,
 		mineSpeed: 4,
 		durability: 131,
 		attackDamage: 2,
-		material:"cobblestone",
+		repairMaterial:"cobblestone",
 		category:"tools",
 	},
 	{
 		name:"ironPickaxe",
+		nameMcd:"iron_pickaxe",
 		Name:"Iron Pickaxe",
+		stackSize: 1,
 		item: true,
 		pickaxe: true,
 		mineSpeed: 6,
 		durability: 250,
 		attackDamage: 3,
-		material:"ironIngot",
+		repairMaterial:"ironIngot",
 		category:"tools",
 	},
 	{
 		name:"goldenPickaxe",
+		nameMcd:"golden_pickaxe",
 		Name:"Golden Pickaxe",
+		stackSize: 1,
 		item: true,
 		pickaxe: true,
 		mineSpeed: 12,
 		durability: 32,
 		attackDamage: 4,
-		material:"goldIngot",
+		repairMaterial:"goldIngot",
 		category:"tools",
 	},
 	{
 		name:"diamondPickaxe",
+		nameMcd:"diamond_pickaxe",
 		Name:"Diamond Pickaxe",
+		stackSize: 1,
 		item: true,
 		pickaxe: true,
 		mineSpeed: 8,
 		durability: 1561,
 		attackDamage: 5,
-		material:"diamond",
+		repairMaterial:"diamond",
 		category:"tools",
 	},
 	{ name:"flint", Name:"Flint", item:true, category:"items" },
 	{
 		name:"mossBlock",
+		nameMcd:"moss_block",
 		Name: "Moss Block",
+		blastResistance: 0.1,
+		material: "mineable/hoe",
 		hardness:0.1,
 		type: "plant2",
 		compostChance:0.65,
@@ -3707,7 +4411,10 @@
 	},
 	{
 		name:"mossCarpet",
+		nameMcd:"moss_carpet",
 		Name: "Moss Carpet",
+		blastResistance: 0.1,
+		material: "plant",
 		textures: "mossBlock",
 		hardness:0.1,
 		carpet: true,
@@ -3717,16 +4424,19 @@
 	},
 	{
 		name: "caveVines",
+		nameMcd:"cave_vines",
 		Name:"Cave Vines",
+		blockStates: [{"name":"age","values":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25"]},{"name":"berries","values":[false,true]}],
+		material: "plant;mineable/axe",
 		solid: false,
 		transparent: true,
 		shadow: false,
 		crossShape: true,
 		onupdate:function(x,y,z,b,world,sx,sy,sz){
 			var top = world.getBlock(x,y-1,z)
-			var isIt = blockData[top].name === "caveVines" || blockData[top].name === "caveVinesPlant" || blockData[top].name === "caveVinesLit" || blockData[top].name === "caveVinesPlantLit"
+			var isIt = blockData[top].name === "caveVines" || blockData[top].name === "caveVinesPlant"
 			if(isIt){
-				world.setBlock(x,y,z,blockIds.caveVinesPlant | CROSS,false,false,false,false)
+				world.setBlock(x,y,z,setBlockState(blockIds.caveVinesPlant,blockStateMaps.caveVinesPlant.berries,getBlockState(b,this.blockStatesMap.berries)),false,false,false,false)
 			}
 		},
 		liquidBreakable:"drop",
@@ -3734,15 +4444,19 @@
 	},
 	{
 		name: "caveVinesPlant",
+		nameMcd:"cave_vines_plant",
+		category: "nature",
+		blockStates: [{"name":"berries","values":[false,true]}],
+		material: "plant;mineable/axe",
 		solid: false,
 		transparent: true,
 		shadow: false,
 		crossShape: true,
 		onupdate:function(x,y,z,b,world,sx,sy,sz){
 			var top = world.getBlock(x,y-1,z)
-			var isIt = blockData[top].name === "caveVines" || blockData[top].name === "caveVinesPlant" || blockData[top].name === "caveVinesLit" || blockData[top].name === "caveVinesPlantLit"
+			var isIt = blockData[top].name === "caveVines" || blockData[top].name === "caveVinesPlant"
 			if(!isIt){
-				world.setBlock(x,y,z,blockIds.caveVines | CROSS,false,false,false,false)
+				world.setBlock(x,y,z,setBlockState(blockIds.caveVines,blockStateMaps.caveVines.berries,getBlockState(b,this.blockStatesMap.berries)),false,false,false,false)
 			}
 		},
 		hidden:true,
@@ -3750,22 +4464,17 @@
 		liquidBreakable:"drop"
 	},
 	{
-		name: "caveVinesLit",
+		name: "caveVinesLit",//todo n: convert
 		Name: "Cave Vines With Glow Berries",
 		solid: false,
 		transparent: true,
 		shadow: false,
 		crossShape: true,
 		lightLevel: 14,
-		onupdate:function(x,y,z,b,world,sx,sy,sz){
-			var top = world.getBlock(x,y-1,z)
-			var isIt = blockData[top].name === "caveVines" || blockData[top].name === "caveVinesPlant" || blockData[top].name === "caveVinesLit" || blockData[top].name === "caveVinesPlantLit"
-			if(isIt){
-				world.setBlock(x,y,z,blockIds.caveVinesPlantLit | CROSS,false,false,false,false)
-			}
-		},
 		liquidBreakable:"drop",
-		category:"nature"
+		category:"nature",
+		hidden:true,
+		replaceWith: block => blockIds.caveVines
 	},
 	{
 		name: "caveVinesPlantLit",
@@ -3774,20 +4483,18 @@
 		shadow: false,
 		crossShape: true,
 		lightLevel: 14,
-		onupdate:function(x,y,z,b,world,sx,sy,sz){
-			var top = world.getBlock(x,y-1,z)
-			var isIt = blockData[top].name === "caveVines" || blockData[top].name === "caveVinesPlant" || blockData[top].name === "caveVinesLit" || blockData[top].name === "caveVinesPlantLit"
-			if(!isIt){
-				world.setBlock(x,y,z,blockIds.caveVinesLit | CROSS,false,false,false,false)
-			}
-		},
 		hidden:true,
-		liquidBreakable:"drop"
+		liquidBreakable:"drop",
+		hidden:true,
+		replaceWith: block => blockIds.caveVinesPlant
 	},
 	
 	{
 		name:"sporeBlossom",
+		nameMcd:"spore_blossom",
 		Name:"Spore Blossom",
+		solid: false,
+		material: "plant;mineable/axe",
 		sporeBlossom: true,
 		shadow:false,
 		transparent: true,
@@ -3796,7 +4503,9 @@
 	},
 	{
 		name: "rootedDirt",
+		nameMcd:"rooted_dirt",
 		Name: "Rooted Dirt",
+		material: "mineable/shovel",
 		category:"nature",
 		type:"ground",
 		hardness:0.5, blastResistance:0.5,
@@ -3806,7 +4515,10 @@
 	},
 	{
 		name: "hangingRoots",
+		nameMcd:"hanging_roots",
 		Name: "Hanging Roots",
+		blockStates: "mangroveRoots",
+		material: "plant;mineable/axe",
 		solid: false,
 		transparent: true,
 		shadow: false,
@@ -3819,6 +4531,7 @@
 	{
 		name:"azalea",
 		Name:"Azalea",
+		material: "plant;mineable/axe",
 		textures: ["azaleaTop", "azaleaSide"],
 		potTex:["pottedAzaleaBushTop","pottedAzaleaBushSide"],
 		azalea: true,
@@ -3830,7 +4543,9 @@
 	},
 	{
 		name:"floweringAzalea",
+		nameMcd:"flowering_azalea",
 		Name:"Flowering Azalea",
+		material: "plant;mineable/axe",
 		textures: ["floweringAzaleaTop","floweringAzaleaSide"],
 		potTex:["pottedFloweringAzaleaBushTop","pottedFloweringAzaleaBushSide"],
 		azalea: true,
@@ -3845,6 +4560,8 @@
 	{
 		name:"sunflower",
 		Name:"Sunflower",
+		blockStates: "tallSeagrass",
+		material: "plant",
 		textures:["sunflowerBack","sunflowerFront","sunflowerConnected"],
 		sunflower: true,
 		transparent:true,
@@ -3876,12 +4593,13 @@
 				world.setBlock(x,y,z,0)
 			}
 		},
-		stackSize: 1,
+		stackSize: 16,
 		allHitbox: true,
 		category:"items"
 	},
 	{
 		name: "waterBucket",
+		nameMcd:"water_bucket",
 		Name:"Water Bucket",
 		item: true,
 		serveronuse: (x,y,z, block,world,face,item,p) => {
@@ -3894,6 +4612,7 @@
 	},
 	{
 		name: "lavaBucket",
+		nameMcd:"lava_bucket",
 		Name:"Lava Bucket",
 		item: true,
 		serveronuse: (x,y,z, block,world,face,item,p) => {
@@ -3906,24 +4625,27 @@
 	},
 	
 	{
-		name: "spawnCow",
+		name: "cow_spawn_egg",
 		item: true,
 		serveronuse: (x,y,z, block,world,face,item,p) => {
 			let pos = movePositionByFace(face,x,y,z)
-			let ent = new entities[entityIds.Cow](pos[0],pos[1],pos[2])
+			let ent = new entities[entityIds.cow](pos[0],pos[1],pos[2])
 			if(item.customName) ent.name = item.customName
 			world.addEntity(ent)
 			item.amount--
 		},
 		spawnMob: function(x,y,z,world){
-			world.addEntity(new entities[entityIds.Cow](x,y,z),false)
+			world.addEntity(new entities[entityIds.cow](x,y,z),false)
 		},
 		category:"items"
 	},
 	
 	{
 		name:"sugarCane",
+		nameMcd:"sugar_cane",
 		Name:"Sugar Cane",
+		blockStates: "cactus",
+		material: "plant;mineable/axe",
 		iconTexture: "sugarCaneIcon",
 		flatIcon: true,
 		solid: false,
@@ -3934,18 +4656,34 @@
 		smoothLight:false,
 		tint:grassTint,
 		purpleTint:{
+		//todo n: purple variant
 			default:[180/255,123/255,142/255],
 		},
 		biomeTintNorth:true,
 		biomeTintSouth:true,
 		biomeTintEast:true,
 		biomeTintWest:true,
-		randomOffset:true
+		randomOffset:true,
+		growSlow:function(x,y,z,world,block){
+			var tall = 0
+			var maxTall = 3
+			for(var t=0; t<maxTall; t++){
+				if(blockData[world.getBlock(x,y-t,z)].id === this.id) tall++
+				else break
+			}
+			if(tall >= maxTall) return
+			
+			var above = world.getBlock(x,y+1,z)
+			if(above) return //there is a block so it can't grow
+			world.setBlock(x,y+1,z, this.id)
+		}
 	},
 	
 	{
 		name:"woodenSword",
+		nameMcd:"wooden_sword",
 		Name:"Wooden Swords aren't even sharp!",
+		stackSize: 1,
 		item: true,
 		sword: true,
 		durability: 59,
@@ -3954,47 +4692,59 @@
 	},
 	{
 		name:"stoneSword",
+		nameMcd:"stone_sword",
 		Name:"Stone Sword",
+		stackSize: 1,
 		item: true,
 		sword: true,
 		durability: 131,
 		attackDamage: 5,
-		material:"cobblestone",
+		repairMaterial:"cobblestone",
 		category:"tools"
 	},
 	{
 		name:"ironSword",
+		nameMcd:"iron_sword",
 		Name:"Iron Sword",
+		stackSize: 1,
 		item: true,
 		sword: true,
 		durability: 250,
 		attackDamage: 6,
-		material:"ironIngot",
+		repairMaterial:"ironIngot",
 		category:"tools"
 	},
 	{
 		name:"goldenSword",
+		nameMcd:"golden_sword",
 		Name:"Golden Sword",
+		stackSize: 1,
 		item: true,
 		sword: true,
 		durability: 32,
 		attackDamage: 4,
-		material:"goldIngot",
+		repairMaterial:"goldIngot",
 		category:"tools"
 	},
 	{
 		name:"diamondSword",
+		nameMcd:"diamond_sword",
 		Name:"Diamond Sword",
+		stackSize: 1,
 		item: true,
 		sword: true,
 		durability: 1561,
 		attackDamage: 7,
-		material:"diamond",
+		repairMaterial:"diamond",
 		category:"tools"
 	},
 	
-	{ name:"azaleaLeaves",
+	{ name:"azaleaLeaves", nameMcd:"azalea_leaves",
 		Name:"Azalea Leaves",
+		blockStates: "oakLeaves",
+		decreaseLight: 1,
+		blastResistance: 0.2,
+		material: "leaves;mineable/hoe",
 		transparent: true,
 		cullFace:0,
 		hardness: 0.2,
@@ -4013,8 +4763,12 @@
 		grassSound: true,
 		leaves:true
 	},
-	{ name:"floweringAzaleaLeaves",
+	{ name:"floweringAzaleaLeaves", nameMcd:"flowering_azalea_leaves",
 		Name:"Flowering Azalea Leaves",
+		blockStates: "oakLeaves",
+		decreaseLight: 1,
+		blastResistance: 0.2,
+		material: "leaves;mineable/hoe",
 		transparent: true,
 		cullFace:0,
 		hardness: 0.2,
@@ -4035,64 +4789,76 @@
 	},
 	
 	{
-		name: "spawnPig",
+		name: "pig_spawn_egg",
 		item: true,
 		serveronuse: (x,y,z, block,world,face,item,p) => {
 			let pos = movePositionByFace(face,x,y,z)
-			let ent = new entities[entityIds.Pig](pos[0],pos[1],pos[2])
+			let ent = new entities[entityIds.pig](pos[0],pos[1],pos[2])
 			if(item.customName) ent.name = item.customName
 			world.addEntity(ent)
 			item.amount--
 		},
 		spawnMob: function(x,y,z,world){
-			world.addEntity(new entities[entityIds.Pig](x,y,z),false)
+			world.addEntity(new entities[entityIds.pig](x,y,z),false)
 		},
 		category:"items"
 	},
 	
-	{name:"tuff",Name:"Tuff",category:"nature",hardness:1.5},
-	{name:"deepslate", Name:"Deepslate", textures:["deepslateTop","deepslate"],category:"nature",hardness:3,deepslateSound:true, randomRotate:"flip",randomRotateTop:true,randomRotateBottom:true, craftSlabs:true, craftStairs:true},
-	{name:"cobbledDeepslate", Name:"Cobbled Deepslate",deepslateSound:true,category:"nature",hardness:3.5, randomRotate:true,randomRotateTop:true,randomRotateBottom:true,randomRotateNorth:true,randomRotateSouth:true,randomRotateEast:true,randomRotateWest:true, craftSlabs:true, craftStairs:true},
-	{name:"chiseledDeepslate", Name:"Chiseled Deepslate",category:"build",hardness:3.5,deepslateSound:true},
-	{name:"polishedDeepslate",Name:"Polished Deepslate",category:"build",hardness:3.5,deepslateSound:true, craftSlabs:true, craftStairs:true},
-	{name:"deepslateTiles",Name:"Deepslate Tiles",category:"build",hardness:3.5,deepslateSound:true, craftSlabs:true, craftStairs:true},
-	{name:"deepslateBricks",Name:"Deepslate Bricks",category:"build",hardness:3.5,deepslateBricksSound:true, craftSlabs:true, craftStairs:true},
-	{name:"crackedDeepslateTiles",Name:"Cracked Deepslate Tiles",category:"build",hardness:3.5,deepslateSound:true},
-	{name:"crackedDeepslateBricks",Name:"Cracked Deepslate Bricks",category:"build",hardness:3.5,deepslateBricksSound:true},
-	{name:"deepslateCoalOre",Name:"Deepslate Coal Ore",category:"nature",hardness:4.5,deepslateSound:true, drop:"coal", dropAmount:[1,3]},
-	{name:"deepslateIronOre",Name:"Deepslate Iron Ore",category:"nature",hardness:4.5,deepslateSound:true, drop:"rawIron", dropAmount:[1,3]},
-	{name:"deepslateCopperOre",Name:"Deepslate Copper Ore",category:"nature",hardness:4.5,deepslateSound:true, drop:"rawCopper", dropAmount:[2,5]},
-	{name:"deepslateGoldOre",Name:"Deepslate Gold Ore",category:"nature",hardness:4.5,deepslateSound:true, drop:"rawGold", dropAmount:[1,3]},
-	{name:"deepslateDiamondOre",Name:"Deepslate Diamond Ore",category:"nature",hardness:4.5,deepslateSound:true, drop:"diamond", dropAmount:[1,3]},
-	{name:"deepslateRedstoneOre",Name:"Deepslate Redstone Ore",category:"nature",hardness:4.5,deepslateSound:true, drop:"redstone", dropAmount:[6,9]},
-	{name:"deepslateEmeraldOre",Name:"Deepslate Emerald Ore",category:"nature",hardness:4.5,deepslateSound:true, drop:"emerald", dropAmount:[1,3]},
-	{name:"deepslateLapisOre",Name:"Deepslate Lapis Lazuli Ore",category:"nature",hardness:4.5,deepslateSound:true,drop:"lapisLazuli", dropAmount:[1,3]},
-	
-	{name:"amethystBlock",Name:"Amethyst Block", category:"nature",hardness:1.5,amethystSound: true},
-	{name:"amethystShard",Name:"Amythest Shard",category:"items",item:true},
-	{name:"buddingAmethyst",Name:"Budding Amethyst", category:"nature",hardness:1.5,amethystSound: true},
-	{name:"smallAmethystBud",Name:"Small Amethyst Bud",category:"nature",hardness:1.5,sideCross:true,
+	{name:"tuff",Name:"Tuff", harvestToolsNames: "stone", blastResistance: 6, material: "mineable/pickaxe",category:"nature",hardness:1.5},
+	{name:"deepslate", Name:"Deepslate", harvestToolsNames: "stone", blockStates: "paleOakWood", blastResistance: 6, material: "mineable/pickaxe", textures:["deepslateTop","deepslate"],category:"nature",hardness:3,deepslateSound:true, randomRotate:"flip",randomRotateTop:true,randomRotateBottom:true, craftSlabs:true, craftStairs:true},
+	{name:"cobbledDeepslate", nameMcd:"cobbled_deepslate", Name:"Cobbled Deepslate", harvestToolsNames: "stone", blastResistance: 6, material: "mineable/pickaxe",deepslateSound:true,category:"nature",hardness:3.5, randomRotate:true,randomRotateTop:true,randomRotateBottom:true,randomRotateNorth:true,randomRotateSouth:true,randomRotateEast:true,randomRotateWest:true, craftSlabs:true, craftStairs:true},
+	{name:"chiseledDeepslate", nameMcd:"chiseled_deepslate", Name:"Chiseled Deepslate", harvestToolsNames: "stone", blastResistance: 6, material: "mineable/pickaxe",category:"build",hardness:3.5,deepslateSound:true},
+	{name:"polishedDeepslate", nameMcd:"polished_deepslate",Name:"Polished Deepslate", harvestToolsNames: "stone", blastResistance: 6, material: "mineable/pickaxe",category:"build",hardness:3.5,deepslateSound:true, craftSlabs:true, craftStairs:true},
+	{name:"deepslateTiles", nameMcd:"deepslate_tiles",Name:"Deepslate Tiles", harvestToolsNames: "stone", blastResistance: 6, material: "mineable/pickaxe",category:"build",hardness:3.5,deepslateSound:true, craftSlabs:true, craftStairs:true},
+	{name:"deepslateBricks", nameMcd:"deepslate_bricks",Name:"Deepslate Bricks", harvestToolsNames: "stone", blastResistance: 6, material: "mineable/pickaxe",category:"build",hardness:3.5,deepslateBricksSound:true, craftSlabs:true, craftStairs:true},
+	{name:"crackedDeepslateTiles", nameMcd:"cracked_deepslate_tiles",Name:"Cracked Deepslate Tiles", harvestToolsNames: "stone", blastResistance: 6, material: "mineable/pickaxe",category:"build",hardness:3.5,deepslateSound:true},
+	{name:"crackedDeepslateBricks", nameMcd:"cracked_deepslate_bricks",Name:"Cracked Deepslate Bricks", harvestToolsNames: "stone", blastResistance: 6, material: "mineable/pickaxe",category:"build",hardness:3.5,deepslateBricksSound:true},
+	{name:"deepslateCoalOre", nameMcd:"deepslate_coal_ore",Name:"Deepslate Coal Ore", harvestToolsNames: "stone", blastResistance: 3, material: "mineable/pickaxe",category:"nature",hardness:4.5,deepslateSound:true, drop:"coal", dropAmount:[1,3]},
+	{name:"deepslateIronOre", nameMcd:"deepslate_iron_ore",Name:"Deepslate Iron Ore", harvestToolsNames: "ironOre", blastResistance: 3, material: "incorrect_for_wooden_tool",category:"nature",hardness:4.5,deepslateSound:true, drop:"rawIron", dropAmount:[1,3]},
+	{name:"deepslateCopperOre", nameMcd:"deepslate_copper_ore",Name:"Deepslate Copper Ore", harvestToolsNames: "ironOre", blastResistance: 3, material: "incorrect_for_wooden_tool",category:"nature",hardness:4.5,deepslateSound:true, drop:"rawCopper", dropAmount:[2,5]},
+	{name:"deepslateGoldOre", nameMcd:"deepslate_gold_ore",Name:"Deepslate Gold Ore", harvestToolsNames: "goldOre", blastResistance: 3, material: "incorrect_for_wooden_tool",category:"nature",hardness:4.5,deepslateSound:true, drop:"rawGold", dropAmount:[1,3]},
+	{name:"deepslateDiamondOre", nameMcd:"deepslate_diamond_ore",Name:"Deepslate Diamond Ore", harvestToolsNames: "goldOre", blastResistance: 3, material: "incorrect_for_wooden_tool",category:"nature",hardness:4.5,deepslateSound:true, drop:"diamond", dropAmount:[1,3]},
+	{name:"deepslateRedstoneOre", nameMcd:"deepslate_redstone_ore",Name:"Deepslate Redstone Ore", harvestToolsNames: "goldOre", blockStates: "redstoneOre", blastResistance: 3, material: "incorrect_for_wooden_tool",category:"nature",hardness:4.5,deepslateSound:true, drop:"redstone", dropAmount:[6,9]},
+	{name:"deepslateEmeraldOre", nameMcd:"deepslate_emerald_ore",Name:"Deepslate Emerald Ore", harvestToolsNames: "goldOre", blastResistance: 3, material: "incorrect_for_wooden_tool",category:"nature",hardness:4.5,deepslateSound:true, drop:"emerald", dropAmount:[1,3]},
+	{name:"deepslateLapisOre", nameMcd:"deepslate_lapis_ore",Name:"Deepslate Lapis Lazuli Ore", harvestToolsNames: "ironOre", blastResistance: 3, material: "incorrect_for_wooden_tool",category:"nature",hardness:4.5,deepslateSound:true,drop:"lapisLazuli", dropAmount:[1,3]},
+	
+	{name:"amethystBlock", nameMcd:"amethyst_block",Name:"Amethyst Block", harvestToolsNames: "stone", blastResistance: 1.5, material: "mineable/pickaxe", category:"nature",hardness:1.5,amethystSound: true},
+	{name:"amethystShard", nameMcd:"amethyst_shard",Name:"Amythest Shard",category:"items",item:true},
+	{name:"buddingAmethyst", nameMcd:"budding_amethyst",Name:"Budding Amethyst", harvestToolsNames: "stone", blastResistance: 1.5, material: "mineable/pickaxe", category:"nature",hardness:1.5,amethystSound: true},
+	{name:"smallAmethystBud", nameMcd:"small_amethyst_bud",Name:"Small Amethyst Bud",
+		blockStates: "amethystCluster",
+		blastResistance: 1.5,
+		material: "mineable/pickaxe",category:"nature",hardness:1.5,sideCross:true,
 		solid: false,
 		transparent: true,
 		shadow: false,
 		amethystClusterSound: true,
 		lightLevel:1
 	},
-	{name:"mediumAmethystBud",Name:"Medium Amethyst Bud",category:"nature",hardness:1.5,sideCross:true,
+	{name:"mediumAmethystBud", nameMcd:"medium_amethyst_bud",Name:"Medium Amethyst Bud",
+		blockStates: "amethystCluster",
+		blastResistance: 1.5,
+		material: "mineable/pickaxe",category:"nature",hardness:1.5,sideCross:true,
 		solid: false,
 		transparent: true,
 		shadow: false,
 		amethystClusterSound: true,
 		lightLevel:2
 	},
-	{name:"largeAmethystBud",Name:"Large Amethyst Bud",category:"nature",hardness:1.5,sideCross:true,
+	{name:"largeAmethystBud", nameMcd:"large_amethyst_bud",Name:"Large Amethyst Bud",
+		blockStates: "amethystCluster",
+		blastResistance: 1.5,
+		material: "mineable/pickaxe",category:"nature",hardness:1.5,sideCross:true,
 		solid: false,
 		transparent: true,
 		shadow: false,
 		amethystClusterSound: true,
 		lightLevel:4
 	},
-	{name:"amethystCluster",Name:"Amethyst Cluster",category:"nature",hardness:1.5,sideCross:true,
+	{name:"amethystCluster", nameMcd:"amethyst_cluster",Name:"Amethyst Cluster",
+		blockStates: [{"name":"facing","values":["north","east","south","west","up","down"]},{"name":"waterlogged","values":[false,true]}],
+		blastResistance: 1.5,
+		material: "mineable/pickaxe",category:"nature",hardness:1.5,sideCross:true,
 		solid: false,
 		transparent: true,
 		shadow: false,
@@ -4103,7 +4869,11 @@
 	
 	{
 		name:"snowBlock",
+		nameMcd:"snow_block",
 		Name:"Block of Snow",
+		harvestToolsNames: "snow",
+		blastResistance: 0.2,
+		material: "mineable/shovel",
 		textures:"snow",
 		hardness: 0.2,
 		drop:"snowball",
@@ -4115,10 +4885,18 @@
 	{
 		name:"snow",
 		Name:"Snow Layer",
+		harvestToolsNames: ["woodenShovel","stoneShovel","goldenShovel","ironShovel","diamondShovel","netheriteShovel"],
+		blockStates: [{"name":"layers","values":["1","2","3","4","5","6","7","8"]}],
+		solid: false,
+		blastResistance: 0.1,
+		material: "mineable/shovel",
 		layers: true,
 		transparent:true,
 		shadow:true,
 		drop:"snowball",
+		dropAmount:function(block){
+			return +getBlockState(block,this.blockStatesMap.layers)
+		},
 		hardness: 0.1,
 		fallingDust:[248/255, 253/255, 253/255],
 		onupdate: function(x,y,z,b,world,sx,sy,sz){
@@ -4134,7 +4912,11 @@
 	},
 	{
 		name:"powderSnow",
+		nameMcd:"powder_snow",
 		Name:"Powder Snow",
+		decreaseLight: 1,
+		blastResistance: 0.25,
+		stackSize: 1,
 		solid:false,
 		powder: true,
 		hardness: 0.25,
@@ -4146,6 +4928,7 @@
 	{
 		name:"snowball",
 		Name:"Snowball",
+		stackSize: 16,
 		item: true,
 		serveronuse: (x,y,z, block,world,face,item,p) => {
 			item.amount--
@@ -4157,6 +4940,7 @@
 	},
 	{
 		name:"powderSnowBucket",
+		nameMcd:"powder_snow_bucket",
 		Name:"Powder Snow Bucket",
 		item:true,
 		serveronuse: (x,y,z, block,world,face,item,p) => {
@@ -4174,40 +4958,50 @@
 		edible: true,
 		item:true,
 		eatWhenFull: false,
-		food: 6,
-		saturation: 11,
+		food: 5,
+		saturation: 6,
 		compostChance:0.85,
 		category:"food",
 	},
 	
 	{
 		name:"boneBlock",
+		nameMcd:"bone_block",
 		Name:"Bone Block",
+		harvestToolsNames: "stone",
+		blockStates: "paleOakWood",
+		hardness: 2,
+		blastResistance: 2,
+		material: "mineable/pickaxe",
 		textures:["boneBlockTop","boneBlockSide"],
 		category:"nature",
 	},
 	{
 		name:"farmland",
 		Name:"Farmland",
+		blockStates: [{"name":"moisture","values":["0","1","2","3","4","5","6","7"]}],
+		material: "mineable/shovel",
 		textures:["dirt","farmland","dirt"],
 		_1PixLower: true,
 		category:"nature",
-		hardness:0.6, blastResistance:0.5,
+		hardness:0.6, blastResistance:0.6,
 		type:"ground",
 		tick:function(block,x,y,z,world){
-			var target = this.id
+			var water = false
 			for(var X=x-4;X<=x+4;X++){
 				for(var Z=z-4;Z<=z+4;Z++){
 					var b = world.getBlock(X,y,Z), a = world.getBlock(X,y+1,Z)
-					if(b && blockData[b].name === "Water" || a && blockData[a].name === "Water") target = this.id|SLAB
+					if(b && blockData[b].name === "Water" || a && blockData[a].name === "Water") water = true
 				}
 			}
+			let target = setBlockState(block,this.blockStatesMap.moisture, water?7:0)
 			if(block !== target) world.setBlock(x,y,z,target,false,false,false,false)
 		}
 	},
 	
 	{
 		name:"glowBerries",
+		nameMcd:"glow_berries",
 		Name:"Glow Berries",
 		edible: true,
 		item:true,
@@ -4220,7 +5014,12 @@
 	
 	{
 		name:"hayBlock",
+		nameMcd:"hay_block",
 		Name:"Hay Bale",
+		blockStates: "paleOakWood",
+		hardness: 0.5,
+		blastResistance: 0.5,
+		material: "mineable/hoe",
 		textures:["hayBlockTop","hayBlockSide"],
 		type:"plant2",
 		damageResistance:0.8,
@@ -4240,122 +5039,173 @@
 	
 	{
 		name:"woodenShovel",
+		nameMcd:"wooden_shovel",
 		Name:"Wooden Shovel",
+		stackSize: 1,
 		item: true,
 		shovel: true,
 		durability: 59,
 		mineSpeed:2,
 		attackDamage: 2,
-		category:"tools"
+		category:"tools",
+		serveronuse:function(x,y,z, block,world,face,item,p){
+			if(block === blockIds.grass || block === blockIds.dirt || block === blockIds.rootedDirt || block === blockIds.mycelium || block === blockIds.podzol){
+				world.setBlock(x,y,z,blockIds.dirtPath)
+				item.durability --
+			}
+			if(blockData[block].campfire){
+				world.setBlock(x,y,z, setBlockState(block,blockData[block].blockStatesMap.lit, false))
+				item.durability --
+			}
+		}
 	},
 	{
 		name:"stoneShovel",
+		nameMcd:"stone_shovel",
 		Name:"Stone Shovel",
+		stackSize: 1,
 		item: true,
 		shovel: true,
 		durability: 131,
 		mineSpeed:3.6,
 		attackDamage: 4,
-		material:"cobblestone",
-		category:"tools"
+		repairMaterial:"cobblestone",
+		category:"tools",
+		copyPropertiesHere:"woodenShovel"
 	},
 	{
 		name:"ironShovel",
+		nameMcd:"iron_shovel",
 		Name:"Iron Shovel",
+		stackSize: 1,
 		item: true,
 		shovel: true,
 		durability: 250,
 		mineSpeed:6,
 		attackDamage: 4,
-		material:"ironIngot",
-		category:"tools"
+		repairMaterial:"ironIngot",
+		category:"tools",
+		copyPropertiesHere:"woodenShovel"
 	},
 	{
 		name:"goldenShovel",
+		nameMcd:"golden_shovel",
 		Name:"Golden Shovel",
+		stackSize: 1,
 		item: true,
 		shovel: true,
 		durability: 32,
 		mineSpeed:12,
 		attackDamage: 2,
-		material:"goldIngot",
-		category:"tools"
+		repairMaterial:"goldIngot",
+		category:"tools",
+		copyPropertiesHere:"woodenShovel"
 	},
 	{
 		name:"diamondShovel",
+		nameMcd:"diamond_shovel",
 		Name:"Diamond Shovel",
+		stackSize: 1,
 		item: true,
 		shovel: true,
 		durability: 1561,
 		mineSpeed:8,
 		attackDamage: 5,
-		material:"diamond",
-		category:"tools"
+		repairMaterial:"diamond",
+		category:"tools",
+		copyPropertiesHere:"woodenShovel"
 	},
 	
 	{
 		name:"woodenAxe",
+		nameMcd:"wooden_axe",
 		Name:"Wooden Axe",
+		stackSize: 1,
 		item: true,
 		axe: true,
 		durability: 59,
 		mineSpeed:2,
 		attackDamage: 7,
 		attackSpeed:0.8,
-		category:"tools"
+		category:"tools",
+		serveronuse:function(x,y,z, block,world,face,item,p){
+			var name = blockData[block].name
+			name = name[0].toUpperCase() + name.substring(1)
+			name = "stripped"+name
+			if(blockIds[name]){
+				world.setBlock(x,y,z,blockIds[name])
+				item.durability --
+			}
+		}
 	},
 	{
 		name:"stoneAxe",
+		nameMcd:"stone_axe",
 		Name:"Stone Axe",
+		stackSize: 1,
 		item: true,
 		axe: true,
 		durability: 131,
 		mineSpeed:4,
 		attackDamage: 9,
 		attackSpeed:0.8,
-		material:"cobblestone",
-		category:"tools"
+		repairMaterial:"cobblestone",
+		category:"tools",
+		copyPropertiesHere:"woodenAxe"
 	},
 	{
 		name:"ironAxe",
+		nameMcd:"iron_axe",
 		Name:"Iron Axe",
+		stackSize: 1,
 		item: true,
 		axe: true,
 		durability: 250,
 		mineSpeed:6,
 		attackDamage: 9,
 		attackSpeed:0.9,
-		material:"ironIngot",
-		category:"tools"
+		repairMaterial:"ironIngot",
+		category:"tools",
+		copyPropertiesHere:"woodenAxe"
 	},
 	{
 		name:"goldenAxe",
+		nameMcd:"golden_axe",
 		Name:"Golden Axe",
+		stackSize: 1,
 		item: true,
 		axe: true,
 		durability: 32,
 		mineSpeed:12,
 		attackDamage: 7,
 		attackSpeed:1,
-		material:"goldIngot",
-		category:"tools"
+		repairMaterial:"goldIngot",
+		category:"tools",
+		copyPropertiesHere:"woodenAxe"
 	},
 	{
 		name:"diamondAxe",
+		nameMcd:"diamond_axe",
 		Name:"Diamond Axe",
+		stackSize: 1,
 		item: true,
 		axe: true,
 		durability: 1561,
 		mineSpeed:8,
 		attackDamage: 9,
 		attackSpeed:1,
-		material:"diamond",
-		category:"tools"
+		repairMaterial:"diamond",
+		category:"tools",
+		copyPropertiesHere:"woodenAxe"
 	},
 	
 	{
 		name: "strippedOakLog",
+		nameMcd:"stripped_oak_log",
 		Name: "Stripped Oak Log",
+		blockStates: "paleOakWood",
+		blastResistance: 2,
+		material: "mineable/axe",
 		textures: ["strippedOakLogTop", "strippedOakLog"],
 		hardness:2,
 		woodSound:true,
@@ -4374,7 +5224,11 @@
 	},
 	{
 		name: "strippedBirchLog",
+		nameMcd:"stripped_birch_log",
 		Name: "Stripped Birch Log",
+		blockStates: "paleOakWood",
+		blastResistance: 2,
+		material: "mineable/axe",
 		textures: ["strippedBirchLogTop", "strippedBirchLog"],
 		hardness:2,
 		woodSound:true,
@@ -4393,7 +5247,11 @@
 	},
 	{
 		name: "strippedAcaciaLog",
+		nameMcd:"stripped_acacia_log",
 		Name: "Stripped Acacia Log",
+		blockStates: "paleOakWood",
+		blastResistance: 2,
+		material: "mineable/axe",
 		textures: ["strippedAcaciaLogTop", "strippedAcaciaLog"],
 		hardness:2,
 		woodSound:true,
@@ -4412,7 +5270,11 @@
 	},
 	{
 		name: "strippedJungleLog",
+		nameMcd:"stripped_jungle_log",
 		Name: "Stripped Jungle Log",
+		blockStates: "paleOakWood",
+		blastResistance: 2,
+		material: "mineable/axe",
 		textures: ["strippedJungleLogTop", "strippedJungleLog"],
 		hardness:2,
 		woodSound:true,
@@ -4431,7 +5293,11 @@
 	},
 	{
 		name: "strippedSpruceLog",
+		nameMcd:"stripped_spruce_log",
 		Name: "Stripped Spruce Log",
+		blockStates: "paleOakWood",
+		blastResistance: 2,
+		material: "mineable/axe",
 		textures: ["strippedSpruceLogTop", "strippedSpruceLog"],
 		hardness:2,
 		woodSound:true,
@@ -4450,7 +5316,11 @@
 	},
 	{
 		name: "strippedDarkOakLog",
+		nameMcd:"stripped_dark_oak_log",
 		Name: "Stripped Dark Oak Log",
+		blockStates: "paleOakWood",
+		blastResistance: 2,
+		material: "mineable/axe",
 		textures: ["strippedDarkOakLogTop", "strippedDarkOakLog"],
 		hardness:2,
 		woodSound:true,
@@ -4477,7 +5347,9 @@
 	
 	{
 		name:"redMushroom",
+		nameMcd:"red_mushroom",
 		Name:"Red Mushroom",
+		material: "plant;mineable/axe",
 		solid: false,
 		transparent: true,
 		shadow: false,
@@ -4496,7 +5368,9 @@
 	},
 	{
 		name:"brownMushroom",
+		nameMcd:"brown_mushroom",
 		Name:"Brown Mushroom",
+		material: "plant;mineable/axe",
 		solid: false,
 		transparent: true,
 		shadow: false,
@@ -4515,21 +5389,36 @@
 	},
 	{
 		name:"mushroomStem",
+		nameMcd:"mushroom_stem",
 		Name: "Mushroom Stem",
+		blockStates: "brownMushroomBlock",
+		hardness: 0.2,
+		blastResistance: 0.2,
+		material: "mineable/axe",
 		mushroomBlock:true,
 		compostChance:0.65,
 		category:"nature"
 	},
 	{
 		name:"redMushroomBlock",
+		nameMcd:"red_mushroom_block",
 		Name: "Red Mushroom Block",
+		blockStates: "brownMushroomBlock",
+		hardness: 0.2,
+		blastResistance: 0.2,
+		material: "mineable/axe",
 		mushroomBlock:true,
 		compostChance:0.85,
 		category:"nature"
 	},
 	{
 		name:"brownMushroomBlock",
+		nameMcd:"brown_mushroom_block",
 		Name: "Brown Mushroom Block",
+		blockStates: [{"name":"down","values":[false,true]},{"name":"east","values":[false,true]},{"name":"north","values":[false,true]},{"name":"south","values":[false,true]},{"name":"up","values":[false,true]},{"name":"west","values":[false,true]}],
+		hardness: 0.2,
+		blastResistance: 0.2,
+		material: "mineable/axe",
 		mushroomBlock:true,
 		compostChance:0.85,
 		category:"nature"
@@ -4538,6 +5427,8 @@
 	{
 		name:"mycelium",
 		Name:"Mycelium",
+		blockStates: "grass",
+		material: "mineable/shovel",
 		textures:["dirt","myceliumTop","myceliumSide"],
 		type:"ground",
 		category:"nature",
@@ -4546,96 +5437,187 @@
 		blastResistance:0.6,
 		drop:"dirt",
 		grassSound: true,
+		copyPropertiesHere:"grass"
 	},
 	
 	{
 		name:"terracotta",
 		Name:"Terracotta",
+		harvestToolsNames: "stone",
+		hardness: 1.25,
+		blastResistance: 4.2,
+		material: "mineable/pickaxe",
 		category:"build"
 	},
 	{
 		name:"redTerracotta",
+		nameMcd:"red_terracotta",
 		Name:"Terracotta with watermelon juice",
+		harvestToolsNames: "stone",
+		hardness: 1.25,
+		blastResistance: 4.2,
+		material: "mineable/pickaxe",
 		category:"build"
 	},
 	{
 		name:"blueTerracotta",
+		nameMcd:"blue_terracotta",
 		Name:"Terracotta with blueberry juice",
+		harvestToolsNames: "stone",
+		hardness: 1.25,
+		blastResistance: 4.2,
+		material: "mineable/pickaxe",
 		category:"build"
 	},
 	{
 		name:"cyanTerracotta",
+		nameMcd:"cyan_terracotta",
 		Name:"Terracotta with cyan colored fruit punch",
+		harvestToolsNames: "stone",
+		hardness: 1.25,
+		blastResistance: 4.2,
+		material: "mineable/pickaxe",
 		category:"build"
 	},
 	{
 		name:"grayTerracotta",
+		nameMcd:"gray_terracotta",
 		Name:"Dusty Terracotta",
+		harvestToolsNames: "stone",
+		hardness: 1.25,
+		blastResistance: 4.2,
+		material: "mineable/pickaxe",
 		category:"build"
 	},
 	{
 		name:"limeTerracotta",
+		nameMcd:"lime_terracotta",
 		Name:"Terracotta with leaf juice",
+		harvestToolsNames: "stone",
+		hardness: 1.25,
+		blastResistance: 4.2,
+		material: "mineable/pickaxe",
 		category:"build"
 	},
 	{
 		name:"pinkTerracotta",
+		nameMcd:"pink_terracotta",
 		Name:"Terracotta with fruit punch",
+		harvestToolsNames: "stone",
+		hardness: 1.25,
+		blastResistance: 4.2,
+		material: "mineable/pickaxe",
 		category:"build"
 	},
 	{
 		name:"blackTerracotta",
+		nameMcd:"black_terracotta",
 		Name:"Terracotta painted black",
+		harvestToolsNames: "stone",
+		hardness: 1.25,
+		blastResistance: 4.2,
+		material: "mineable/pickaxe",
 		category:"build"
 	},
 	{
 		name:"brownTerracotta",
+		nameMcd:"brown_terracotta",
 		Name:"Dirty Terracotta",
+		harvestToolsNames: "stone",
+		hardness: 1.25,
+		blastResistance: 4.2,
+		material: "mineable/pickaxe",
 		category:"build"
 	},
 	{
 		name:"greenTerracotta",
+		nameMcd:"green_terracotta",
 		Name:"Terracotta with some other leaf juice",
+		harvestToolsNames: "stone",
+		hardness: 1.25,
+		blastResistance: 4.2,
+		material: "mineable/pickaxe",
 		category:"build"
 	},
 	{
 		name:"whiteTerracotta",
+		nameMcd:"white_terracotta",
 		Name:"Terracotta with flour",
+		harvestToolsNames: "stone",
+		hardness: 1.25,
+		blastResistance: 4.2,
+		material: "mineable/pickaxe",
 		category:"build"
 	},
 	{
 		name:"orangeTerracotta",
+		nameMcd:"orange_terracotta",
 		Name:"Orange Terracotta",
+		harvestToolsNames: "stone",
+		hardness: 1.25,
+		blastResistance: 4.2,
+		material: "mineable/pickaxe",
 		category:"build"
 	},
 	{
 		name:"purpleTerracotta",
+		nameMcd:"purple_terracotta",
 		Name:"Purple Terracotta",
+		harvestToolsNames: "stone",
+		hardness: 1.25,
+		blastResistance: 4.2,
+		material: "mineable/pickaxe",
 		category:"build"
 	},
 	{
 		name:"yellowTerracotta",
+		nameMcd:"yellow_terracotta",
 		Name:"Terracotta with lemon juice",
+		harvestToolsNames: "stone",
+		hardness: 1.25,
+		blastResistance: 4.2,
+		material: "mineable/pickaxe",
 		category:"build"
 	},
 	{
 		name:"magentaTerracotta",
+		nameMcd:"magenta_terracotta",
 		Name:"Magenta Terracotta",
+		harvestToolsNames: "stone",
+		hardness: 1.25,
+		blastResistance: 4.2,
+		material: "mineable/pickaxe",
 		category:"build"
 	},
 	{
 		name:"lightBlueTerracotta",
+		nameMcd:"light_blue_terracotta",
 		Name:"Light Blue Terracotta",
+		harvestToolsNames: "stone",
+		hardness: 1.25,
+		blastResistance: 4.2,
+		material: "mineable/pickaxe",
 		category:"build"
 	},
 	{
 		name:"lightGrayTerracotta",
+		nameMcd:"light_gray_terracotta",
 		Name:"Light Gray Terracotta",
+		harvestToolsNames: "stone",
+		hardness: 1.25,
+		blastResistance: 4.2,
+		material: "mineable/pickaxe",
 		category:"build"
 	},
 	{
 		name:"redGlazedTerracotta",
+		nameMcd:"red_glazed_terracotta",
 		Name:"Watermelon Swirl",
+		harvestToolsNames: "stone",
+		blockStates: "wallTorch",
+		hardness: 1.4,
+		blastResistance: 1.4,
+		material: "mineable/pickaxe",
 		category:"build",
 		pistonPush:false,
 		pistonPull:false,
@@ -4643,7 +5625,13 @@
 	},
 	{
 		name:"blueGlazedTerracotta",
+		nameMcd:"blue_glazed_terracotta",
 		Name:"Blue Fan",
+		harvestToolsNames: "stone",
+		blockStates: "wallTorch",
+		hardness: 1.4,
+		blastResistance: 1.4,
+		material: "mineable/pickaxe",
 		category:"build",
 		pistonPush:false,
 		pistonPull:false,
@@ -4651,7 +5639,13 @@
 	},
 	{
 		name:"cyanGlazedTerracotta",
+		nameMcd:"cyan_glazed_terracotta",
 		Name:"Creeper in the skies",
+		harvestToolsNames: "stone",
+		blockStates: "wallTorch",
+		hardness: 1.4,
+		blastResistance: 1.4,
+		material: "mineable/pickaxe",
 		category:"build",
 		pistonPush:false,
 		pistonPull:false,
@@ -4659,7 +5653,13 @@
 	},
 	{
 		name:"grayGlazedTerracotta",
+		nameMcd:"gray_glazed_terracotta",
 		Name:"Bunch of Dust",
+		harvestToolsNames: "stone",
+		blockStates: "wallTorch",
+		hardness: 1.4,
+		blastResistance: 1.4,
+		material: "mineable/pickaxe",
 		category:"build",
 		pistonPush:false,
 		pistonPull:false,
@@ -4667,7 +5667,13 @@
 	},
 	{
 		name:"limeGlazedTerracotta",
+		nameMcd:"lime_glazed_terracotta",
 		Name:"Overlapping lilies",
+		harvestToolsNames: "stone",
+		blockStates: "wallTorch",
+		hardness: 1.4,
+		blastResistance: 1.4,
+		material: "mineable/pickaxe",
 		category:"build",
 		pistonPush:false,
 		pistonPull:false,
@@ -4675,7 +5681,13 @@
 	},
 	{
 		name:"pinkGlazedTerracotta",
+		nameMcd:"pink_glazed_terracotta",
 		Name:"Pink turtle shell",
+		harvestToolsNames: "stone",
+		blockStates: "wallTorch",
+		hardness: 1.4,
+		blastResistance: 1.4,
+		material: "mineable/pickaxe",
 		category:"build",
 		pistonPush:false,
 		pistonPull:false,
@@ -4683,7 +5695,13 @@
 	},
 	{
 		name:"blackGlazedTerracotta",
+		nameMcd:"black_glazed_terracotta",
 		Name:"Red monster",
+		harvestToolsNames: "stone",
+		blockStates: "wallTorch",
+		hardness: 1.4,
+		blastResistance: 1.4,
+		material: "mineable/pickaxe",
 		category:"build",
 		pistonPush:false,
 		pistonPull:false,
@@ -4691,7 +5709,13 @@
 	},
 	{
 		name:"brownGlazedTerracotta",
+		nameMcd:"brown_glazed_terracotta",
 		Name:"Mudslide in the ocean",
+		harvestToolsNames: "stone",
+		blockStates: "wallTorch",
+		hardness: 1.4,
+		blastResistance: 1.4,
+		material: "mineable/pickaxe",
 		category:"build",
 		pistonPush:false,
 		pistonPull:false,
@@ -4699,7 +5723,13 @@
 	},
 	{
 		name:"greenGlazedTerracotta",
+		nameMcd:"green_glazed_terracotta",
 		Name:"Camouflaged monster",
+		harvestToolsNames: "stone",
+		blockStates: "wallTorch",
+		hardness: 1.4,
+		blastResistance: 1.4,
+		material: "mineable/pickaxe",
 		category:"build",
 		pistonPush:false,
 		pistonPull:false,
@@ -4707,7 +5737,13 @@
 	},
 	{
 		name:"whiteGlazedTerracotta",
+		nameMcd:"white_glazed_terracotta",
 		Name:"Sun & clouds",
+		harvestToolsNames: "stone",
+		blockStates: "wallTorch",
+		hardness: 1.4,
+		blastResistance: 1.4,
+		material: "mineable/pickaxe",
 		category:"build",
 		pistonPush:false,
 		pistonPull:false,
@@ -4715,7 +5751,13 @@
 	},
 	{
 		name:"orangeGlazedTerracotta",
+		nameMcd:"orange_glazed_terracotta",
 		Name:"Flower Monster",
+		harvestToolsNames: "stone",
+		blockStates: "wallTorch",
+		hardness: 1.4,
+		blastResistance: 1.4,
+		material: "mineable/pickaxe",
 		category:"build",
 		pistonPush:false,
 		pistonPull:false,
@@ -4723,7 +5765,13 @@
 	},
 	{
 		name:"purpleGlazedTerracotta",
+		nameMcd:"purple_glazed_terracotta",
 		Name:"Sword & pickaxe monster",
+		harvestToolsNames: "stone",
+		blockStates: "wallTorch",
+		hardness: 1.4,
+		blastResistance: 1.4,
+		material: "mineable/pickaxe",
 		category:"build",
 		pistonPush:false,
 		pistonPull:false,
@@ -4731,7 +5779,13 @@
 	},
 	{
 		name:"yellowGlazedTerracotta",
+		nameMcd:"yellow_glazed_terracotta",
 		Name:"Some kind of bug",
+		harvestToolsNames: "stone",
+		blockStates: "wallTorch",
+		hardness: 1.4,
+		blastResistance: 1.4,
+		material: "mineable/pickaxe",
 		category:"build",
 		pistonPush:false,
 		pistonPull:false,
@@ -4739,7 +5793,13 @@
 	},
 	{
 		name:"magentaGlazedTerracotta",
+		nameMcd:"magenta_glazed_terracotta",
 		Name:"Arrow",
+		harvestToolsNames: "stone",
+		blockStates: "wallTorch",
+		hardness: 1.4,
+		blastResistance: 1.4,
+		material: "mineable/pickaxe",
 		category:"build",
 		pistonPush:false,
 		pistonPull:false,
@@ -4747,7 +5807,13 @@
 	},
 	{
 		name:"lightBlueGlazedTerracotta",
+		nameMcd:"light_blue_glazed_terracotta",
 		Name:"Monster sticking out tongue and eyes facing opposite direction",
+		harvestToolsNames: "stone",
+		blockStates: "wallTorch",
+		hardness: 1.4,
+		blastResistance: 1.4,
+		material: "mineable/pickaxe",
 		category:"build",
 		pistonPush:false,
 		pistonPull:false,
@@ -4755,7 +5821,13 @@
 	},
 	{
 		name:"lightGrayGlazedTerracotta",
+		nameMcd:"light_gray_glazed_terracotta",
 		Name:"Monster with blue eyes and mouth",
+		harvestToolsNames: "stone",
+		blockStates: "wallTorch",
+		hardness: 1.4,
+		blastResistance: 1.4,
+		material: "mineable/pickaxe",
 		category:"build",
 		pistonPush:false,
 		pistonPull:false,
@@ -4764,7 +5836,11 @@
 	
 	{
 		name:"ancientDebris",
+		nameMcd:"ancient_debris",
 		Name:"Ancient Debris",
+		harvestToolsNames: "obsidian",
+		blastResistance: 1200,
+		material: "incorrect_for_wooden_tool",
 		textures:["ancientDebrisTop","ancientDebrisSide"],
 		hardness:30,
 		type:"rock4",
@@ -4773,6 +5849,7 @@
 	
 	{
 		name:"wheatSeeds",
+		nameMcd:"wheat_seeds",
 		Name:"Seeds",
 		item:true,
 		useAs:function(x,y,z,block,face){
@@ -4785,7 +5862,9 @@
 	
 	{
 		name:"yellowStainedGlass",
+		nameMcd:"yellow_stained_glass",
 		Name: "Yellow Stained Glass",
+		blastResistance: 0.3,
 		transparent: true,
 		shadow: false,
 		hardness: 0.3,
@@ -4795,7 +5874,9 @@
 	},
 	{
 		name:"whiteStainedGlass",
+		nameMcd:"white_stained_glass",
 		Name: "White Stained Glass",
+		blastResistance: 0.3,
 		transparent: true,
 		shadow: false,
 		hardness: 0.3,
@@ -4805,7 +5886,9 @@
 	},
 	{
 		name:"redStainedGlass",
+		nameMcd:"red_stained_glass",
 		Name: "Red Stained Glass",
+		blastResistance: 0.3,
 		transparent: true,
 		shadow: false,
 		hardness: 0.3,
@@ -4815,7 +5898,9 @@
 	},
 	{
 		name:"purpleStainedGlass",
+		nameMcd:"purple_stained_glass",
 		Name: "Purple Stained Glass",
+		blastResistance: 0.3,
 		transparent: true,
 		shadow: false,
 		hardness: 0.3,
@@ -4825,7 +5910,9 @@
 	},
 	{
 		name:"pinkStainedGlass",
+		nameMcd:"pink_stained_glass",
 		Name: "Pink Stained Glass",
+		blastResistance: 0.3,
 		transparent: true,
 		shadow: false,
 		hardness: 0.3,
@@ -4835,7 +5922,9 @@
 	},
 	{
 		name:"orangeStainedGlass",
+		nameMcd:"orange_stained_glass",
 		Name: "Orange Stained Glass",
+		blastResistance: 0.3,
 		transparent: true,
 		shadow: false,
 		hardness: 0.3,
@@ -4845,7 +5934,9 @@
 	},
 	{
 		name:"magentaStainedGlass",
+		nameMcd:"magenta_stained_glass",
 		Name: "Magenta Stained Glass",
+		blastResistance: 0.3,
 		transparent: true,
 		shadow: false,
 		hardness: 0.3,
@@ -4855,7 +5946,9 @@
 	},
 	{
 		name:"limeStainedGlass",
+		nameMcd:"lime_stained_glass",
 		Name: "Lime Stained Glass",
+		blastResistance: 0.3,
 		transparent: true,
 		shadow: false,
 		hardness: 0.3,
@@ -4865,7 +5958,9 @@
 	},
 	{
 		name:"lightGrayStainedGlass",
+		nameMcd:"light_gray_stained_glass",
 		Name: "Light Gray Stained Glass",
+		blastResistance: 0.3,
 		transparent: true,
 		shadow: false,
 		hardness: 0.3,
@@ -4875,7 +5970,9 @@
 	},
 	{
 		name:"lightBlueStainedGlass",
+		nameMcd:"light_blue_stained_glass",
 		Name: "Light Blue Stained Glass",
+		blastResistance: 0.3,
 		transparent: true,
 		shadow: false,
 		hardness: 0.3,
@@ -4885,7 +5982,9 @@
 	},
 	{
 		name:"greenStainedGlass",
+		nameMcd:"green_stained_glass",
 		Name: "Green Stained Glass",
+		blastResistance: 0.3,
 		transparent: true,
 		shadow: false,
 		hardness: 0.3,
@@ -4895,7 +5994,9 @@
 	},
 	{
 		name:"grayStainedGlass",
+		nameMcd:"gray_stained_glass",
 		Name: "Gray Stained Glass",
+		blastResistance: 0.3,
 		transparent: true,
 		shadow: false,
 		hardness: 0.3,
@@ -4905,7 +6006,9 @@
 	},
 	{
 		name:"cyanStainedGlass",
+		nameMcd:"cyan_stained_glass",
 		Name: "Cyan Stained Glass",
+		blastResistance: 0.3,
 		transparent: true,
 		shadow: false,
 		hardness: 0.3,
@@ -4915,7 +6018,9 @@
 	},
 	{
 		name:"brownStainedGlass",
+		nameMcd:"brown_stained_glass",
 		Name: "Brown Stained Glass",
+		blastResistance: 0.3,
 		transparent: true,
 		shadow: false,
 		hardness: 0.3,
@@ -4925,7 +6030,9 @@
 	},
 	{
 		name:"blueStainedGlass",
+		nameMcd:"blue_stained_glass",
 		Name: "Blue Stained Glass",
+		blastResistance: 0.3,
 		transparent: true,
 		shadow: false,
 		hardness: 0.3,
@@ -4935,7 +6042,9 @@
 	},
 	{
 		name:"blackStainedGlass",
+		nameMcd:"black_stained_glass",
 		Name: "Black Stained Glass",
+		blastResistance: 0.3,
 		transparent: true,
 		shadow: false,
 		hardness: 0.3,
@@ -4946,7 +6055,10 @@
 	
 	{
 		name: "yellowStainedGlassPane",
+		nameMcd:"yellow_stained_glass_pane",
 		Name: "Yellow Stained Glass Pane",
+		blockStates: "oakFence",
+		blastResistance: 0.3,
 		transparent: true,
 		shadow: false,
 		hardness: 0.3,
@@ -4957,7 +6069,10 @@
 	},
 	{
 		name: "whiteStainedGlassPane",
+		nameMcd:"white_stained_glass_pane",
 		Name: "White Stained Glass Pane",
+		blockStates: "oakFence",
+		blastResistance: 0.3,
 		transparent: true,
 		shadow: false,
 		hardness: 0.3,
@@ -4968,7 +6083,10 @@
 	},
 	{
 		name: "redStainedGlassPane",
+		nameMcd:"red_stained_glass_pane",
 		Name: "Red Stained Glass Pane",
+		blockStates: "oakFence",
+		blastResistance: 0.3,
 		transparent: true,
 		shadow: false,
 		hardness: 0.3,
@@ -4979,7 +6097,10 @@
 	},
 	{
 		name: "purpleStainedGlassPane",
+		nameMcd:"purple_stained_glass_pane",
 		Name: "Purple Stained Glass Pane",
+		blockStates: "oakFence",
+		blastResistance: 0.3,
 		transparent: true,
 		shadow: false,
 		hardness: 0.3,
@@ -4990,7 +6111,10 @@
 	},
 	{
 		name: "pinkStainedGlassPane",
+		nameMcd:"pink_stained_glass_pane",
 		Name: "Pink Stained Glass Pane",
+		blockStates: "oakFence",
+		blastResistance: 0.3,
 		transparent: true,
 		shadow: false,
 		hardness: 0.3,
@@ -5001,7 +6125,10 @@
 	},
 	{
 		name: "orangeStainedGlassPane",
+		nameMcd:"orange_stained_glass_pane",
 		Name: "Orange Stained Glass Pane",
+		blockStates: "oakFence",
+		blastResistance: 0.3,
 		transparent: true,
 		shadow: false,
 		hardness: 0.3,
@@ -5012,7 +6139,10 @@
 	},
 	{
 		name: "magentaStainedGlassPane",
+		nameMcd:"magenta_stained_glass_pane",
 		Name: "Magenta Stained Glass Pane",
+		blockStates: "oakFence",
+		blastResistance: 0.3,
 		transparent: true,
 		shadow: false,
 		hardness: 0.3,
@@ -5023,7 +6153,10 @@
 	},
 	{
 		name: "limeStainedGlassPane",
+		nameMcd:"lime_stained_glass_pane",
 		Name: "Lime Stained Glass Pane",
+		blockStates: "oakFence",
+		blastResistance: 0.3,
 		transparent: true,
 		shadow: false,
 		hardness: 0.3,
@@ -5034,7 +6167,10 @@
 	},
 	{
 		name: "lightGrayStainedGlassPane",
+		nameMcd:"light_gray_stained_glass_pane",
 		Name: "Light Gray Stained Glass Pane",
+		blockStates: "oakFence",
+		blastResistance: 0.3,
 		transparent: true,
 		shadow: false,
 		hardness: 0.3,
@@ -5045,7 +6181,10 @@
 	},
 	{
 		name: "lightBlueStainedGlassPane",
+		nameMcd:"light_blue_stained_glass_pane",
 		Name: "Light Blue Stained Glass Pane",
+		blockStates: "oakFence",
+		blastResistance: 0.3,
 		transparent: true,
 		shadow: false,
 		hardness: 0.3,
@@ -5056,7 +6195,10 @@
 	},
 	{
 		name: "greenStainedGlassPane",
+		nameMcd:"green_stained_glass_pane",
 		Name: "Green Stained Glass Pane",
+		blockStates: "oakFence",
+		blastResistance: 0.3,
 		transparent: true,
 		shadow: false,
 		hardness: 0.3,
@@ -5067,7 +6209,10 @@
 	},
 	{
 		name: "grayStainedGlassPane",
+		nameMcd:"gray_stained_glass_pane",
 		Name: "Gray Stained Glass Pane",
+		blockStates: "oakFence",
+		blastResistance: 0.3,
 		transparent: true,
 		shadow: false,
 		hardness: 0.3,
@@ -5078,7 +6223,10 @@
 	},
 	{
 		name: "cyanStainedGlassPane",
+		nameMcd:"cyan_stained_glass_pane",
 		Name: "Cyan Stained Glass Pane",
+		blockStates: "oakFence",
+		blastResistance: 0.3,
 		transparent: true,
 		shadow: false,
 		hardness: 0.3,
@@ -5089,7 +6237,10 @@
 	},
 	{
 		name: "brownStainedGlassPane",
+		nameMcd:"brown_stained_glass_pane",
 		Name: "Brown Stained Glass Pane",
+		blockStates: "oakFence",
+		blastResistance: 0.3,
 		transparent: true,
 		shadow: false,
 		hardness: 0.3,
@@ -5100,7 +6251,10 @@
 	},
 	{
 		name: "blueStainedGlassPane",
+		nameMcd:"blue_stained_glass_pane",
 		Name: "Blue Stained Glass Pane",
+		blockStates: "oakFence",
+		blastResistance: 0.3,
 		transparent: true,
 		shadow: false,
 		hardness: 0.3,
@@ -5111,7 +6265,10 @@
 	},
 	{
 		name: "blackStainedGlassPane",
+		nameMcd:"black_stained_glass_pane",
 		Name: "Black Stained Glass Pane",
+		blockStates: "oakFence",
+		blastResistance: 0.3,
 		transparent: true,
 		shadow: false,
 		hardness: 0.3,
@@ -5124,6 +6281,10 @@
 	{
 		name: "cobweb",
 		Name:"Cobweb",
+		harvestToolsNames: ["woodenSword","stoneSword","goldenSword","ironSword","diamondSword","netheriteSword","shears"],
+		decreaseLight: 1,
+		blastResistance: 4,
+		material: "coweb",
 		solid: false,
 		transparent: true,
 		shadow: false,
@@ -5138,7 +6299,11 @@
 	
 	{
 		name: "strippedCrimsonStem",
+		nameMcd:"stripped_crimson_stem",
 		Name: "Stripped Crimson Stem",
+		blockStates: "paleOakWood",
+		blastResistance: 2,
+		material: "mineable/axe",
 		textures: ["strippedCrimsonStemTop", "strippedCrimsonStem"],
 		hardness:2,
 		stemSound:true,
@@ -5154,7 +6319,11 @@
 	},
 	{
 		name: "strippedWarpedStem",
+		nameMcd:"stripped_warped_stem",
 		Name: "Stripped Warped Stem",
+		blockStates: "paleOakWood",
+		blastResistance: 2,
+		material: "mineable/axe",
 		textures: ["strippedWarpedStemTop", "strippedWarpedStem"],
 		hardness:2,
 		stemSound:true,
@@ -5171,285 +6340,556 @@
 	
 	{
 		name: "oakPressurePlate",
+		nameMcd:"oak_pressure_plate",
 		Name: "Oak Pressure Plate",
+		blockStates: "stonePressurePlate",
+		transparent: true,
+		solid: false,
+		blastResistance: 0.5,
+		material: "mineable/axe",
 		textures: "oakPlanks",
 		pressurePlate: true,
 		hardness:0.5,
 		type:"wood",
-		category:"redstone"
+		category:"redstone",
+		activate:function(x,y,z,block,ent,world){
+			if(this.heavyWeighted || this.lightWeighted) return //not going to do those yet
+			
+			if(!getBlockState(block,this.blockStatesMap.powered) && pressurePlateHasPressure(x,y,z,world)){
+				world.setBlock(x,y,z, setBlockState(block,this.blockStatesMap.powered,true), false,false,false,false)
+			}
+		},
+		onupdate:function(x,y,z,b,world,sx,sy,sz){
+			var block = world.getBlock(x,y,z)
+			if(getBlockState(block,this.blockStatesMap.powered) && !world.getPower(x,y,z)){
+				world.setPower(x,y,z,16,false)
+				world.spreadPower(x,y,z,16)
+				world.setBlockPower(x,y-1,z,"strong","top")
+				world.playSound(x,y,z, "click",1,0.6)
+				
+				var me = this
+				var i = setInterval(function(){
+					if(pressurePlateHasPressure(x,y,z,world)) return
+					
+					clearInterval(i)
+					world.setTimeout(function(){
+						world.setBlock(x,y,z,setBlockState(block,this.blockStatesMap.powered,false), false,false,false,false)
+						world.setPower(x,y,z,0,false)
+						world.unspreadPower(x,y,z,16,false)
+						world.setBlockPower(x,y-1,z,null,"top")
+						world.playSound(x,y,z, "click",1,0.5)
+					}, tickTime*20, x,y,z)
+				}, tickTime*2)
+			}
+		}
 	},
 	{
 		name: "birchPressurePlate",
+		nameMcd:"birch_pressure_plate",
 		Name: "Birch Pressure Plate",
+		blockStates: "stonePressurePlate",
+		transparent: true,
+		solid: false,
+		blastResistance: 0.5,
+		material: "mineable/axe",
 		textures: "birchPlanks",
 		pressurePlate: true,
 		hardness:0.5,
 		type:"wood",
-		category:"redstone"
+		category:"redstone",
+		copyPropertiesHere:"oakPressurePlate"
 	},
 	{
 		name: "sprucePressurePlate",
+		nameMcd:"spruce_pressure_plate",
 		Name: "Spruce Pressure Plate",
+		blockStates: "stonePressurePlate",
+		transparent: true,
+		solid: false,
+		blastResistance: 0.5,
+		material: "mineable/axe",
 		textures: "sprucePlanks",
 		pressurePlate: true,
 		hardness:0.5,
 		type:"wood",
-		category:"redstone"
+		category:"redstone",
+		copyPropertiesHere:"oakPressurePlate"
 	},
 	{
 		name: "junglePressurePlate",
+		nameMcd:"jungle_pressure_plate",
 		Name: "Jungle Pressure Plate",
+		blockStates: "stonePressurePlate",
+		transparent: true,
+		solid: false,
+		blastResistance: 0.5,
+		material: "mineable/axe",
 		textures: "junglePlanks",
 		pressurePlate: true,
 		hardness:0.5,
 		type:"wood",
-		category:"redstone"
+		category:"redstone",
+		copyPropertiesHere:"oakPressurePlate"
 	},
 	{
 		name: "acaciaPressurePlate",
+		nameMcd:"acacia_pressure_plate",
 		Name: "Acacia Pressure Plate",
+		blockStates: "stonePressurePlate",
+		transparent: true,
+		solid: false,
+		blastResistance: 0.5,
+		material: "mineable/axe",
 		textures: "acaciaPlanks",
 		pressurePlate: true,
 		hardness:0.5,
 		type:"wood",
-		category:"redstone"
+		category:"redstone",
+		copyPropertiesHere:"oakPressurePlate"
 	},
 	{
 		name:"darkOakPressurePlate",
+		nameMcd:"dark_oak_pressure_plate",
 		Name: "Dark Oak Pressure Plate",
+		blockStates: "stonePressurePlate",
+		transparent: true,
+		solid: false,
+		blastResistance: 0.5,
+		material: "mineable/axe",
 		textures: "darkOakPlanks",
 		pressurePlate: true,
 		hardness:0.5,
 		type:"wood",
-		category:"redstone"
+		category:"redstone",
+		copyPropertiesHere:"oakPressurePlate"
 	},
 	{
 		name: "warpedPressurePlate",
+		nameMcd:"warped_pressure_plate",
 		Name: "Warped Pressure Plate",
+		blockStates: "stonePressurePlate",
+		transparent: true,
+		solid: false,
+		blastResistance: 0.5,
+		material: "mineable/axe",
 		textures: "warpedPlanks",
 		pressurePlate: true,
 		hardness:0.5,
 		type:"wood",
-		category:"redstone"
+		category:"redstone",
+		copyPropertiesHere:"oakPressurePlate"
 	},
 	{
 		name: "crimsonPressurePlate",
+		nameMcd:"crimson_pressure_plate",
 		Name: "Crimson Pressure Plate",
+		blockStates: "stonePressurePlate",
+		transparent: true,
+		solid: false,
+		blastResistance: 0.5,
+		material: "mineable/axe",
 		textures: "crimsonPlanks",
 		pressurePlate: true,
 		hardness:0.5,
 		type:"wood",
-		category:"redstone"
+		category:"redstone",
+		copyPropertiesHere:"oakPressurePlate"
 	},
 	{
 		name: "stonePressurePlate",
+		nameMcd:"stone_pressure_plate",
 		Name: "Stone Pressure Plate",
+		harvestToolsNames: "stone",
+		blockStates: [{"name":"powered","values":[false,true]}],
+		transparent: true,
+		solid: false,
+		blastResistance: 0.5,
+		material: "mineable/pickaxe",
 		textures: "stone",
 		pressurePlate: true,
 		type:"stone",
 		hardness:0.5,
-		category:"redstone"
+		category:"redstone",
+		copyPropertiesHere:"oakPressurePlate"
 	},
 	{
 		name: "polishedBlackstonePressurePlate",
+		nameMcd:"polished_blackstone_pressure_plate",
+		harvestToolsNames: "stone",
+		blockStates: "stonePressurePlate",
+		transparent: true,
+		solid: false,
+		blastResistance: 0.5,
+		material: "mineable/pickaxe",
 		textures: "polishedBlackstone",
 		pressurePlate: true,
 		type:"stone",
 		hardness:0.5,
-		category:"redstone"
+		category:"redstone",
+		copyPropertiesHere:"oakPressurePlate"
 	},
 	{
 		name: "lightWeightedPressurePlate",
+		nameMcd:"light_weighted_pressure_plate",
+		harvestToolsNames: "stone",
+		blockStates: [{"name":"power","values":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15"]}],
+		transparent: true,
+		solid: false,
+		blastResistance: 0.5,
+		material: "mineable/pickaxe",
 		textures: "goldBlock",
 		pressurePlate: true,
 		type:"stone",
 		hardness:0.5,
 		lightWeighted:true,
-		category:"redstone"
+		category:"redstone",
+		copyPropertiesHere:"oakPressurePlate"
 	},
 	{
 		name: "heavyWeightedPressurePlate",
+		nameMcd:"heavy_weighted_pressure_plate",
+		harvestToolsNames: "stone",
+		blockStates: "lightWeightedPressurePlate",
+		transparent: true,
+		solid: false,
+		blastResistance: 0.5,
+		material: "mineable/pickaxe",
 		textures: "ironBlock",
 		pressurePlate: true,
 		type:"stone",
 		hardness:0.5,
 		heavyWeighted:true,
-		category:"redstone"
+		category:"redstone",
+		copyPropertiesHere:"oakPressurePlate"
 	},
 	{
 		name:"oakButton",
+		nameMcd:"oak_button",
 		Name: "Oak Button",
+		blockStates: "lever",
+		solid: false,
+		hardness: 0.5,
+		blastResistance: 0.5,
+		material: "mineable/axe",
 		textures:"oakPlanks",
 		button:true,
 		transparent: true,
 		shadow:false,
-		category:"redstone"
+		category:"redstone",
+		onclick:function(x,y,z,world){
+			let block = world.getBlock(x,y,z)
+			var target = setBlockState(block,this.blockStatesMap.powered, true)
+			if(block !== target){
+				world.setBlock(x,y,z,target)
+			}
+		},
+		projectileHit:function(x,y,z,ent){
+			this.onclick(x,y,z,ent.world)
+		},
+		onupdate:function(x,y,z,b,world,sx,sy,sz){
+			var ax=x,ay=y,az=z, dir
+			var block = world.getBlock(x,y,z)
+			if(getBlockState(block,this.blockStatesMap.face) === "ceiling"){
+				ay --
+				dir = "top"
+			}else if(getBlockState(block,this.blockStatesMap.face) === "floor"){
+				ay ++
+				dir = "bottom"
+			}else if(getBlockState(block,this.blockStatesMap.facing) === "north"){
+				az++
+				dir = "south"
+			}else if(getBlockState(block,this.blockStatesMap.facing) === "south"){
+				az--
+				dir = "north"
+			}else if(getBlockState(block,this.blockStatesMap.facing) === "east"){
+				ax++
+				dir = "east"
+			}else if(getBlockState(block,this.blockStatesMap.facing) === "west"){
+				ax--
+				dir = "west"
+			}
+			var hasPower = getBlockState(block,this.blockStatesMap.powered)
+			if(hasPower && !world.getPower(x,y,z)){
+				let target = setBlockState(block,this.blockStatesMap.powered, false)
+				world.setPower(x,y,z,16,false)
+				world.spreadPower(x,y,z,16)
+				world.setBlockPower(ax,ay,az,"strong",dir)
+				world.playSound(x,y,z, "click",1,0.6)
+				
+				world.setTimeout(function(){
+					world.setBlock(x,y,z,target, false,false,false,false)
+					world.setPower(x,y,z,0,false)
+					world.unspreadPower(x,y,z,16,false)
+					world.setBlockPower(ax,ay,az,null,dir)
+					world.playSound(x,y,z, "click",1,0.5)
+				},this.stone ? tickTime*20 : tickTime*30, x,y,z)
+			}
+		}
 	},
 	{
 		name:"birchButton",
+		nameMcd:"birch_button",
 		Name: "Birch Button",
+		blockStates: "lever",
+		solid: false,
+		hardness: 0.5,
+		blastResistance: 0.5,
+		material: "mineable/axe",
 		textures:"birchPlanks",
 		button:true,
 		transparent: true,
 		shadow:false,
-		category:"redstone"
+		category:"redstone",
+		copyPropertiesHere:"oakButton"
 	},
 	{
 		name:"acaciaButton",
+		nameMcd:"acacia_button",
 		Name: "Acacia Button",
+		blockStates: "lever",
+		solid: false,
+		hardness: 0.5,
+		blastResistance: 0.5,
+		material: "mineable/axe",
 		textures:"acaciaPlanks",
 		button:true,
 		transparent: true,
 		shadow:false,
-		category:"redstone"
+		category:"redstone",
+		copyPropertiesHere:"oakButton"
 	},
 	{
 		name:"darkOakButton",
+		nameMcd:"dark_oak_button",
 		Name: "Dark Oak Button",
+		blockStates: "lever",
+		solid: false,
+		hardness: 0.5,
+		blastResistance: 0.5,
+		material: "mineable/axe",
 		textures:"darkOakPlanks",
 		button:true,
 		transparent: true,
 		shadow:false,
-		category:"redstone"
+		category:"redstone",
+		copyPropertiesHere:"oakButton"
 	},
 	{
 		name:"jungleButton",
+		nameMcd:"jungle_button",
 		Name: "Jungle Button",
+		blockStates: "lever",
+		solid: false,
+		hardness: 0.5,
+		blastResistance: 0.5,
+		material: "mineable/axe",
 		textures:"junglePlanks",
 		button:true,
 		transparent: true,
 		shadow:false,
-		category:"redstone"
+		category:"redstone",
+		copyPropertiesHere:"oakButton"
 	},
 	{
 		name:"spruceButton",
+		nameMcd:"spruce_button",
 		Name: "Spruce Button",
+		blockStates: "lever",
+		solid: false,
+		hardness: 0.5,
+		blastResistance: 0.5,
+		material: "mineable/axe",
 		textures:"sprucePlanks",
 		button:true,
 		transparent: true,
 		shadow:false,
-		category:"redstone"
+		category:"redstone",
+		copyPropertiesHere:"oakButton"
 	},
 	{
 		name:"warpedButton",
+		nameMcd:"warped_button",
 		Name: "Warped Button",
+		blockStates: "lever",
+		solid: false,
+		hardness: 0.5,
+		blastResistance: 0.5,
+		material: "mineable/axe",
 		textures:"warpedPlanks",
 		button:true,
 		transparent: true,
 		shadow:false,
-		category:"redstone"
+		category:"redstone",
+		copyPropertiesHere:"oakButton"
 	},
 	{
 		name:"crimsonButton",
+		nameMcd:"crimson_button",
 		Name: "Crimson Button",
+		blockStates: "lever",
+		solid: false,
+		hardness: 0.5,
+		blastResistance: 0.5,
+		material: "mineable/axe",
 		textures:"crimsonPlanks",
 		button:true,
 		transparent: true,
 		shadow:false,
-		category:"redstone"
+		category:"redstone",
+		copyPropertiesHere:"oakButton"
 	},
 	{
 		name:"polishedBlackstoneButton",
+		nameMcd:"polished_blackstone_button",
 		Name: "Polished Blackstone Button",
+		blockStates: "lever",
+		solid: false,
+		hardness: 0.5,
+		blastResistance: 0.5,
+		material: "mineable/pickaxe",
 		textures:"polishedBlackstone",
 		button:true,
 		transparent:true,
 		shadow:false,
 		stone:true,
-		category:"redstone"
+		category:"redstone",
+		copyPropertiesHere:"oakButton"
 	},
 	{
 		name:"copperBlock",
+		nameMcd:"copper_block",
 		Name:"Block of Copper",
+		harvestToolsNames: "ironOre",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
 		category:"build"
 	},
 	
 	{
 		name:"crackedPolishedBlackstoneBricks",
+		nameMcd:"cracked_polished_blackstone_bricks",
 		Name:"Cracked Polished Blackstone Bricks",
+		harvestToolsNames: "stone",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
 		category:"build"
 	},
 	{
 		name:"crackedStoneBricks",
+		nameMcd:"cracked_stone_bricks",
 		Name:"Cracked Stone Bricks",
+		harvestToolsNames: "stone",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
 		category:"build"
 	},
 	
 	{
 		name:"woodenHoe",
+		nameMcd:"wooden_hoe",
 		Name:"Wooden Hoe",
+		stackSize: 1,
 		item: true,
 		hoe: true,
 		durability: 59,
 		mineSpeed:2,
 		attackDamage: 1,
 		attackSpeed:1,
-		category:"tools"
+		category:"tools",
+		serveronuse:function(x,y,z, block,world,face,item,p){
+			if((blockData[block].name === "grass" || block === blockIds.dirt) && !world.getBlock(x,y+1,z)){
+				world.setBlock(x,y,z,blockIds.farmland)
+				item.durability --
+			}
+			if(block === blockIds.rootedDirt){
+				world.setBlock(ox,oy,oz,blockIds.dirt)
+				world.addItems(ox, oy+0.5, oz, 0, 0, 0, blockIds.hangingRoots, true)
+				item.durability --
+			}
+		}
 	},
 	{
 		name:"stoneHoe",
+		nameMcd:"stone_hoe",
 		Name:"Stone Hoe",
+		stackSize: 1,
 		item: true,
 		hoe: true,
 		durability: 131,
 		mineSpeed:4,
 		attackDamage: 1,
 		attackSpeed:2,
-		material:"cobblestone",
-		category:"tools"
+		repairMaterial:"cobblestone",
+		category:"tools",
+		copyPropertiesHere:"woodenHoe"
 	},
 	{
 		name:"ironHoe",
+		nameMcd:"iron_hoe",
 		Name:"Iron Hoe",
+		stackSize: 1,
 		item: true,
 		hoe: true,
 		durability: 250,
 		mineSpeed:6,
 		attackDamage: 1,
 		attackSpeed:3,
-		material:"ironIngot",
-		category:"tools"
+		repairMaterial:"ironIngot",
+		category:"tools",
+		copyPropertiesHere:"woodenHoe"
 	},
 	{
 		name:"goldenHoe",
+		nameMcd:"golden_hoe",
 		Name:"Golden Hoe",
+		stackSize: 1,
 		item: true,
 		hoe: true,
 		durability: 32,
 		mineSpeed:12,
 		attackDamage: 1,
 		attackSpeed:1,
-		material:"goldIngot",
-		category:"tools"
+		repairMaterial:"goldIngot",
+		category:"tools",
+		copyPropertiesHere:"woodenHoe"
 	},
 	{
 		name:"diamondHoe",
+		nameMcd:"diamond_hoe",
 		Name:"Diamond Hoe",
+		stackSize: 1,
 		item: true,
 		hoe: true,
 		durability: 1561,
 		mineSpeed:8,
 		attackDamage: 1,
 		attackSpeed:4,
-		material:"diamond",
-		category:"tools"
+		repairMaterial:"diamond",
+		category:"tools",
+		copyPropertiesHere:"woodenHoe"
 	},
 	
 	{
 		name:"podzol",
 		Name:"Podzol",
+		blockStates: "grass",
+		material: "mineable/shovel",
 		textures:["dirt","podzolTop","podzolSide"],
 		category:"nature",
 		hardness:0.5,
 		blastResistance:0.5,
 		type:"ground",
 		onupdate:function(x,y,z,b,world,sx,sy,sz){
-			let top = world.getBlock(x,y+1,z)
-			let isSnow = blockData[top].name === "snow" || blockData[top].name === "snowBlock"
-			if(b === blockIds.podzol && isSnow){
-				world.setBlock(x,y,z,blockIds.podzol | CROSS,false,false,false,false)
-			}else if(b === (blockIds.podzol | CROSS) && !isSnow){
-				world.setBlock(x,y,z,blockIds.podzol,false,false,false,false)
+			var top = world.getBlock(x,y+1,z)
+			var isSnow = blockData[top].name === "snow" || blockData[top].name === "snowBlock"
+			let curIsSnow = getBlockStateValue(b, this.blockStatesMap.snowy)
+			if(!curIsSnow && isSnow){
+				world.setBlock(x,y,z, setBlockStateValue(b,this.blockStatesMap.snowy,1))
+			}else if(curIsSnow && !isSnow){
+				world.setBlock(x,y,z, setBlockStateValue(b,this.blockStatesMap.snowy,0))
 			}
 		},
 		compostChance:0.3,
@@ -5460,21 +6900,33 @@
 	
 	{
 		name:"rawIronBlock",
+		nameMcd:"raw_iron_block",
 		Name:"Block of Raw Iron",
+		harvestToolsNames: "ironOre",
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
 		type:"rock2",
 		hardness:5,
 		category:"build"
 	},
 	{
 		name:"rawGoldBlock",
+		nameMcd:"raw_gold_block",
 		Name:"Block of Raw Gold",
+		harvestToolsNames: "goldOre",
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
 		type:"rock3",
 		hardness:5,
 		category:"build"
 	},
 	{
 		name:"rawCopperBlock",
+		nameMcd:"raw_copper_block",
 		Name:"Block of Raw Copper",
+		harvestToolsNames: "ironOre",
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
 		type:"rock2",
 		hardness:5,
 		category:"build"
@@ -5482,76 +6934,95 @@
 	
 	{
 		name:"netheriteScrap",
+		nameMcd:"netherite_scrap",
 		Name:"Netherite Scrap",
 		item:true,
 		category:"items"
 	},
 	{
 		name:"netheriteIngot",
+		nameMcd:"netherite_ingot",
 		Name:"Netherite Ingot",
 		item:true,
 		category:"items"
 	},
 	{
 		name:"netheritePickaxe",
+		nameMcd:"netherite_pickaxe",
 		Name:"Netherite Pickaxe",
+		stackSize: 1,
 		item: true,
 		pickaxe: true,
 		mineSpeed: 9,
 		durability: 2031,
 		attackDamage: 6,
-		material:"netheriteIngot",
+		repairMaterial:"netheriteIngot",
 		category:"tools"
 	},
 	{
 		name:"netheriteSword",
+		nameMcd:"netherite_sword",
 		Name:"Netherite Sword",
+		stackSize: 1,
 		item: true,
 		sword: true,
 		durability: 2031,
 		attackDamage: 8,
-		material:"netheriteIngot",
+		repairMaterial:"netheriteIngot",
 		category:"tools"
 	},
 	{
 		name:"netheriteAxe",
+		nameMcd:"netherite_axe",
 		Name:"Netherite Axe",
+		stackSize: 1,
 		item: true,
 		axe: true,
 		durability: 2031,
 		mineSpeed:9,
 		attackDamage: 10,
 		attackSpeed:1,
-		material:"netheriteIngot",
-		category:"tools"
+		repairMaterial:"netheriteIngot",
+		category:"tools",
+		copyPropertiesHere:"woodenAxe"
 	},
 	{
 		name:"netheriteShovel",
+		nameMcd:"netherite_shovel",
 		Name:"Netherite Shovel",
+		stackSize: 1,
 		item: true,
 		shovel: true,
 		durability: 2031,
 		mineSpeed:9,
 		attackDamage: 6,
-		material:"netheriteIngot",
-		category:"tools"
+		repairMaterial:"netheriteIngot",
+		category:"tools",
+		copyPropertiesHere:"woodenShovel"
 	},
 	{
 		name:"netheriteHoe",
+		nameMcd:"netherite_hoe",
 		Name:"Nethrite Hoe",
+		stackSize: 1,
 		item: true,
 		hoe: true,
 		durability: 2031,
 		mineSpeed:9,
 		attackDamage: 1,
 		attackSpeed:4,
-		material:"netheriteIngot",
-		category:"tools"
+		repairMaterial:"netheriteIngot",
+		category:"tools",
+		copyPropertiesHere:"woodenHoe"
 	},
 	
 	{
 		name:"cartographyTable",
+		nameMcd:"cartography_table",
 		Name:"Cartograpgy Table",
+		hardness: 2.5,
+		blastResistance: 2.5,
+		material: "mineable/axe",
 		textures: ["cartographyTableSide3","cartographyTableTop","cartographyTableSide3","cartographyTableSide1","cartographyTableSide2","cartographyTableSide3"],
 		rotate:true,
 		category:"items"
@@ -5560,6 +7031,10 @@
 	{
 		name:"cake",
 		Name:"Cake",
+		blockStates: [{"name":"bites","values":["0","1","2","3","4","5","6"]}],
+		hardness: 0.5,
+		blastResistance: 0.5,
+		stackSize: 1,
 		textures:["cakeBottom","cakeTop","cakeSide"],
 		cake:true,
 		transparent:true,
@@ -5571,13 +7046,22 @@
 	
 	{
 		name:"smithingTable",
+		nameMcd:"smithing_table",
 		Name:"Smithing Table",
+		hardness: 2.5,
+		blastResistance: 2.5,
+		material: "mineable/axe",
 		textures:["smithingTableBottom","smithingTableTop","smithingTableFront","smithingTableSide"],
 		category:"items"
 	},
 	{
 		name:"stonecutter",
 		Name:"Stonecutter",
+		harvestToolsNames: "stone",
+		blockStates: "wallTorch",
+		hardness: 3.5,
+		blastResistance: 3.5,
+		material: "mineable/pickaxe",
 		textures:["stonecutterBottom","stonecutterTop","stonecutterSide"],
 		transparent:true,
 		stonecutter:true,
@@ -5585,34 +7069,51 @@
 	},
 	{
 		name:"itemFrame",
+		nameMcd:"item_frame",
 		Name:"Item Frame",
+		item: true,
 		transparent:true,
 		itemFrame:true,
+		copyFromProperties:["itemFrame"],
 		flatIcon:true,
 		iconTexture:"itemFrameIcon",
-		category:"items"
+		category:"items",
+		tagBits:null,
+		shapeName:"itemFrame",
+		serveronuse: (x,y,z, block,world,face,item,p) => {
+			item.amount--
+			var rot = round(p.ry*4/Math.PId)
+			let pos = getPosition([x,y,z],face)
+			let ent = new entities[entityIds.itemFrame](pos[0],pos[1],pos[2])
+			ent.rot(rot)
+			world.addEntity(ent)
+		},
 	},
 	
 	{
 		name:"enderPearl",
+		nameMcd:"ender_pearl",
 		Name:"Ender Pearl",
+		stackSize: 16,
 		item:true,
 		serveronuse: (x,y,z, block,world,face,item,p) => {
 			item.amount--
 			world.addEntity(new entities[entityIds.EnderPearl](p.x,p.y,p.z, p.direction.x, p.direction.y, p.direction.z, p.id))
 		},
 		useAnywhere:true,
-		category:"items"
+		category:"items",
 	},
 	
 	{
 		name:"ironNugget",
+		nameMcd:"iron_nugget",
 		Name:"Iron Nugget",
 		item:true,
 		category:"items"
 	},
 	{
 		name:"goldNugget",
+		nameMcd:"gold_nugget",
 		Name:"Gold Nugget",
 		item:true,
 		category:"items"
@@ -5621,13 +7122,21 @@
 	{
 		name:"pumpkin",
 		Name:"Pumpkin",
+		hardness: 1,
+		blastResistance: 1,
+		material: "gourd;mineable/axe",
 		textures:["pumpkinSide","pumpkinTop","pumpkinSide"],
 		compostChance:0.65,
 		category:"nature"
 	},
 	{
 		name:"carvedPumpkin",
+		nameMcd:"carved_pumpkin",
 		Name:"Carved Pumpkin",
+		blockStates: "wallTorch",
+		hardness: 1,
+		blastResistance: 1,
+		material: "plant;mineable/axe",
 		textures:["pumpkinSide","pumpkinTop","pumpkinSide","carvedPumpkin","pumpkinSide","pumpkinSide"],
 		rotate:true,
 		compostChance:0.65,
@@ -5635,7 +7144,12 @@
 	},
 	{
 		name:"jackOLantern",
+		nameMcd:"jack_o_lantern",
 		Name:"Jack o'Lantern",
+		blockStates: "wallTorch",
+		hardness: 1,
+		blastResistance: 1,
+		material: "gourd;mineable/axe",
 		textures:["pumpkinSide","pumpkinTop","pumpkinSide","jackOLantern","pumpkinSide","pumpkinSide"],
 		lightLevel:15,
 		rotate:true,
@@ -5646,13 +7160,23 @@
 	{
 		name:"shears",
 		Name:"Shears",
+		stackSize: 1,
+		durability: 238,
 		item:true,
 		shears:true,
-		category:"items"
+		category:"items",
+		serveronuse:function(x,y,z, block,world,face,item,p){
+			if(block === blockIds.pumpkin){
+				world.setBlock(x,y,z,blockIds.carvedPumpkin)
+				world.addItems(x, y+0.5, z, 0, 0, 0, blockIds.pumpkinSeeds, true, 4)
+				item.durability --
+			}
+		}
 	},
 	
 	{
 		name:"pumpkinSeeds",
+		nameMcd:"pumpkin_seeds",
 		Name:"Pumpkin Seeds",
 		item:true,
 		compostChance:0.3,
@@ -5660,6 +7184,7 @@
 	},
 	{
 		name:"melonSeeds",
+		nameMcd:"melon_seeds",
 		Name:"Watermelon Seeds",
 		item:true,
 		compostChance:0.3,
@@ -5669,6 +7194,8 @@
 	{
 		name:"melon",
 		Name:"Watermelon",
+		blastResistance: 1,
+		material: "gourd;mineable/axe",
 		textures:["melonSide","melonTop","melonSide"],
 		hardness:1,
 		drop:"melonSlice",
@@ -5678,6 +7205,7 @@
 	},
 	{
 		name:"melonSlice",
+		nameMcd:"melon_slice",
 		Name:"Slice of Watermelon",
 		item:true,
 		edible: true,
@@ -5689,23 +7217,29 @@
 	
 	{
 		name:"redstoneLamp",
+		nameMcd:"redstone_lamp",
 		Name:"Redstone Lamp",
+		blockStates: "redstoneOre",
+		hardness: 0.3,
+		blastResistance: 0.3,
 		//if you chang this, change colored lamps too
 		onpowerupdate:function(x,y,z,sx,sy,sz,blockPowerChanged,world){
-			var power = world.getRedstonePower(x,y,z) || world.getSurroundingBlockPower(x,y,z)
-			var block = this.id
-			if(power){
-				block = this.id | SLAB
-			}
-			if(world.getBlock(x,y,z) !== block) world.setBlock(x,y,z,block,false,false,false,false)
+			var power = world.getRedstonePower(x,y,z) || world.getSurroundingBlockPower(x,y,z) ? true : false
+			var block = world.getBlock(x,y,z)
+			let target = setBlockState(block,this.blockStatesMap.lit,power)
+			if(block !== target) world.setBlock(x,y,z,target,false,false,false,false)
 		},
 		onset:function(x,y,z,world){
 			this.onpowerupdate(x,y,z,null,null,null,null,world)
 		},
+		init:function(){
+			blockData[this.id+this.blockStatesMap.lit.true].lightLevel = 15
+		},
 		category:"redstone"
 	},
 	{
 		name:"glowstoneDust",
+		nameMcd:"glowstone_dust",
 		Name:"Glowstone Dust",
 		item:true,
 		category:"items"
@@ -5719,19 +7253,25 @@
 	},
 	
 	{
-		name: "endPortalFrame", 
+		name: "endPortalFrame",
+		nameMcd:"end_portal_frame", 
 		Name:"End Portal Frame",
+		blockStates: [{"name":"eye","values":[false,true]},{"name":"facing","values":["north","south","west","east"]}],
 		textures: ["endStone", "endPortalFrameTop", "endPortalFrameSide"],
 		category:"items",
 		blastResistance:3600000,
 		hardness:Infinity,
 		lightLevel:1,
 		glassSound: true,
-		eyeplace:function(x,y,z,world){
-			this.findFullFrame(x+1,y,z,world)
-			this.findFullFrame(x-1,y,z,world)
-			this.findFullFrame(x,y,z+1,world)
-			this.findFullFrame(x,y,z-1,world)
+		onclick:function(x,y,z,world,p,holdObj){
+			if(holdObj && blockData[holdObj.id].name === "eyeOfEnder"){
+				world.setBlock(x,y,z, setBlockState(world.getBlock(x,y,z),this.blockStatesMap.eye,true))
+				this.findFullFrame(x+1,y,z,world)
+				this.findFullFrame(x-1,y,z,world)
+				this.findFullFrame(x,y,z+1,world)
+				this.findFullFrame(x,y,z-1,world)
+				world.blockSound(holdObj.id, "place", x,y,z)
+			}else return true
 		},
 		findFullFrame:function(x,y,z,world){
 			if(blockData[world.getBlock(x,y,z)].solid) return
@@ -5767,18 +7307,19 @@
 			}
 			//check if frame is correct
 			x = minX-1, z = minZ-1
-			if(world.getBlock(x+1,y,z) !== (this.id | SLAB | SOUTH)) return
-			if(world.getBlock(x+2,y,z) !== (this.id | SLAB | SOUTH)) return
-			if(world.getBlock(x+3,y,z) !== (this.id | SLAB | SOUTH)) return
-			if(world.getBlock(x+4,y,z+1) !== (this.id | SLAB | EAST)) return
-			if(world.getBlock(x+4,y,z+2) !== (this.id | SLAB | EAST)) return
-			if(world.getBlock(x+4,y,z+3) !== (this.id | SLAB | EAST)) return
-			if(world.getBlock(x+1,y,z+4) !== (this.id | SLAB | NORTH)) return
-			if(world.getBlock(x+2,y,z+4) !== (this.id | SLAB | NORTH)) return
-			if(world.getBlock(x+3,y,z+4) !== (this.id | SLAB | NORTH)) return
-			if(world.getBlock(x,y,z+1) !== (this.id | SLAB | WEST)) return
-			if(world.getBlock(x,y,z+2) !== (this.id | SLAB | WEST)) return
-			if(world.getBlock(x,y,z+3) !== (this.id | SLAB | WEST)) return
+			let b
+			if(world.getBlock(x+1,y,z) !== this.id + this.blockStatesMap.eye.true + this.blockStatesMap.facing.south) return
+			if(world.getBlock(x+2,y,z) !== this.id + this.blockStatesMap.eye.true + this.blockStatesMap.facing.south) return
+			if(world.getBlock(x+3,y,z) !== this.id + this.blockStatesMap.eye.true + this.blockStatesMap.facing.south) return
+			if(world.getBlock(x+4,y,z+1) !== this.id + this.blockStatesMap.eye.true + this.blockStatesMap.facing.east) return
+			if(world.getBlock(x+4,y,z+2) !== this.id + this.blockStatesMap.eye.true + this.blockStatesMap.facing.east) return
+			if(world.getBlock(x+4,y,z+3) !== this.id + this.blockStatesMap.eye.true + this.blockStatesMap.facing.east) return
+			if(world.getBlock(x+1,y,z+4) !== this.id + this.blockStatesMap.eye.true + this.blockStatesMap.facing.north) return
+			if(world.getBlock(x+2,y,z+4) !== this.id + this.blockStatesMap.eye.true + this.blockStatesMap.facing.north) return
+			if(world.getBlock(x+3,y,z+4) !== this.id + this.blockStatesMap.eye.true + this.blockStatesMap.facing.north) return
+			if(world.getBlock(x,y,z+1) !== this.id + this.blockStatesMap.eye.true + this.blockStatesMap.facing.west) return
+			if(world.getBlock(x,y,z+2) !== this.id + this.blockStatesMap.eye.true + this.blockStatesMap.facing.west) return
+			if(world.getBlock(x,y,z+3) !== this.id + this.blockStatesMap.eye.true + this.blockStatesMap.facing.west) return
 
 			//place the frame
 			world.setBlock(x+1,y,z+1,blockIds.endPortal)
@@ -5796,6 +7337,7 @@
 	},
 	{
 		name: "eyeOfEnder",
+		nameMcd:"enderEye",
 		Name:"Eye of Ender",
 		flatIcon:true,
 		item:true,
@@ -5804,14 +7346,22 @@
 	},
 	{
 		name:"endStone",
+		nameMcd:"end_stone",
 		Name:"End Stone",
+		harvestToolsNames: "stone",
+		hardness: 3,
+		blastResistance: 9,
+		material: "mineable/pickaxe",
 		category:"nature",
 		randomRotate:true,randomRotateTop:true,randomRotateBottom:true,randomRotateNorth:true,randomRotateSouth:true,randomRotateEast:true,randomRotateWest:true
 	},
 	
 	{
 		name:"redSand",
+		nameMcd:"red_sand",
 		Name:"Red Sand",
+		blastResistance: 0.5,
+		material: "mineable/shovel",
 		hardness:0.5,
 		fallingDust:[178/255, 94/255, 26/255],
 		onupdate: function(x,y,z,b,world,sx,sy,sz){
@@ -5826,36 +7376,60 @@
 	},
 	{
 		name:"redSandstone",
+		nameMcd:"red_sandstone",
 		Name:"Red Sandstone",
+		harvestToolsNames: "stone",
+		hardness: 0.8,
+		blastResistance: 0.8,
+		material: "mineable/pickaxe",
 		textures: ["redSandstoneBottom", "redSandstoneTop", "redSandstone"],
 		category:"nature",
 		randomRotate:true,randomRotateTop:true,randomRotateBottom:true,
 		craftSlabs:true, craftStairs:true
 	},
-	{ name:"chiseledRedSandstone",
+	{ name:"chiseledRedSandstone", nameMcd:"chiseled_red_sandstone",
 		Name:"Chiseled Red Sandstone",
+		harvestToolsNames: "stone",
+		hardness: 0.8,
+		blastResistance: 0.8,
+		material: "mineable/pickaxe",
 		textures: ["redSandstoneBottom", "redSandstoneTop","chiseledRedSandstone"],
 		category:"build",
 		randomRotate:true,randomRotateTop:true,randomRotateBottom:true
 	},
-	{ name:"cutRedSandstone",
+	{ name:"cutRedSandstone", nameMcd:"cut_red_sandstone",
 		Name:"Cut Red Sandstone",
+		harvestToolsNames: "stone",
+		hardness: 0.8,
+		blastResistance: 0.8,
+		material: "mineable/pickaxe",
 		textures: ["redSandstoneBottom", "redSandstoneTop","cutRedSandstone"],
 		category:"build",
 		randomRotate:true,randomRotateTop:true,randomRotateBottom:true,
 		craftSlabs:true, craftStairs:true
 	},
-	{ name:"smoothRedSandstone", Name:"Smooth Red Sandstone", textures:"redSandstoneTop", category:"nature", randomRotate:true,randomRotateTop:true,randomRotateBottom:true,randomRotateNorth:true,randomRotateSouth:true,randomRotateEast:true,randomRotateWest:true, craftSlabs:true, craftStairs:true },
+	{ name:"smoothRedSandstone", nameMcd:"smooth_red_sandstone", Name:"Smooth Red Sandstone", harvestToolsNames: "stone", hardness: 2, blastResistance: 6, material: "mineable/pickaxe", textures:"redSandstoneTop", category:"nature", randomRotate:true,randomRotateTop:true,randomRotateBottom:true,randomRotateNorth:true,randomRotateSouth:true,randomRotateEast:true,randomRotateWest:true, craftSlabs:true, craftStairs:true },
 	
 	{
 		name:"purpurBlock",
+		nameMcd:"purpur_block",
 		Name:"Purpur Block",
+		harvestToolsNames: "stone",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
 		category:"build",
 		craftSlabs:true, craftStairs:true
 	},
 	{
 		name:"purpurPillar",
+		nameMcd:"purpur_pillar",
 		Name:"Purpur Pillar",
+		harvestToolsNames: "stone",
+		blockStates: "paleOakWood",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
 		textures:["purpurPillarTop","purpurPillar"],
 		category:"build"
 	},
@@ -5869,30 +7443,46 @@
 	{
 		name:"prismarine",
 		Name:"Prismarine",
+		harvestToolsNames: "stone",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
 		category:"build",
 		craftSlabs:true, craftStairs:true
 	},
 	{
 		name:"prismarineBricks",
+		nameMcd:"prismarine_bricks",
 		Name:"Prismarine Bricks",
+		harvestToolsNames: "stone",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
 		category:"build",
 		craftSlabs:true, craftStairs:true
 	},
 	{
 		name:"darkPrismarine",
+		nameMcd:"dark_prismarine",
 		Name:"Dark Prismarine",
+		harvestToolsNames: "stone",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
 		category:"build",
 		craftSlabs:true, craftStairs:true
 	},
 	
 	{
 		name:"prismarineCrystals",
+		nameMcd:"prismarine_crystals",
 		Name:"Prismarine Crystals",
 		category:"items",
 		item:true
 	},
 	{
 		name:"prismarineShard",
+		nameMcd:"prismarine_shard",
 		Name:"Prismarine Shard",
 		item:true,
 		category:"items"
@@ -5900,7 +7490,9 @@
 	
 	{
 		name:"seaLantern",
+		nameMcd:"sea_lantern",
 		Name:"Sea Lantern",
+		blastResistance: 0.3,
 		lightLevel:15,
 		hardness:0.3,
 		category:"decoration"
@@ -5908,7 +7500,12 @@
 	
 	{
 		name:"oakLeaves",
+		nameMcd:"oak_leaves",
 		Name: "Oak Leaves",
+		blockStates: [{"name":"distance","values":["1","2","3","4","5","6","7"]},{"name":"persistent","values":[false,true]},{"name":"waterlogged","values":[false,true]}],
+		decreaseLight: 1,
+		blastResistance: 0.2,
+		material: "leaves;mineable/hoe",
 		transparent: true,
 		cullFace:0,
 		hardness:0.2,
@@ -5944,7 +7541,12 @@
 	
 	{
 		name: "acaciaLeaves",
+		nameMcd:"acacia_leaves",
 		Name:"Acacia Leaves",
+		blockStates: "oakLeaves",
+		decreaseLight: 1,
+		blastResistance: 0.2,
+		material: "leaves;mineable/hoe",
 		transparent: true,
 		cullFace:0,
 		hardness:0.2,
@@ -5976,7 +7578,12 @@
 	},
 	{
 		name: "birchLeaves",
+		nameMcd:"birch_leaves",
 		Name:"Birch Leaves",
+		blockStates: "oakLeaves",
+		decreaseLight: 1,
+		blastResistance: 0.2,
+		material: "leaves;mineable/hoe",
 		transparent: true,
 		cullFace:0,
 		hardness:0.2,
@@ -6008,7 +7615,12 @@
 	},
 	{
 		name: "darkOakLeaves",
+		nameMcd:"dark_oak_leaves",
 		Name:"Dark Oak Leaves",
+		blockStates: "oakLeaves",
+		decreaseLight: 1,
+		blastResistance: 0.2,
+		material: "leaves;mineable/hoe",
 		transparent: true,
 		cullFace:0,
 		hardness:0.2,
@@ -6041,7 +7653,12 @@
 	},
 	{
 		name: "jungleLeaves",
+		nameMcd:"jungle_leaves",
 		Name:"Jungle Leaves",
+		blockStates: "oakLeaves",
+		decreaseLight: 1,
+		blastResistance: 0.2,
+		material: "leaves;mineable/hoe",
 		transparent: true,
 		cullFace:0,
 		hardness:0.2,
@@ -6074,7 +7691,12 @@
 	},
 	{
 		name: "spruceLeaves",
+		nameMcd:"spruce_leaves",
 		Name:"Spruce Leaves",
+		blockStates: "oakLeaves",
+		decreaseLight: 1,
+		blastResistance: 0.2,
+		material: "leaves;mineable/hoe",
 		transparent: true,
 		cullFace:0,
 		hardness:0.2,
@@ -6099,6 +7721,7 @@
 	{
 		name:"spyglass",
 		Name:"Spyglass",
+		stackSize: 1,
 		textures:"spyglassModel",
 		iconTexture:"spyglass",
 		item:true,
@@ -6109,6 +7732,7 @@
 	{
 		name:"egg",
 		Name:"Egg",
+		stackSize: 16,
 		item:true,
 		serveronuse: (x,y,z, block,world,face,item,p) => {
 			item.amount--
@@ -6134,7 +7758,9 @@
 	},
 	{
 		name:"mushroomStew",
+		nameMcd:"mushroom_stew",
 		Name:"Mushroom Stew",
+		stackSize: 1,
 		edible: true,
 		item:true,
 		eatWhenFull: false,
@@ -6169,6 +7795,7 @@
 	{
 		name:"fern",
 		Name:"Fern",
+		material: "plant;mineable/axe",
 		solid: false,
 		transparent: true,
 		shadow: false,
@@ -6184,10 +7811,14 @@
 		biomeTintEast:true,
 		biomeTintWest:true,
 		randomOffset:true,
+		//todo n: 'fern' shape
 	},
 	{
 		name: "largeFern",
+		nameMcd:"large_fern",
 		Name:"Large Fern",
+		blockStates: "tallSeagrass",
+		material: "plant;mineable/axe",
 		solid: false,
 		transparent: true,
 		shadow: false,
@@ -6208,6 +7839,7 @@
 	
 	{
 		name:"fire",
+		blockStates: [{"name":"age","values":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15"]},{"name":"east","values":[false,true]},{"name":"north","values":[false,true]},{"name":"south","values":[false,true]},{"name":"up","values":[false,true]},{"name":"west","values":[false,true]}],
 		fire:true,
 		damage:1,
 		burnEnt:true,
@@ -6222,31 +7854,14 @@
 		hidden:true,
 		liquidBreakable:true,
 		noHitbox:true,
-		tagBits:{
-			age:[0,8]
-		},
 		getAttached:function(x,y,z,block,getBlockOnly,world){
 			var ax = x, ay = y, az = z
-			switch(block){
-				case this.id:
-					ay--
-					break
-				case this.id | STAIR:
-					ay++
-					break
-				case this.id | SLAB | NORTH:
-					az++
-					break
-				case this.id | SLAB | SOUTH:
-					az--
-					break
-				case this.id | SLAB | EAST:
-					ax++
-					break
-				case this.id | SLAB | WEST:
-					ax--
-					break
-			}
+			if(getBlockState(block,this.blockStatesMap.up)) ay++
+			else if(getBlockState(block,this.blockStatesMap.north)) az++
+			else if(getBlockState(block,this.blockStatesMap.south)) az--
+			else if(getBlockState(block,this.blockStatesMap.east)) ax++
+			else if(getBlockState(block,this.blockStatesMap.west)) ax--
+			else ay--
 			var attached = world.getBlock(ax,ay,az)
 			if(getBlockOnly) return attached
 			else return [attached,ax,ay,az]
@@ -6255,14 +7870,12 @@
 			var block = this.getAttached(x,y,z,b,true,world)
 			if(!block || !blockData[block].solid && !blockData[block].liquid) world.setBlock(x,y,z,0,false,false,false,false)
 		},
-		tick:function(x,y,z,world){
-			var block = world.getBlock(x,y,z)
+		tick:function(block,x,y,z,world){
 			var attached = this.getAttached(x,y,z,block,false,world)
 			var ax = attached[1], ay = attached[2], az = attached[3]
 			attached = attached[0]
-			var age = world.getTagByName(x,y,z,"age")
-			if(!age) age = 0
-			age += rand(10,11)
+			var age = +getBlockState(block,this.blockStatesMap.age)
+			age += randInt(10,11)
 			//finish burning
 			if(age >= 15 && (!attached || !blockData[attached].burnTime)){
 				return world.setBlock(x,y,z,0,false,false,false,false)
@@ -6273,7 +7886,7 @@
 				return
 			}
 			if(age > 255) age = 255
-			world.setTagByName(x,y,z,"age",age,false)
+			world.setBlock(x,y,z, setBlockState(block,this.blockStatesMap.age, age+""), false,true)
 
 			if(world.weather === "rain" && world.weatherAmount > 0.5){
 				let top = world.getSolidTop(x,z)
@@ -6296,27 +7909,26 @@
 								rx = i, ry = j, rz = k
 								switch(floor(rand(6))){
 									case 0:
-										block = this.id
 										ry++
 										break
 									case 1:
-										block = this.id | STAIR
+										block = setBlockState(block,this.blockStatesMap.up,true)
 										ry--
 										break
 									case 2:
-										block = this.id | SLAB | NORTH
+										block = setBlockState(block,this.blockStatesMap.north,true)
 										rz--
 										break
 									case 3:
-										block = this.id | SLAB | SOUTH
+										block = setBlockState(block,this.blockStatesMap.south,true)
 										rz++
 										break
 									case 4:
-										block = this.id | SLAB | EAST
+										block = setBlockState(block,this.blockStatesMap.east,true)
 										rx--
 										break
 									case 5:
-										block = this.id | SLAB | WEST
+										block = setBlockState(block,this.blockStatesMap.west,true)
 										rx++
 										break
 								}
@@ -6356,7 +7968,7 @@
 				}
 			}
 			for(let i=0; i<spread.length; i+=4){
-				world.setBlock(spread[i],spread[i+1],spread[i+2],blockIds.portal|PORTAL|EAST)
+				world.setBlock(spread[i],spread[i+1],spread[i+2],blockIds.portal+blockStateMaps.portal.axis.x)
 			}
 			return true
 		},
@@ -6388,7 +8000,7 @@
 				}
 			}
 			for(let i=0; i<spread.length; i+=4){
-				world.setBlock(spread[i],spread[i+1],spread[i+2],blockIds.portal|PORTAL|NORTH)
+				world.setBlock(spread[i],spread[i+1],spread[i+2],blockIds.portal+blockStateMaps.portal.axis.z)
 			}
 			return true
 		},
@@ -6399,16 +8011,22 @@
 	
 	{
 		name: "endRod",
+		nameMcd:"end_rod",
 		Name:"End Rod",
+		blockStates: [{"name":"facing","values":["north","east","south","west","up","down"]}],
 		transparent: true,
 		shadow: false,
-		lightLevel: 15,
+		lightLevel: 14,
 		category:"decoration"
 	},
 	
 	{
 		name: "oakWood",
+		nameMcd:"oak_wood",
 		Name:"Oak Wood",
+		blockStates: "paleOakWood",
+		blastResistance: 2,
+		material: "mineable/axe",
 		textures: "logSide",
 		hardness:2,
 		woodSound:true,
@@ -6420,7 +8038,11 @@
 	},
 	{
 		name: "acaciaWood",
+		nameMcd:"acacia_wood",
 		Name:"Acacia Wood",
+		blockStates: "paleOakWood",
+		blastResistance: 2,
+		material: "mineable/axe",
 		textures: "acaciaLogSide",
 		hardness:2,
 		woodSound:true,
@@ -6432,7 +8054,11 @@
 	},
 	{
 		name: "birchWood",
+		nameMcd:"birch_wood",
 		Name:"Birch Wood",
+		blockStates: "paleOakWood",
+		blastResistance: 2,
+		material: "mineable/axe",
 		textures: "birchLogSide",
 		hardness:2,
 		woodSound:true,
@@ -6444,7 +8070,11 @@
 	},
 	{
 		name: "darkOakWood",
+		nameMcd:"dark_oak_wood",
 		Name:"Dark Oak Wood",
+		blockStates: "paleOakWood",
+		blastResistance: 2,
+		material: "mineable/axe",
 		textures: "darkOakLogSide",
 		hardness:2,
 		woodSound:true,
@@ -6456,7 +8086,11 @@
 	},
 	{
 		name: "jungleWood",
+		nameMcd:"jungle_wood",
 		Name:"Jungle Wood",
+		blockStates: "paleOakWood",
+		blastResistance: 2,
+		material: "mineable/axe",
 		textures: "jungleLogSide",
 		hardness:2,
 		woodSound:true,
@@ -6468,7 +8102,11 @@
 	},
 	{
 		name: "spruceWood",
+		nameMcd:"spruce_wood",
 		Name:"Spruce Wood",
+		blockStates: "paleOakWood",
+		blastResistance: 2,
+		material: "mineable/axe",
 		textures: "spruceLogSide",
 		hardness:2,
 		woodSound:true,
@@ -6480,6 +8118,10 @@
 	},
 	{
 		name: "crimsonHyphae",
+		nameMcd:"crimson_hyphae",
+		blockStates: "paleOakWood",
+		blastResistance: 2,
+		material: "mineable/axe",
 		textures: "crimsonStemSide",
 		stemSound: true,
 		hardness:2,
@@ -6488,6 +8130,10 @@
 	},
 	{
 		name: "warpedHyphae",
+		nameMcd:"warped_hyphae",
+		blockStates: "paleOakWood",
+		blastResistance: 2,
+		material: "mineable/axe",
 		textures: "warpedStemSide",
 		stemSound: true,
 		hardness:2,
@@ -6497,7 +8143,11 @@
 	
 	{
 		name: "strippedOakWood",
+		nameMcd:"stripped_oak_wood",
 		Name:"Stripped Oak Wood",
+		blockStates: "paleOakWood",
+		blastResistance: 2,
+		material: "mineable/axe",
 		textures: "strippedOakLog",
 		hardness:2,
 		woodSound:true,
@@ -6508,7 +8158,11 @@
 	},
 	{
 		name: "strippedAcaciaWood",
+		nameMcd:"stripped_acacia_wood",
 		Name:"Stripped Acacia Wood",
+		blockStates: "paleOakWood",
+		blastResistance: 2,
+		material: "mineable/axe",
 		textures: "strippedAcaciaLog",
 		hardness:2,
 		woodSound:true,
@@ -6519,7 +8173,11 @@
 	},
 	{
 		name: "strippedBirchWood",
+		nameMcd:"stripped_birch_wood",
 		Name:"Stripped Birch Wood",
+		blockStates: "paleOakWood",
+		blastResistance: 2,
+		material: "mineable/axe",
 		textures: "strippedBirchLog",
 		hardness:2,
 		woodSound:true,
@@ -6530,7 +8188,11 @@
 	},
 	{
 		name: "strippedDarkOakWood",
+		nameMcd:"stripped_dark_oak_wood",
 		Name:"Stripped Dark Oak Wood",
+		blockStates: "paleOakWood",
+		blastResistance: 2,
+		material: "mineable/axe",
 		textures: "strippedDarkOakLog",
 		hardness:2,
 		woodSound:true,
@@ -6541,7 +8203,11 @@
 	},
 	{
 		name: "strippedJungleWood",
+		nameMcd:"stripped_jungle_wood",
 		Name:"Stripped Jungle Wood",
+		blockStates: "paleOakWood",
+		blastResistance: 2,
+		material: "mineable/axe",
 		textures: "strippedJungleLog",
 		hardness:2,
 		woodSound:true,
@@ -6552,7 +8218,11 @@
 	},
 	{
 		name: "strippedSpruceWood",
+		nameMcd:"stripped_spruce_wood",
 		Name:"Stripped Spruce Wood",
+		blockStates: "paleOakWood",
+		blastResistance: 2,
+		material: "mineable/axe",
 		textures: "strippedSpruceLog",
 		hardness:2,
 		woodSound:true,
@@ -6563,6 +8233,10 @@
 	},
 	{
 		name: "strippedCrimsonHyphae",
+		nameMcd:"stripped_crimson_hyphae",
+		blockStates: "paleOakWood",
+		blastResistance: 2,
+		material: "mineable/axe",
 		textures: "strippedCrimsonStem",
 		stemSound: true,
 		hardness:2,
@@ -6571,6 +8245,10 @@
 	},
 	{
 		name: "strippedWarpedHyphae",
+		nameMcd:"stripped_warped_hyphae",
+		blockStates: "paleOakWood",
+		blastResistance: 2,
+		material: "mineable/axe",
 		textures: "strippedWarpedStem",
 		stemSound: true,
 		hardness:2,
@@ -6580,88 +8258,137 @@
 	
 	{
 		name:"oakFenceGate",
+		nameMcd:"oak_fence_gate",
 		Name:"Oak Fence Gate",
+		blockStates: [{"name":"facing","values":["north","south","west","east"]},{"name":"in_wall","values":[false,true]},{"name":"open","values":[false,true]},{"name":"powered","values":[false,true]}],
+		blastResistance: 3,
+		material: "mineable/axe",
 		textures:"oakPlanks",
 		fenceGate:true,
 		hardness:2,
 		woodSound:true,
 		type:"wood",
-		category:"build"
+		category:"build",
+		onclick:function(x,y,z,world){
+			var b = world.getBlock(x,y,z)
+			let o = getBlockState(b,this.blockStatesMap.open)
+			var set = setBlockState(b,this.blockStatesMap.open, !o)
+			var id = this.id
+			world.setBlock(x,y,z,set)
+			doorSound(x,y,z,"fence_gate",o,world)
+		}
 	},
 	{
 		name:"acaciaFenceGate",
+		nameMcd:"acacia_fence_gate",
 		Name:"Acacia Fence Gate",
+		blockStates: "oakFenceGate",
+		blastResistance: 3,
+		material: "mineable/axe",
 		textures:"acaciaPlanks",
 		fenceGate:true,
 		hardness:2,
 		woodSound:true,
 		type:"wood",
-		category:"build"
+		category:"build",
+		copyPropertiesHere:"oakFenceGate"
 	},
 	{
 		name:"birchFenceGate",
+		nameMcd:"birch_fence_gate",
 		Name:"Birch Fence Gate",
+		blockStates: "oakFenceGate",
+		blastResistance: 3,
+		material: "mineable/axe",
 		textures:"birchPlanks",
 		fenceGate:true,
 		hardness:2,
 		woodSound:true,
 		type:"wood",
-		category:"build"
+		category:"build",
+		copyPropertiesHere:"oakFenceGate"
 	},
 	{
 		name:"darkOakFenceGate",
+		nameMcd:"dark_oak_fence_gate",
 		Name:"Dark Oak Fence Gate",
+		blockStates: "oakFenceGate",
+		blastResistance: 3,
+		material: "mineable/axe",
 		textures:"darkOakPlanks",
 		fenceGate:true,
 		hardness:2,
 		woodSound:true,
 		type:"wood",
-		category:"build"
+		category:"build",
+		copyPropertiesHere:"oakFenceGate"
 	},
 	{
 		name:"jungleFenceGate",
+		nameMcd:"jungle_fence_gate",
 		Name:"Jungle Fence Gate",
+		blockStates: "oakFenceGate",
+		blastResistance: 3,
+		material: "mineable/axe",
 		textures:"junglePlanks",
 		fenceGate:true,
 		hardness:2,
 		woodSound:true,
 		type:"wood",
-		category:"build"
+		category:"build",
+		copyPropertiesHere:"oakFenceGate"
 	},
 	{
 		name:"spruceFenceGate",
+		nameMcd:"spruce_fence_gate",
 		Name:"Spruce Fence Gate",
+		blockStates: "oakFenceGate",
+		blastResistance: 3,
+		material: "mineable/axe",
 		textures:"sprucePlanks",
 		fenceGate:true,
 		hardness:2,
 		woodSound:true,
 		type:"wood",
-		category:"build"
+		category:"build",
+		copyPropertiesHere:"oakFenceGate"
 	},
 	{
 		name:"crimsonFenceGate",
+		nameMcd:"crimson_fence_gate",
 		Name:"Crimson Fence Gate",
+		blockStates: "oakFenceGate",
+		blastResistance: 3,
+		material: "mineable/axe",
 		textures:"crimsonPlanks",
 		fenceGate:true,
 		hardness:2,
 		woodSound:true,
 		type:"wood",
-		category:"build"
+		category:"build",
+		copyPropertiesHere:"oakFenceGate"
 	},
 	{
 		name:"warpedFenceGate",
+		nameMcd:"warped_fence_gate",
 		Name:"Warped Fence Gate",
+		blockStates: "oakFenceGate",
+		blastResistance: 3,
+		material: "mineable/axe",
 		textures:"warpedPlanks",
 		fenceGate:true,
 		hardness:2,
 		woodSound:true,
 		type:"wood",
-		category:"build"
+		category:"build",
+		copyPropertiesHere:"oakFenceGate"
 	},
 	
 	{ 
 		name: "kelp",
 		Name:"Kelp",
+		blockStates: [{"name":"age","values":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25"]}],
+		decreaseLight: 1,
 		flatIcon:true,
 		iconTexture:"kelpIcon",
 		transparent: true,
@@ -6672,13 +8399,15 @@
 			var top = world.getBlock(x,y+1,z)
 			var isIt = blockData[top].name === "kelp" || blockData[top].name === "kelpPlant"
 			if(isIt){
-				world.setBlock(x,y,z,blockIds.kelpPlant | CROSS,false,false,false,false)
+				world.setBlock(x,y,z,blockIds.kelpPlant,false,false,false,false)
 			}
 		},
 		category:"nature"
 	},
 	{ 
 		name: "kelpPlant",
+		nameMcd:"kelp_plant",
+		decreaseLight: 1,
 		transparent: true,
 		solid: false,
 		shadow: false,
@@ -6687,7 +8416,7 @@
 			var top = world.getBlock(x,y+1,z)
 			var isIt = blockData[top].name === "kelp" || blockData[top].name === "kelpPlant"
 			if(!isIt){
-				world.setBlock(x,y,z,blockIds.kelp | CROSS,false,false,false,false)
+				world.setBlock(x,y,z,blockIds.kelp,false,false,false,false)
 			}
 		},
 		hidden:true
@@ -6696,6 +8425,7 @@
 	{
 		name:"seagrass",
 		Name:"Seagrass",
+		decreaseLight: 1,
 		iconTexture:"seagrassIcon",
 		transparent: true,
 		solid: false,
@@ -6705,7 +8435,10 @@
 	},
 	{
 		name:"tallSeagrass",
+		nameMcd:"tall_seagrass",
 		Name:"Tall Seagrass",
+		blockStates: [{"name":"half","values":["upper","lower"]}],
+		decreaseLight: 1,
 		textures:"tallSeagrassConnected",
 		transparent: true,
 		solid: false,
@@ -6717,6 +8450,10 @@
 	{
 		name:"barrel",
 		Name:"Barrel",
+		blockStates: [{"name":"facing","values":["north","east","south","west","up","down"]},{"name":"open","values":[false,true]}],
+		hardness: 2.5,
+		blastResistance: 2.5,
+		material: "mineable/axe",
 		textures:["barrelBottom","barrelTop","barrelSide"],
 		texturesOpen:fillTextureArray(["barrelBottom","barrelTopOpen","barrelSide"]),
 		texturesSW:fillTextureArray(["barrelSide","barrelSide","barrelTop","barrelSide"]),
@@ -6746,7 +8483,12 @@
 	
 	{
 		name:"endStoneBricks",
+		nameMcd:"end_stone_bricks",
 		Name:"End Stone Bricks",
+		harvestToolsNames: "stone",
+		hardness: 3,
+		blastResistance: 9,
+		material: "mineable/pickaxe",
 		stoneSound:true,
 		category:"build",
 		craftSlabs:true, craftStairs:true
@@ -6754,7 +8496,12 @@
 	
 	{
 		name:"beeNest",
+		nameMcd:"bee_nest",
 		Name:"Bee Nest",
+		blockStates: [{"name":"facing","values":["north","south","west","east"]},{"name":"honey_level","values":["0","1","2","3","4","5"]}],
+		hardness: 0.3,
+		blastResistance: 0.3,
+		material: "mineable/axe",
 		textures:["beeNestBottom","beeNestTop","beeNestSide","beeNestFront","beeNestSide","beeNestSide"],
 		texturesHoney:["beeNestBottom","beeNestTop","beeNestSide","beeNestFrontHoney","beeNestSide","beeNestSide"],
 		rotate:true,
@@ -6763,6 +8510,10 @@
 	{
 		name:"beehive",
 		Name:"Beehive",
+		blockStates: "beeNest",
+		hardness: 0.6,
+		blastResistance: 0.6,
+		material: "mineable/axe",
 		textures:["beehiveEnd","beehiveEnd","beehiveSide","beehiveFront","beehiveSide","beehiveSide"],
 		texturesHoney:["beehiveEnd","beehiveEnd","beehiveSide","beehiveFrontHoney","beehiveSide","beehiveSide"],
 		rotate:true,
@@ -6771,7 +8522,9 @@
 	
 	{
 		name:"honeyBlock",
+		nameMcd:"honey_block",
 		Name:"Block of Honey",
+		decreaseLight: 1,
 		textures:"honeyBlockBottom",
 		transparent:true,
 		shapeName:"honeyBlock",
@@ -6787,14 +8540,20 @@
 	},
 	{
 		name:"honeycombBlock",
+		nameMcd:"honeycomb_block",
 		Name:"Honeycomb Block",
+		hardness: 0.6,
+		blastResistance: 0.6,
 		category:"build"
 	},
 	
 	{
 		name:"coarseDirt",
+		nameMcd:"coarse_dirt",
 		Name:"Coarse Dirt",
-		hardness:1,
+		blastResistance: 0.5,
+		material: "mineable/shovel",
+		hardness:0.5,
 		type:"ground",
 		category:"nature",
 		randomRotate:true,randomRotateTop:true,randomRotateBottom:true,randomRotateNorth:true,randomRotateSouth:true,randomRotateEast:true,randomRotateWest:true,
@@ -6804,12 +8563,14 @@
 	
 	{
 		name:"inkSac",
+		nameMcd:"ink_sac",
 		Name:"Ink Sac",
 		item:true,
 		category:"items"
 	},
 	{
 		name:"glowInkSac",
+		nameMcd:"glow_ink_sac",
 		Name:"Glow Ink Sac",
 		item:true,
 		category:"items"
@@ -6817,16 +8578,34 @@
 	
 	{
 		name:"glowItemFrame",
+		nameMcd:"glow_item_frame",
 		Name:"Glow Item Frame",
+		item: true,
 		transparent:true,
 		itemFrame:true,
 		flatIcon:true,
 		iconTexture:"glowItemFrameIcon",
-		category:"items"
+		category:"items",
+		tagBits:null,
+		shapeName:"itemFrame",
+		copyPropertiesHere:"itemFrame",
+		serveronuse: (x,y,z, block,world,face,item,p) => {
+			item.amount--
+			var rot = round(p.ry*4/Math.PId)
+			let pos = getPosition([x,y,z],face)
+			let ent = new entities[entityIds.glowItemFrame](pos[0],pos[1],pos[2])
+			ent.rot(rot)
+			world.addEntity(ent)
+		},
 	},
 	{
 		name:"glowLichen",
+		nameMcd:"glow_lichen",
 		Name:"Glow Lichen",
+		blockStates: [{"name":"down","values":[false,true]},{"name":"east","values":[false,true]},{"name":"north","values":[false,true]},{"name":"south","values":[false,true]},{"name":"up","values":[false,true]},{"name":"waterlogged","values":[false,true]},{"name":"west","values":[false,true]}],
+		hardness: 0.2,
+		blastResistance: 0.2,
+		material: "vine_or_glow_lichen;plant;mineable/axe",
 		transparent: true,
 		shadow: false,
 		wallFlat: true,
@@ -6840,6 +8619,9 @@
 	{
 		name:"sponge",
 		Name:"Sponge",
+		hardness: 0.6,
+		blastResistance: 0.6,
+		material: "mineable/hoe",
 		wetTexture:new Array(6).fill("wetSponge"),
 		category:"items",
 		randomRotate:true,randomRotateTop:true,randomRotateBottom:true,randomRotateNorth:true,randomRotateSouth:true,randomRotateEast:true,randomRotateWest:true
@@ -6847,50 +8629,90 @@
 	
 	{
 		name:"cutCopper",
+		nameMcd:"cut_copper",
 		Name:"Cut Copper",
+		harvestToolsNames: "ironOre",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
 		category:"build",
 		craftSlabs:true, craftStairs:true
 	},
 	{
 		name:"exposedCopper",
+		nameMcd:"exposed_copper",
 		Name:"Exposed Block of Copper",
+		harvestToolsNames: "ironOre",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
 		category:"build",
 		craftSlabs:true, craftStairs:true
 	},
 	{
 		name:"exposedCutCopper",
+		nameMcd:"exposed_cut_copper",
 		Name:"Exposed Cut Copper",
+		harvestToolsNames: "ironOre",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
 		category:"build",
 		craftSlabs:true, craftStairs:true
 	},
 	{
 		name:"weatheredCopper",
+		nameMcd:"weathered_copper",
 		Name:"Weathered Block of Copper",
+		harvestToolsNames: "ironOre",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
 		category:"build",
 		craftSlabs:true, craftStairs:true
 	},
 	{
 		name:"weatheredCutCopper",
+		nameMcd:"weathered_cut_copper",
 		Name:"Weathered Cut Copper",
+		harvestToolsNames: "ironOre",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
 		category:"build",
 		craftSlabs:true, craftStairs:true
 	},
 	{
 		name:"oxidizedCopper",
+		nameMcd:"oxidized_copper",
 		Name:"Oxidized Block of Copper",
+		harvestToolsNames: "ironOre",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
 		category:"build",
 		craftSlabs:true, craftStairs:true
 	},
 	{
 		name:"oxidizedCutCopper",
+		nameMcd:"oxidized_cut_copper",
 		Name:"Oxidized Cut Copper",
+		harvestToolsNames: "ironOre",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
 		category:"build",
 		craftSlabs:true, craftStairs:true
 	},
 	
 	{
 		name:"quartzBricks",
+		nameMcd:"quartz_bricks",
 		Name:"Quartz Bricks",
+		harvestToolsNames: "stone",
+		hardness: 0.8,
+		blastResistance: 0.8,
+		material: "mineable/pickaxe",
 		stoneSound:true,
 		category:"build",
 		craftSlabs:true, craftStairs:true
@@ -6899,6 +8721,8 @@
 	{
 		name:"campfire",
 		Name:"Campfire",
+		blockStates: [{"name":"facing","values":["north","south","west","east"]},{"name":"lit","values":[false,true]},{"name":"signal_fire","values":[false,true]},{"name":"waterlogged","values":[false,true]}],
+		material: "mineable/axe",
 		flatIcon:true,
 		iconTexture:"campfire",
 		textures: "campfireLogLit",
@@ -6915,14 +8739,17 @@
 		blastResistance:2,
 		hardness:2,
 		activate:function(x,y,z,block,ent,world){
-			if(ent.burning && block === (this.id | SLAB) && onBoxEnt(x,y,z,1,1,1,ent)){
+			if(ent.burning && getBlockState(block,this.blockStatesMap.lit) && onBoxEnt(x,y,z,1,1,1,ent)){
 				world.setBlock(x,y,z,this.id,false,false,false,false)
 			}
 		}
 	},
 	{
 		name:"soulCampfire",
+		nameMcd:"soul_campfire",
 		Name:"Soul Campfire",
+		blockStates: "campfire",
+		material: "mineable/axe",
 		flatIcon:true,
 		iconTexture:"soulCampfire",
 		textures: "soulCampfireLogLit",
@@ -6939,7 +8766,7 @@
 		blastResistance:2,
 		hardness:2,
 		activate:function(x,y,z,block,ent,world){
-			if(ent.burning && block === (this.id | SLAB) && onBoxEnt(x,y,z,1,1,1,ent)){
+			if(ent.burning && getBlockState(block,this.blockStatesMap.lit) && onBoxEnt(x,y,z,1,1,1,ent)){
 				world.setBlock(x,y,z,this.id,false,false,false,false)
 			}
 		}
@@ -6947,7 +8774,10 @@
 	
 	{
 		name:"bambooShoot",
+		nameMcd:"bamboo_sapling",
 		Name:"Bamboo Shoot",
+		hardness: 1,
+		blastResistance: 1,
 		textures:"bambooStage0",
 		solid: false,
 		transparent: true,
@@ -6957,10 +8787,19 @@
 		category:"nature",
 		potCross:true,
 		randomOffset:true,
+		growSlow:function(x,y,z,world,block){
+			if(world.getBlock(x,y+1,z)) return
+			world.setBlock(x, y, z, blockIds.bambooStalk + blockStateMaps.bambooStalk.leaves.small + blockStateMaps.bambooStalk.age[0])
+			world.setBlock(x, y+1, z, blockIds.bambooStalk + blockStateMaps.bambooStalk.leaves.large + blockStateMaps.bambooStalk.age[0])
+		}
 	},
 	{
 		name:"bambooStalk",
+		nameMcd:"bamboo",
 		Name:"Bamboo",
+		blockStates: [{"name":"age","values":["0","1"]},{"name":"leaves","values":["none","small","large"]},{"name":"stage","values":["0","1"]}],
+		blastResistance: 1,
+		material: "mineable/axe",
 		iconTexture:"bamboo",
 		flatIcon:true,
 		bamboo:true,
@@ -6974,12 +8813,46 @@
 		},
 		liquidBreakable:"drop",
 		category:"nature",
-		randomOffset:true
+		randomOffset:true,
+		growSlow:function(x,y,z,world,block){
+			var tall = 0
+			var maxTall = 16
+			let blocks = []
+			for(let t=0; t<maxTall; t++){
+				let block = world.getBlock(x,y-t,z)
+				if(blockData[block].name === "bambooStalk"){
+					tall++
+					blocks.push(block)
+				}else break
+			}
+			if(tall >= maxTall) return
+			
+			var above = world.getBlock(x,y+1,z)
+			if(above) return //there is a block so it can't grow
+			world.setBlock(x,y+1,z, this.id + this.blockStatesMap.age[tall>3?1:0] + this.blockStatesMap.leaves.large)
+			if(tall > 3){
+				for(let t=0; t<tall; t++){
+					let block = blocks[t]
+					let target = setBlockState(setBlockState(block,this.blockStatesMap.age,"1"), this.blockStatesMap.leaves, t === 0 ? "small" : "none")
+					if(block !== target) world.setBlock(x,y-t,z,target)
+				}
+			}else{
+				for(let t=0; t<tall; t++){
+					let block = blocks[t]
+					let target = setBlockState(setBlockState(block,this.blockStatesMap.age,"0"), this.blockStatesMap.leaves, t === 0 ? "small" : "none")
+					if(block !== target) world.setBlock(x,y-t,z,target)
+				}
+			}
+		}
 	},
 	
 	{
 		name:"chest",
 		Name:"Chest",
+		blockStates: [{"name":"facing","values":["north","south","west","east"]},{"name":"type","values":["single","left","right"]},{"name":"waterlogged","values":[false,true]}],
+		hardness: 2.5,
+		blastResistance: 2.5,
+		material: "mineable/axe",
 		textures:/*"christmasChestSide",//*/"chest",//christmas
 		transparent:true,
 		chest:true,
@@ -7003,6 +8876,7 @@
 	},
 	{
 		name:"boneMeal",
+		nameMcd:"bone_meal",
 		Name:"Bone \"Meal\"",
 		item:true,
 		serveronuse: (x,y,z, block,world,face,item,p) => {
@@ -7020,6 +8894,8 @@
 	{
 		name:"clay",
 		Name:"Clay",
+		blastResistance: 0.6,
+		material: "mineable/shovel",
 		hardness:0.6,
 		type:"ground",
 		digSound: ["dirt.dig1", "dirt.dig2", "dirt.dig3", "dirt.dig4"],
@@ -7030,6 +8906,7 @@
 	},
 	{
 		name:"clayBall",
+		nameMcd:"clay_ball",
 		Name:"Clay Ball",
 		item:true,
 		category:"items"
@@ -7057,7 +8934,10 @@
 	
 	{
 		name:"tintedGlass",
+		nameMcd:"tinted_glass",
 		Name:"Tinted Glass",
+		decreaseLight: 15,
+		blastResistance: 0.3,
 		transparent: true,
 		shadow: true,
 		hardness: 0.3,
@@ -7080,6 +8960,7 @@
 	{
 		name:"tomatoPlant",
 		Name:"Tomato Plant",
+		blockStates:[{name:"age",values:["0","1","2","3","4"]}],
 		textures:new Array(6).fill("tomatoPlantStage0"),
 		textures1:new Array(6).fill("tomatoPlantStage1"),
 		textures2:new Array(6).fill("tomatoPlantStage2"),
@@ -7096,7 +8977,30 @@
 		category:"nature",
 		liquidBreakable:"drop",
 		growBonemeal:function(x,y,z,world){
-			world.setBlock(x,y,z, this.id|TALLCROSS)
+			world.setBlock(x,y,z, this.id+this.blockStateMaps.age[4])
+		},
+		init:function(){return//todo n
+			baseBlock.shape = shapes.cross
+			makeBlock(baseBlock.textures1, shapes.cross, slabBlock, baseBlock)
+			makeBlock(baseBlock.textures2, shapes.cross, stairBlock, baseBlock)
+			makeBlock(baseBlock.textures3, shapes.cross, crossBlock, baseBlock)
+			makeBlock(baseBlock.textures4, shapes.cross, tallcrossBlock, baseBlock)
+			crossBlock.drop = "tomato"
+			crossBlock.dropAmount = [4,8]
+			tallcrossBlock.drop = "tomato"
+			tallcrossBlock.dropAmount = [8,16]
+		},
+		dropAmount:function(block){
+			let age = +getBlockState(block, this.blockStatesMap.age)
+			return age === 3 ? randInt(4,7) : age === 4 ? randInt(8,16) : 1
+		},
+		drop:function(block){
+			let age = +getBlockState(block, this.blockStatesMap.age)
+			return age === 3 || age === 4 ? "tomato" : "tomatoSeeds"
+		},
+		growSlow:function(x,y,z,world,block){
+			let age = +getBlockState(block,this.blockStatesMap.age)
+			if(age !== 4) world.setBlock(x,y,z,setBlockState(block,this.blockStatesMap.age,(age+1)+""))
 		}
 	},
 	{
@@ -7125,7 +9029,10 @@
 		},
 		compostChance:0.3,
 		liquidBreakable:true,
-		category:"nature"
+		category:"nature",
+		growSlow:function(x,y,z,world,block){
+			world.setBlock(x,y,z,blockIds.greenCactusFruit)
+		}
 	},
 	{
 		name:"greenCactusFruit",
@@ -7140,7 +9047,10 @@
 		},
 		compostChance:0.4,
 		liquidBreakable:true,
-		category:"nature"
+		category:"nature",
+		growSlow:function(x,y,z,world,block){
+			world.setBlock(x,y,z,blockIds.redCactusFruit)
+		}
 	},
 	{
 		name:"redCactusFruit",
@@ -7159,7 +9069,10 @@
 		},
 		compostChance:0.5,
 		liquidBreakable:true,
-		category:"food"
+		category:"food",
+		growSlow:function(x,y,z,world,block){
+			world.setBlock(x,y,z,blockIds.purpleCactusFruit)
+		}
 	},
 	{
 		name:"purpleCactusFruit",
@@ -7194,7 +9107,11 @@
 	},
 	{
 		name:"cherryLog",
+		nameMcd:"cherry_log",
 		Name:"Cherry Log",
+		blockStates: "paleOakWood",
+		blastResistance: 2,
+		material: "mineable/axe",
 		textures:["cherryLogTop","cherryLog"],
 		woodSound:true,
 		hardness:2,
@@ -7237,7 +9154,12 @@
 	},
 	{
 		name:"cherryLeaves",
+		nameMcd:"cherry_leaves",
 		Name:"Cherry Leaves",
+		blockStates: "oakLeaves",
+		decreaseLight: 1,
+		blastResistance: 0.2,
+		material: "leaves;mineable/hoe",
 		transparent: true,
 		cullFace:0,
 		hardness: 0.2,
@@ -7259,7 +9181,10 @@
 	},
 	{
 		name:"cherrySapling",
+		nameMcd:"cherry_sapling",
 		Name:"Cherry Sapling",
+		blockStates: "oakSapling",
+		material: "plant;mineable/axe",
 		transparent: true,
 		shadow: false,
 		solid: false,
@@ -7274,7 +9199,11 @@
 	},
 	{
 		name:"cherryWood",
+		nameMcd:"cherry_wood",
 		Name:"Cherry Wood",
+		blockStates: "paleOakWood",
+		blastResistance: 2,
+		material: "mineable/axe",
 		textures: "cherryLog",
 		hardness:2,
 		woodSound:true,
@@ -7300,7 +9229,9 @@
 	
 	{
 		name:"redstoneTorch",
+		nameMcd:"redstone_torch",
 		Name:"Redstone Torch",
+		blockStates: "redstoneOre",
 		transparent: true,
 		shadow: false,
 		redstoneTorch: true,
@@ -7308,6 +9239,10 @@
 		woodSound:true,
 		solid:false,
 		flatIcon:true,
+		useAsWall:"redstoneWallTorch",
+		init: function(){
+			blockData[this.id + this.blockStatesMap.lit.false].lightLevel = 0
+		},
 		onupdate: function(x,y,z,b,world,sx,sy,sz){
 			this.onpowerupdate(x,y,z,null,null,null,null,world)
 			
@@ -7325,72 +9260,21 @@
 			}
 		},
 		onpowerupdate: function(x,y,z,sx,sy,sz,blockPowerChanged,world){
-			var that = this
-			world.setTimeout(function(){
+			world.setTimeout(() => {
 				//find block it's attached to
 				var me = world.getBlock(x,y,z)
 				var ax=x,ay=y,az=z
-				var wall = that.id | SLAB
-				var wallOff = that.id | STAIR
-				switch(me){
-					case wall | NORTH:
-					case wallOff | NORTH:
-						az++
-						break
-					case wall | SOUTH:
-					case wallOff | SOUTH:
-						az--
-						break
-					case wall | EAST:
-					case wallOff | EAST:
-						ax++
-						break
-					case wall | WEST:
-					case wallOff | WEST:
-						ax--
-						break
-					default:
-						ay--
-				}
-				var block = world.getBlock(ax,ay,az)
+				if(this.blockStatesMap.facing){
+					switch(getBlockState(me,this.blockStatesMap.facing)){
+						case "north": az++; break
+						case "south": az--; break
+						case "east": ax++; break
+						case "west": ax--; break
+					}
+				}else ay--
 				//see if the torch should be on of off
 				var on = world.getPower(ax,ay,az) || world.getBlockPower(ax,ay,az,null) ? false : true
-				var target = me
-				if(on){
-					switch(me){
-						case wallOff | NORTH:
-							target = wall | NORTH
-							break
-						case wallOff | SOUTH:
-							target = wall | SOUTH
-							break
-						case wallOff | EAST:
-							target = wall | EAST
-							break
-						case wallOff | WEST:
-							target = wall | WEST
-							break
-						case that.id | CROSS:
-							target = that.id
-					}
-				}else{
-					switch(me){
-						case wall | NORTH:
-							target = wallOff | NORTH
-							break
-						case wall | SOUTH:
-							target = wallOff | SOUTH
-							break
-						case wall | EAST:
-							target = wallOff | EAST
-							break
-						case wall | WEST:
-							target = wallOff | WEST
-							break
-						case that.id:
-							target = that.id | CROSS
-					}
-				}
+				var target = setBlockState(me,this.blockStatesMap.lit,on)
 
 				//set it
 				if(me !== target) {
@@ -7447,6 +9331,9 @@
 	{
 		name:"lever",
 		Name:"Lever",
+		blockStates: [{"name":"face","values":["floor","wall","ceiling"]},{"name":"facing","values":["north","south","west","east"]},{"name":"powered","values":[false,true]}],
+		hardness: 0.5,
+		blastResistance: 0.5,
 		transparent:true,
 		shadow:false,
 		solid:false,
@@ -7455,93 +9342,28 @@
 		onclick:function(x,y,z,world){
 			var block = world.getBlock(x,y,z)
 			var me = blockData[blockIds.lever]
-			var wall = me.id
-			var wallOn = me.id | SLAB
 			var ax = x, ay = y, az = z
 			var dir
-			switch(block){
-				case wall | NORTH:
-				case wallOn | NORTH:
-					az++
-					dir = "south"
-					break
-				case wall | SOUTH:
-				case wallOn | SOUTH:
-					az--
-					dir = "north"
-					break
-				case wall | EAST:
-				case wallOn | EAST:
-					ax++
-					dir = "east"
-					break
-				case wall | WEST:
-				case wallOn | WEST:
-					ax--
-					dir = "west"
-					break
-				case me.id | STAIR:
-				case me.id | CROSS:
-					ay --
-					dir = "top"
-					break
-				case me.id | TALLCROSS:
-				case me.id | DOOR:
-					ay ++
-					dir = "bottom"
-					break
-			}
-			var target, on
-			switch(block){
-				case wall | NORTH:
-					on = true
-					target = wallOn | NORTH
-					break
-				case wall | SOUTH:
-					on = true
-					target = wallOn | SOUTH
-					break
-				case wall | EAST:
-					on = true
-					target = wallOn | EAST
-					break
-				case wall | WEST:
-					on = true
-					target = wallOn | WEST
-					break
-				case wallOn | NORTH:
-					on = false
-					target = wall | NORTH
-					break
-				case wallOn | SOUTH:
-					on = false
-					target = wall | SOUTH
-					break
-				case wallOn | EAST:
-					on = false
-					target = wall | EAST
-					break
-				case wallOn | WEST:
-					on = false
-					target = wall | WEST
-					break
-				case me.id | STAIR:
-					on = true
-					target = me.id | CROSS
-					break
-				case me.id | CROSS:
-					on = false
-					target = me.id | STAIR
-					break
-				case me.id | TALLCROSS:
-					on = true
-					target = me.id | DOOR
-					break
-				case me.id | DOOR:
-					on = false
-					target = me.id | TALLCROSS
-					break
+			if(getBlockState(block,me.blockStatesMap.face) === "ceiling"){
+				ay --
+				dir = "top"
+			}else if(getBlockState(block,me.blockStatesMap.face) === "floor"){
+				ay ++
+				dir = "bottom"
+			}else if(getBlockState(block,me.blockStatesMap.facing) === "north"){
+				az++
+				dir = "south"
+			}else if(getBlockState(block,me.blockStatesMap.facing) === "south"){
+				az--
+				dir = "north"
+			}else if(getBlockState(block,me.blockStatesMap.facing) === "east"){
+				ax++
+				dir = "east"
+			}else if(getBlockState(block,me.blockStatesMap.facing) === "west"){
+				ax--
+				dir = "west"
 			}
+			var on = !getBlockState(block,me.blockStatesMap.powered), target = setBlockState(block,me.blockStatesMap.powered,on)
 			world.setBlock(x,y,z,target)
 			if(on){
 				world.setPower(x,y,z,16)
@@ -7562,41 +9384,26 @@
 				
 				var block = prevBlock
 				var me = blockData[blockIds.lever]
-				var wall = me.id
-				var wallOn = me.id | SLAB
 				var ax = x, ay = y, az = z
 				var dir
-				switch(block){
-					case wall | NORTH:
-					case wallOn | NORTH:
-						az++
-						dir = "south"
-						break
-					case wall | SOUTH:
-					case wallOn | SOUTH:
-						az--
-						dir = "north"
-						break
-					case wall | EAST:
-					case wallOn | EAST:
-						ax++
-						dir = "east"
-						break
-					case wall | WEST:
-					case wallOn | WEST:
-						ax--
-						dir = "west"
-						break
-					case me.id | STAIR:
-					case me.id | CROSS:
-						ay --
-						dir = "top"
-						break
-					case me.id | TALLCROSS:
-					case me.id | DOOR:
-						ay ++
-						dir = "bottom"
-						break
+				if(getBlockState(block,me.blockStatesMap.face) === "ceiling"){
+					ay --
+					dir = "top"
+				}else if(getBlockState(block,me.blockStatesMap.face) === "floor"){
+					ay ++
+					dir = "bottom"
+				}else if(getBlockState(block,me.blockStatesMap.facing) === "north"){
+					az++
+					dir = "south"
+				}else if(getBlockState(block,me.blockStatesMap.facing) === "south"){
+					az--
+					dir = "north"
+				}else if(getBlockState(block,me.blockStatesMap.facing) === "east"){
+					ax++
+					dir = "east"
+				}else if(getBlockState(block,me.blockStatesMap.facing) === "west"){
+					ax--
+					dir = "west"
 				}
 				
 				var a = world.getBlock(ax,ay,az)
@@ -7611,6 +9418,7 @@
 	{
 		name:"repeater",
 		Name:"Redstone Repeater",
+		blockStates: [{"name":"delay","values":["1","2","3","4"]},{"name":"facing","values":["north","south","west","east"]},{"name":"locked","values":[false,true]},{"name":"powered","values":[false,true]}],
 		flatIcon:true,
 		iconTexture:"repeaterIcon",
 		repeater:true,
@@ -7630,124 +9438,28 @@
 			var tx = x, ty = y, tz = z //pointing to
 			var side //side of block it's pointing to
 			var block = world.getBlock(x,y,z)
-			var d1 = this.id, d2 = this.id | SLAB, d3 = this.id | STAIR, d4 = this.id | DOOR //delay
-			var D1 = this.id | PANE, D2 = this.id | PORTAL, D3 = this.id | WALLFLAT, D4 = this.id | TRAPDOOROPEN //delay for on repeaters
-			switch(block){
-				case d1 | NORTH:
-				case d2 | NORTH:
-				case d3 | NORTH:
-				case d4 | NORTH:
-				case D1 | NORTH:
-				case D2 | NORTH:
-				case D3 | NORTH:
-				case D4 | NORTH:
-					fz--
-					tz++
-					side = "south"
-					break
-				case d1 | SOUTH:
-				case d2 | SOUTH:
-				case d3 | SOUTH:
-				case d4 | SOUTH:
-				case D1 | SOUTH:
-				case D2 | SOUTH:
-				case D3 | SOUTH:
-				case D4 | SOUTH:
-					fz++
-					tz--
-					side = "north"
-					break
-				case d1 | EAST:
-				case d2 | EAST:
-				case d3 | EAST:
-				case d4 | EAST:
-				case D1 | EAST:
-				case D2 | EAST:
-				case D3 | EAST:
-				case D4 | EAST:
-					fx--
-					tx++
-					side = "east"
-					break
-				case d1 | WEST:
-				case d2 | WEST:
-				case d3 | WEST:
-				case d4 | WEST:
-				case D1 | WEST:
-				case D2 | WEST:
-				case D3 | WEST:
-				case D4 | WEST:
-					fx++
-					tx--
-					side = "west"
-					break
+			if(getBlockState(block,this.blockStatesMap.facing) === "north"){
+				fz--
+				tz++
+				side = "south"
+			}else if(getBlockState(block,this.blockStatesMap.facing) === "south"){
+				fz++
+				tz--
+				side = "north"
+			}else if(getBlockState(block,this.blockStatesMap.facing) === "east"){
+				fx--
+				tx++
+				side = "east"
+			}else if(getBlockState(block,this.blockStatesMap.facing) === "west"){
+				fx++
+				tx--
+				side = "west"
 			}
 			if(fx === x && fy === y && fz === z) return console.log("doesn't match up") //doesn't match up
-			var delay
-			switch(block){
-				case d1 | NORTH:
-				case d1 | SOUTH:
-				case d1 | EAST:
-				case d1 | WEST:
-				case D1 | NORTH:
-				case D1 | SOUTH:
-				case D1 | EAST:
-				case D1 | WEST:
-					delay = 1
-					break
-				case d2 | NORTH:
-				case d2 | SOUTH:
-				case d2 | EAST:
-				case d2 | WEST:
-				case D2 | NORTH:
-				case D2 | SOUTH:
-				case D2 | EAST:
-				case D2 | WEST:
-					delay = 2
-					break
-				case d3 | NORTH:
-				case d3 | SOUTH:
-				case d3 | EAST:
-				case d3 | WEST:
-				case D3 | NORTH:
-				case D3 | SOUTH:
-				case D3 | EAST:
-				case D3 | WEST:
-					delay = 3
-					break
-				case d4 | NORTH:
-				case d4 | SOUTH:
-				case d4 | EAST:
-				case d4 | WEST:
-				case D4 | NORTH:
-				case D4 | SOUTH:
-				case D4 | EAST:
-				case D4 | WEST:
-					delay = 4
-					break
-			}
+			var delay = +getBlockState(block,this.blockStatesMap.delay)
 			if(!delay) return console.log("delay hasn't been set")
 			
-			var on = false
-			switch(block){ //todo: make it an if loop
-				case D1 | NORTH:
-				case D2 | NORTH:
-				case D3 | NORTH:
-				case D4 | NORTH:
-				case D1 | SOUTH:
-				case D2 | SOUTH:
-				case D3 | SOUTH:
-				case D4 | SOUTH:
-				case D1 | EAST:
-				case D2 | EAST:
-				case D3 | EAST:
-				case D4 | EAST:
-				case D1 | WEST:
-				case D2 | WEST:
-				case D3 | WEST:
-				case D4 | WEST:
-					on = true
-			}
+			var on = getBlockState(block,this.blockStatesMap.powered)
 
 			var tblock = world.getBlock(tx,ty,tz)
 			if(tblock && blockData[tblock].carryRedstone){
@@ -7767,142 +9479,12 @@
 			
 			var shouldBeOn = world.getRepeaterPower(x,y,z,fx,fy,fz) || world.getBlockPower(fx,fy,fz,null) ? true : false
 			if(on === shouldBeOn) return
-			var t = function(){
+			var t = () => {
 				block = world.getBlock(x,y,z)
 				var on = world.getRepeaterPower(x,y,z,fx,fy,fz) || world.getBlockPower(fx,fy,fz,null) ? true : false //should it be on?
-				var isOn = false
-				switch(block){ //todo: make it an if loop
-					case D1 | NORTH:
-					case D2 | NORTH:
-					case D3 | NORTH:
-					case D4 | NORTH:
-					case D1 | SOUTH:
-					case D2 | SOUTH:
-					case D3 | SOUTH:
-					case D4 | SOUTH:
-					case D1 | EAST:
-					case D2 | EAST:
-					case D3 | EAST:
-					case D4 | EAST:
-					case D1 | WEST:
-					case D2 | WEST:
-					case D3 | WEST:
-					case D4 | WEST:
-						isOn = true
-				}
+				var isOn = getBlockState(block,this.blockStatesMap.powered)
 				if(on !== isOn) {
-					var target
-					var f = "north"
-					switch(block){
-						case d1 | NORTH:
-							target = D1
-							break
-						case d2 | NORTH:
-							target = D2
-							break
-						case d3 | NORTH:
-							target = D3
-							break
-						case d4 | NORTH:
-							target = D4
-							break
-						case D1 | NORTH:
-							target = d1
-							break
-						case D2 | NORTH:
-							target = d2
-							break
-						case D3 | NORTH:
-							target = d3
-							break
-						case D4 | NORTH:
-							target = d4
-							break
-						case d1 | SOUTH:
-							target = D1, f = "south"
-							break
-						case d2 | SOUTH:
-							target = D2, f = "south"
-							break
-						case d3 | SOUTH:
-							target = D3, f = "south"
-							break
-						case d4 | SOUTH:
-							target = D4, f = "south"
-							break
-						case D1 | SOUTH:
-							target = d1, f = "south"
-							break
-						case D2 | SOUTH:
-							target = d2, f = "south"
-							break
-						case D3 | SOUTH:
-							target = d3, f = "south"
-							break
-						case D4 | SOUTH:
-							target = d4, f = "south"
-							break
-						case d1 | EAST:
-							target = D1, f = "east"
-							break
-						case d2 | EAST:
-							target = D2, f = "east"
-							break
-						case d3 | EAST:
-							target = D3, f = "east"
-							break
-						case d4 | EAST:
-							target = D4, f = "east"
-							break
-						case D1 | EAST:
-							target = d1, f = "east"
-							break
-						case D2 | EAST:
-							target = d2, f = "east"
-							break
-						case D3 | EAST:
-							target = d3, f = "east"
-							break
-						case D4 | EAST:
-							target = d4, f = "east"
-							break
-						case d1 | WEST:
-							target = D1, f = "west"
-							break
-						case d2 | WEST:
-							target = D2, f = "west"
-							break
-						case d3 | WEST:
-							target = D3, f = "west"
-							break
-						case d4 | WEST:
-							target = D4, f = "west"
-							break
-						case D1 | WEST:
-							target = d1, f = "west"
-							break
-						case D2 | WEST:
-							target = d2, f = "west"
-							break
-						case D3 | WEST:
-							target = d3, f = "west"
-							break
-						case D4 | WEST:
-							target = d4, f = "west"
-							break
-					}
-					switch(f){
-						case "north":
-							break
-						case "south":
-							target |= SOUTH
-							break
-						case "east":
-							target |= EAST
-							break
-						case "west":
-							target |= WEST
-					}
+					var target = setBlockState(block,this.blockStatesMap.powered,on)
 					if(block !== target) world.setBlock(x,y,z,target,false,false,false,false)
 					
 					var tblock = world.getBlock(tx,ty,tz)
@@ -7929,226 +9511,29 @@
 		onclick:function(x,y,z,world){
 			var me = blockData[blockIds.repeater]
 			var block = world.getBlock(x,y,z)
-			var d1 = me.id, d2 = me.id | SLAB, d3 = me.id | STAIR, d4 = me.id | DOOR //delay
-			var D1 = me.id | PANE, D2 = me.id | PORTAL, D3 = me.id | WALLFLAT, D4 = me.id | TRAPDOOROPEN //delay for on repeaters
-			var target
-			switch(block){
-				case d1 | NORTH:
-					target = d2 | NORTH
-					break
-				case d2 | NORTH:
-					target = d3 | NORTH
-					break
-				case d3 | NORTH:
-					target = d4 | NORTH
-					break
-				case d4 | NORTH:
-					target = d1 | NORTH
-					break
-				case D1 | NORTH:
-					target = D2 | NORTH
-					break
-				case D2 | NORTH:
-					target = D3 | NORTH
-					break
-				case D3 | NORTH:
-					target = D4 | NORTH
-					break
-				case D4 | NORTH:
-					target = D1 | NORTH
-					break
-				case d1 | SOUTH:
-					target = d2 | SOUTH
-					break
-				case d2 | SOUTH:
-					target = d3 | SOUTH
-					break
-				case d3 | SOUTH:
-					target = d4 | SOUTH
-					break
-				case d4 | SOUTH:
-					target = d1 | SOUTH
-					break
-				case D1 | SOUTH:
-					target = D2 | SOUTH
-					break
-				case D2 | SOUTH:
-					target = D3 | SOUTH
-					break
-				case D3 | SOUTH:
-					target = D4 | SOUTH
-					break
-				case D4 | SOUTH:
-					target = D1 | SOUTH
-					break
-				case d1 | EAST:
-					target = d2 | EAST
-					break
-				case d2 | EAST:
-					target = d3 | EAST
-					break
-				case d3 | EAST:
-					target = d4 | EAST
-					break
-				case d4 | EAST:
-					target = d1 | EAST
-					break
-				case D1 | EAST:
-					target = D2 | EAST
-					break
-				case D2 | EAST:
-					target = D3 | EAST
-					break
-				case D3 | EAST:
-					target = D4 | EAST
-					break
-				case D4 | EAST:
-					target = D1 | EAST
-					break
-				case d1 | WEST:
-					target = d2 | WEST
-					break
-				case d2 | WEST:
-					target = d3 | WEST
-					break
-				case d3 | WEST:
-					target = d4 | WEST
-					break
-				case d4 | WEST:
-					target = d1 | WEST
-					break
-				case D1 | WEST:
-					target = D2 | WEST
-					break
-				case D2 | WEST:
-					target = D3 | WEST
-					break
-				case D3 | WEST:
-					target = D4 | WEST
-					break
-				case D4 | WEST:
-					target = D1 | WEST
-					break
-			}
+			let prevDelay = getBlockState(block,me.blockStatesMap.delay)
+			var target = setBlockState(block,me.blockStatesMap.delay, prevDelay === "4" ? "1" : ""+(+prevDelay+1))
 			world.setBlock(x,y,z,target)
 		},
 		getFacing:function(x,y,z,world){
 			var block = world.getBlock(x,y,z)
-			var d1 = this.id, d2 = this.id | SLAB, d3 = this.id | STAIR, d4 = this.id | DOOR //delay
-			var D1 = this.id | PANE, D2 = this.id | PORTAL, D3 = this.id | WALLFLAT, D4 = this.id | TRAPDOOROPEN //delay for on repeaters
-			var f
-			switch(block){
-				case d1 | NORTH:
-				case d2 | NORTH:
-				case d3 | NORTH:
-				case d4 | NORTH:
-				case D1 | NORTH:
-				case D2 | NORTH:
-				case D3 | NORTH:
-				case D4 | NORTH:
-					f = "north"
-					break
-				case d1 | SOUTH:
-				case d2 | SOUTH:
-				case d3 | SOUTH:
-				case d4 | SOUTH:
-				case D1 | SOUTH:
-				case D2 | SOUTH:
-				case D3 | SOUTH:
-				case D4 | SOUTH:
-					f = "south"
-					break
-				case d1 | EAST:
-				case d2 | EAST:
-				case d3 | EAST:
-				case d4 | EAST:
-				case D1 | EAST:
-				case D2 | EAST:
-				case D3 | EAST:
-				case D4 | EAST:
-					f = "east"
-					break
-				case d1 | WEST:
-				case d2 | WEST:
-				case d3 | WEST:
-				case d4 | WEST:
-				case D1 | WEST:
-				case D2 | WEST:
-				case D3 | WEST:
-				case D4 | WEST:
-					f = "west"
-					break
-			}
+			var f = getBlockState(block,this.blockStatesMap.facing)
 			return f
 		},
 		canHavePower:function(/*repeater*/rx,ry,rz,/*other thing*/x,y,z,world){
 			var tx = rx, ty = ry, tz = rz
 			var block = world.getBlock(rx,ry,rz)
-			var d1 = this.id, d2 = this.id | SLAB, d3 = this.id | STAIR, d4 = this.id | DOOR //delay
-			var D1 = this.id | PANE, D2 = this.id | PORTAL, D3 = this.id | WALLFLAT, D4 = this.id | TRAPDOOROPEN //delay for on repeaters
-			switch(block){
-				case d1 | NORTH:
-				case d2 | NORTH:
-				case d3 | NORTH:
-				case d4 | NORTH:
-				case D1 | NORTH:
-				case D2 | NORTH:
-				case D3 | NORTH:
-				case D4 | NORTH:
-					tz++
-					break
-				case d1 | SOUTH:
-				case d2 | SOUTH:
-				case d3 | SOUTH:
-				case d4 | SOUTH:
-				case D1 | SOUTH:
-				case D2 | SOUTH:
-				case D3 | SOUTH:
-				case D4 | SOUTH:
-					tz--
-					break
-				case d1 | EAST:
-				case d2 | EAST:
-				case d3 | EAST:
-				case d4 | EAST:
-				case D1 | EAST:
-				case D2 | EAST:
-				case D3 | EAST:
-				case D4 | EAST:
-					tx++
-					break
-				case d1 | WEST:
-				case d2 | WEST:
-				case d3 | WEST:
-				case d4 | WEST:
-				case D1 | WEST:
-				case D2 | WEST:
-				case D3 | WEST:
-				case D4 | WEST:
-					tx--
-					break
+			if(getBlockState(block,this.blockStatesMap.facing) === "north"){
+				tz++
+			}else if(getBlockState(block,this.blockStatesMap.facing) === "south"){
+				tz--
+			}else if(getBlockState(block,this.blockStatesMap.facing) === "east"){
+				tx++
+			}else if(getBlockState(block,this.blockStatesMap.facing) === "west"){
+				tx--
 			}
 			
-			var on = false
-			switch(block){ //todo: make it an if loop
-				case D1 | NORTH:
-				case D2 | NORTH:
-				case D3 | NORTH:
-				case D4 | NORTH:
-				case D1 | SOUTH:
-				case D2 | SOUTH:
-				case D3 | SOUTH:
-				case D4 | SOUTH:
-				case D1 | EAST:
-				case D2 | EAST:
-				case D3 | EAST:
-				case D4 | EAST:
-				case D1 | WEST:
-				case D2 | WEST:
-				case D3 | WEST:
-				case D4 | WEST:
-					on = true
-			}
+			var on = getBlockState(block,this.blockStatesMap.powered)
 
 			if(on && tx === x && ty === y && tz === z){
 				return 15
@@ -8161,174 +9546,111 @@
 	{
 		name:"piston",
 		Name:"Piston",
+		blockStates: "pistonSticky",
+		hardness: 1.5,
+		blastResistance: 1.5,
+		material: "mineable/pickaxe",
 		textures:["pistonBack","pistonFront","pistonSide"],
 		piston:true,
 		headSideTexture:"pistonHeadSide",
 		frontOpenTexture:"pistonFrontOpen",
 		headBackTexture:"pistonFront",
+		copyFromProperties:["extend","retract"],
 		onpowerupdate: function(x,y,z,sx,sy,sz,blockPowerChanged,world){
 			var block = world.getBlock(x,y,z)
-			var extended = false, facing, attachedHead = false
-			switch(block){
-				case this.id:
-					facing = "top"
-					break
-				case this.id | FLIP:
-					facing = "bottom"
-					break
-				case this.id | SLAB | NORTH:
-					facing = "north"
-					break
-				case this.id | SLAB | SOUTH:
-					facing = "south"
-					break
-				case this.id | SLAB | EAST:
-					facing = "east"
-					break
-				case this.id | SLAB | WEST:
-					facing = "west"
-					break
-				case this.id | TALLCROSS:
-					facing = "top"
-					extended = true
-					break
-				case this.id | TALLCROSS | FLIP:
-					facing = "bottom"
-					extended = true
-					break
-				case this.id | PORTAL | NORTH:
-					facing = "north"
-					extended = true
-					break
-				case this.id | PORTAL | SOUTH:
-					facing = "south"
-					extended = true
-					break
-				case this.id | PORTAL | EAST:
-					facing = "east"
-					extended = true
-					break
-				case this.id | PORTAL | WEST:
-					facing = "west"
-					extended = true
-					break
-				default:
-					return //parts like piston heads shouldn't do the calculations when power changes
-			}
+			var extended = false, attachedHead = false
 			if(extended){
-				switch(facing){
-					case "top":
-						if(world.getBlock(x,y+1,z) === (this.id | STAIR)) attachedHead = true
+				switch(getBlockState(block,this.blockStatesMap.facing)){
+					case "up":
+						if(blockData[world.getBlock(x,y+1,z)].name === "pistonHead") attachedHead = true
 						break
-					case "bottom":
-						if(world.getBlock(x,y-1,z) === (this.id | STAIR | FLIP)) attachedHead = true
+					case "down":
+						if(blockData[world.getBlock(x,y-1,z)].name === "pistonHead") attachedHead = true
 						break
 					case "north":
-						if(world.getBlock(x,y,z-1) === (this.id | DOOR | NORTH)) attachedHead = true
+						if(blockData[world.getBlock(x,y,z-1)].name === "pistonHead") attachedHead = true
 						break
 					case "south":
-						if(world.getBlock(x,y,z+1) === (this.id | DOOR | SOUTH)) attachedHead = true
+						if(blockData[world.getBlock(x,y,z+1)].name === "pistonHead") attachedHead = true
 						break
 					case "east":
-						if(world.getBlock(x-1,y,z) === (this.id | DOOR | EAST)) attachedHead = true
+						if(blockData[world.getBlock(x-1,y,z)].name === "pistonHead") attachedHead = true
 						break
 					case "west":
-						if(world.getBlock(x+1,y,z) === (this.id | DOOR | WEST)) attachedHead = true
+						if(blockData[world.getBlock(x+1,y,z)].name === "pistonHead") attachedHead = true
 						break
 				}
 			}
 			
 			var power = world.getRedstonePower(x,y,z) || world.getSurroundingBlockPower(x,y,z)
 			if(power && !extended){
-				this.extend(x,y,z,facing,world)
+				this.extend(x,y,z,world,block)
 			}else if(!power && extended && attachedHead){
-				this.retract(x,y,z,facing,world)
+				this.retract(x,y,z,world,block)
 			}
 		},
 		onupdate:function(x,y,z,b,w,sx,sy,sz){ //onupdate is run when placed
 			this.onpowerupdate(x,y,z,null,null,null,null,w)
 		},
 		onbreak:function(x,y,z, prevBlock, prevTags,world){
-			//dissapear if it isn't connected (it = piston heads and piston open)
-			let tx = x, ty = y, tz = z
-			switch(prevBlock){
-				case this.id | TALLCROSS:
-				case this.id | STAIR | FLIP:
-					ty++
-					break
-				case this.id | TALLCROSS | FLIP:
-				case this.id | STAIR:
-					ty--
-					break
-				case this.id | PORTAL | NORTH:
-				case this.id | DOOR | SOUTH:
-					tz--
-					break
-				case this.id | PORTAL | SOUTH:
-				case this.id | DOOR | NORTH:
-					tz++
-					break
-				case this.id | PORTAL | EAST:
-				case this.id | DOOR | WEST:
-					tx--
-					break
-				case this.id | PORTAL | WEST:
-				case this.id | DOOR | EAST:
-					tx++
-					break
-				default:
-					return //unextended pistons
+			//dissapear if it isn't connected (it is piston heads and piston open)
+			if(getBlockState(prevBlock,this.blockStatesMap.extended)){
+				let tx = 0, ty = 0, tz = 0
+				switch(getBlockState(prevBlock,this.blockStatesMap.facing)){
+					case "up":
+						ty++
+						break
+					case "down":
+						ty--
+						break
+					case "north":
+						tz--
+						break
+					case "south":
+						tz++
+						break
+					case "east":
+						tx--
+						break
+					case "west":
+						tx++
+						break
+				}
+				world.setBlock(tx,ty,tz,0,false,false,false,false)
 			}
-			world.setBlock(tx,ty,tz,0,false,false,false,false)
 		},
-		extend:function(x,y,z, facing,world){
+		extend:function(x,y,z,world,block){
 			var tx = x, ty = y, tz = z, mx = 0, my = 0, mz = 0
-			var head, headCut, open
+			let type = this.name === "pistonSticky" ? "sticky" : "normal"
+			let facing = getBlockState(prevBlock,this.blockStatesMap.facing)
+			let head = blockIds.pistonHead + blockStateMaps.pistonHead.facing[facing] + blockStateMaps.pistonHead.type[type]
+			let headCut = blockIds.pistonHead + blockStateMaps.pistonHead.facing[facing] + blockStateMaps.pistonHead.type[type] + blockStateMaps.pistonHead.short.true
+			let open = setBlockState(block,this.blockStatesMap.extended,true)
 			switch(facing){
-				case "top":
-					open = this.id | TALLCROSS
-					head = this.id | STAIR
-					headCut = this.id | CROSS
+				case "up":
 					ty ++
 					my = 1
 					break
-				case "bottom":
-					open = this.id | TALLCROSS | FLIP
-					head = this.id | STAIR | FLIP
-					headCut = this.id | CROSS | FLIP
+				case "down":
 					ty --
 					my = -1
 					break
 				case "north":
-					open = this.id | PORTAL | NORTH
-					head = this.id | DOOR | NORTH
-					headCut = this.id | PANE | NORTH
 					tz --
 					mz = -1
 					break
 				case "south":
-					open = this.id | PORTAL | SOUTH
-					head = this.id | DOOR | SOUTH
-					headCut = this.id | PANE | SOUTH
 					tz ++
 					mz = 1
 					break
 				case "east":
-					open = this.id | PORTAL | EAST
-					head = this.id | DOOR | EAST
-					headCut = this.id | PANE | EAST
 					tx --
 					mx = -1
 					break
 				case "west":
-					open = this.id | PORTAL | WEST
-					head = this.id | DOOR | WEST
-					headCut = this.id | PANE | WEST
 					tx ++
 					mx = 1
 					break
-				default:
-					return console.log("oh no! piston isn't facing anywhere")
 			}
 			var push = getPistonPushedBlocks(x,y,z,mx,my,mz,world)
 			if(push === false) return
@@ -8347,48 +9669,32 @@
 				world.addEntity(new entities[entityIds.MovingBlock](push[i+3],bx,by,bz,bx+mx,by+my,bz+mz, tickTime*2, true, tags),false)
 			}
 		},
-		retract:function(x,y,z, facing,world){
+		retract:function(x,y,z,world,block){
 			var tx = x, ty = y, tz = z
-			var head, headCut, body
+			let type = this.name === "pistonSticky" ? "sticky" : "normal"
+			let facing = getBlockState(prevBlock,this.blockStatesMap.facing)
+			let head = blockIds.pistonHead + blockStateMaps.pistonHead.facing[facing] + blockStateMaps.pistonHead.type[type]
+			let headCut = blockIds.pistonHead + blockStateMaps.pistonHead.facing[facing] + blockStateMaps.pistonHead.type[type] + blockStateMaps.pistonHead.short.true
+			let body = setBlockState(block,this.blockStatesMap.extended,false)
 			switch(facing){
 				case "top":
-					body = this.id
-					head = this.id | STAIR
-					headCut = this.id | CROSS
 					ty ++
 					break
 				case "bottom":
-					body = this.id | FLIP
-					head = this.id | STAIR | FLIP
-					headCut = this.id | CROSS | FLIP
 					ty --
 					break
 				case "north":
-					body = this.id | SLAB | NORTH
-					head = this.id | DOOR | NORTH
-					headCut = this.id | PANE | NORTH
 					tz --
 					break
 				case "south":
-					body = this.id | SLAB | SOUTH
-					head = this.id | DOOR | SOUTH
-					headCut = this.id | PANE | SOUTH
 					tz ++
 					break
 				case "east":
-					body = this.id | SLAB | EAST
-					head = this.id | DOOR | EAST
-					headCut = this.id | PANE | EAST
 					tx --
 					break
 				case "west":
-					body = this.id | SLAB | WEST
-					head = this.id | DOOR | WEST
-					headCut = this.id | PANE | WEST
 					tx ++
 					break
-				default:
-					return console.log("oh no! piston isn't facing anywhere")
 			}
 			world.setBlock(tx,ty,tz,0,false,false,false,false)
 			var e = new entities[entityIds.MovingBlock](head,tx,ty,tz,x,y,z, tickTime*2)
@@ -8399,13 +9705,30 @@
 			world.setTimeout(function(){
 				world.setBlock(x,y,z,body,false,false,false,false)
 			}, tickTime*2)
+
+			if(this.name === "pistonSticky"){
+				var pull = getPistonPulledBlocks(x,y,z,mx,my,mz,world)
+				if(pull){
+					for(var i=0; i<pull.length; i+=4){
+						var bx = pull[i], by = pull[i+1], bz = pull[i+2]
+						var tags = world.getTags(bx,by,bz)
+						world.setBlock(bx,by,bz,0,false,false,false,false)
+						world.addEntity(new entities[entityIds.MovingBlock](pull[i+3],bx,by,bz,bx-mx,by-my,bz-mz, tickTime*2, true, tags),false)
+					}
+				}
+			}
 		},
 		category:"redstone"
 	},
 	
 	{
 		name:"smoothQuartz",
+		nameMcd:"smooth_quartz",
 		Name:"Smooth Quartz Block",
+		harvestToolsNames: "stone",
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
 		textures:"quartzBlockBottom",
 		stoneSound:true,
 		category:"build"
@@ -8413,345 +9736,69 @@
 	
 	{
 		name:"pistonSticky",
+		nameMcd:"sticky_piston",
 		Name:"Sticky Piston",
+		blockStates: [{"name":"extended","values":[false,true]},{"name":"facing","values":["north","east","south","west","up","down"]}],
+		hardness: 1.5,
+		blastResistance: 1.5,
+		material: "mineable/pickaxe",
 		textures:["pistonBack","pistonFrontSticky","pistonSide"],
 		piston:true,
 		headSideTexture:"pistonHeadSide",
 		frontOpenTexture:"pistonFrontOpen",
 		headBackTexture:"pistonFront",
 		category:"redstone",
-		onpowerupdate: function(x,y,z,sx,sy,sz,blockPowerChanged,world){
-			var block = world.getBlock(x,y,z)
-			var extended = false, facing, attachedHead = false
-			switch(block){
-				case this.id:
-					facing = "top"
-					break
-				case this.id | FLIP:
-					facing = "bottom"
-					break
-				case this.id | SLAB | NORTH:
-					facing = "north"
-					break
-				case this.id | SLAB | SOUTH:
-					facing = "south"
-					break
-				case this.id | SLAB | EAST:
-					facing = "east"
-					break
-				case this.id | SLAB | WEST:
-					facing = "west"
-					break
-				case this.id | TALLCROSS:
-					facing = "top"
-					extended = true
-					break
-				case this.id | TALLCROSS | FLIP:
-					facing = "bottom"
-					extended = true
-					break
-				case this.id | PORTAL | NORTH:
-					facing = "north"
-					extended = true
-					break
-				case this.id | PORTAL | SOUTH:
-					facing = "south"
-					extended = true
-					break
-				case this.id | PORTAL | EAST:
-					facing = "east"
-					extended = true
-					break
-				case this.id | PORTAL | WEST:
-					facing = "west"
-					extended = true
-					break
-				default:
-					return //parts like piston heads shouldn't do the calculations when power changes
-			}
-			if(extended){
-				switch(facing){
-					case "top":
-						if(world.getBlock(x,y+1,z) === (this.id | STAIR)) attachedHead = true
-						break
-					case "bottom":
-						if(world.getBlock(x,y-1,z) === (this.id | STAIR | FLIP)) attachedHead = true
-						break
-					case "north":
-						if(world.getBlock(x,y,z-1) === (this.id | DOOR | NORTH)) attachedHead = true
-						break
-					case "south":
-						if(world.getBlock(x,y,z+1) === (this.id | DOOR | SOUTH)) attachedHead = true
-						break
-					case "east":
-						if(world.getBlock(x-1,y,z) === (this.id | DOOR | EAST)) attachedHead = true
-						break
-					case "west":
-						if(world.getBlock(x+1,y,z) === (this.id | DOOR | WEST)) attachedHead = true
-						break
-				}
-			}
-			
-			var power = world.getRedstonePower(x,y,z) || world.getSurroundingBlockPower(x,y,z)
-			if(power && !extended){
-				this.extend(x,y,z,facing,world)
-			}else if(!power && extended && attachedHead){
-				this.retract(x,y,z,facing,world)
-			}
-		},
-		onupdate:function(x,y,z,b,w,sx,sy,sz){ //onupdate is run when placed
-			this.onpowerupdate(x,y,z,null,null,null,null,w)
-		},
-		onbreak:function(x,y,z, prevBlock, prevTags,world){
-			//dissapear if it isn't connected (it = piston heads and piston open)
-			let tx = x, ty = y, tz = z
-			switch(prevBlock){
-				case this.id | TALLCROSS:
-				case this.id | STAIR | FLIP:
-					ty++
-					break
-				case this.id | TALLCROSS | FLIP:
-				case this.id | STAIR:
-					ty--
-					break
-				case this.id | PORTAL | NORTH:
-				case this.id | DOOR | SOUTH:
-					tz--
-					break
-				case this.id | PORTAL | SOUTH:
-				case this.id | DOOR | NORTH:
-					tz++
-					break
-				case this.id | PORTAL | EAST:
-				case this.id | DOOR | WEST:
-					tx--
-					break
-				case this.id | PORTAL | WEST:
-				case this.id | DOOR | EAST:
-					tx++
-					break
-				default:
-					return //unextended pistons
-			}
-			world.setBlock(tx,ty,tz,0,false,false,false,false)
-		},
-		extend:function(x,y,z, facing,world){
-			var tx = x, ty = y, tz = z, mx = 0, my = 0, mz = 0
-			var head, headCut, open
-			switch(facing){
-				case "top":
-					open = this.id | TALLCROSS
-					head = this.id | STAIR
-					headCut = this.id | CROSS
-					ty ++
-					my = 1
-					break
-				case "bottom":
-					open = this.id | TALLCROSS | FLIP
-					head = this.id | STAIR | FLIP
-					headCut = this.id | CROSS | FLIP
-					ty --
-					my = -1
-					break
-				case "north":
-					open = this.id | PORTAL | NORTH
-					head = this.id | DOOR | NORTH
-					headCut = this.id | PANE | NORTH
-					tz --
-					mz = -1
-					break
-				case "south":
-					open = this.id | PORTAL | SOUTH
-					head = this.id | DOOR | SOUTH
-					headCut = this.id | PANE | SOUTH
-					tz ++
-					mz = 1
-					break
-				case "east":
-					open = this.id | PORTAL | EAST
-					head = this.id | DOOR | EAST
-					headCut = this.id | PANE | EAST
-					tx --
-					mx = -1
-					break
-				case "west":
-					open = this.id | PORTAL | WEST
-					head = this.id | DOOR | WEST
-					headCut = this.id | PANE | WEST
-					tx ++
-					mx = 1
-					break
-				default:
-					return console.log("oh no! piston isn't facing anywhere")
-			}
-			var push = getPistonPushedBlocks(x,y,z,mx,my,mz,world)
-			if(push === false) return
-			
-			world.setBlock(x,y,z,open,false,false,false,false)
-			var e = new entities[entityIds.MovingBlock](headCut,x,y,z,tx,ty,tz, tickTime*2, true)
-			for(var i=0; i<push.length; i+=4){
-				var bx = push[i], by = push[i+1], bz = push[i+2]
-				var tags = world.getTags(bx,by,bz)
-				world.setBlock(bx,by,bz,0,false,false,false,false)
-				world.addEntity(new entities[entityIds.MovingBlock](push[i+3],bx,by,bz,bx+mx,by+my,bz+mz, tickTime*2, true, tags),false)
-			}
-			e.endAs = head
-			world.addEntity(e,false)
-			//world.setTimeout(function(){
-			//	e.changeBlock(head)
-			//}, tickTime*1.5)
-		},
-		retract:function(x,y,z, facing,world){
-			var tx = x, ty = y, tz = z, mx = 0, my = 0, mz = 0
-			var head, headCut, body
-			switch(facing){
-				case "top":
-					body = this.id
-					head = this.id | STAIR
-					headCut = this.id | CROSS
-					ty ++
-					my = 1
-					break
-				case "bottom":
-					body = this.id | FLIP
-					head = this.id | STAIR | FLIP
-					headCut = this.id | CROSS | FLIP
-					ty --
-					my = -1
-					break
-				case "north":
-					body = this.id | SLAB | NORTH
-					head = this.id | DOOR | NORTH
-					headCut = this.id | PANE | NORTH
-					tz --
-					mz = -1
-					break
-				case "south":
-					body = this.id | SLAB | SOUTH
-					head = this.id | DOOR | SOUTH
-					headCut = this.id | PANE | SOUTH
-					tz ++
-					mz = 1
-					break
-				case "east":
-					body = this.id | SLAB | EAST
-					head = this.id | DOOR | EAST
-					headCut = this.id | PANE | EAST
-					tx --
-					mx = -1
-					break
-				case "west":
-					body = this.id | SLAB | WEST
-					head = this.id | DOOR | WEST
-					headCut = this.id | PANE | WEST
-					tx ++
-					mx = 1
-					break
-				default:
-					return console.log("oh no! piston isn't facing anywhere")
-			}
-			world.setBlock(tx,ty,tz,0,false,false,false,false)
-			var e = new entities[entityIds.MovingBlock](head,tx,ty,tz,x,y,z, tickTime*2)
-			world.addEntity(e,false)
-			//world.setTimeout(function(){
-			//	e.changeBlock(headCut)
-			//}, tickTime*0.5)
-			world.setTimeout(function(){
-				world.setBlock(x,y,z,body,false,false,false,false)
-			}, tickTime*2)
-			
-			var pull = getPistonPulledBlocks(x,y,z,mx,my,mz,world)
-			if(pull){
-				for(var i=0; i<pull.length; i+=4){
-					var bx = pull[i], by = pull[i+1], bz = pull[i+2]
-					var tags = world.getTags(bx,by,bz)
-					world.setBlock(bx,by,bz,0,false,false,false,false)
-					world.addEntity(new entities[entityIds.MovingBlock](pull[i+3],bx,by,bz,bx-mx,by-my,bz-mz, tickTime*2, true, tags),false)
-				}
-			}
-		}
+		copyPropertiesHere:"piston",
 	},
 	
 	{
 		name:"observer",
 		Name:"Observer",
+		harvestToolsNames: "stone",
+		blockStates: [{"name":"facing","values":["north","east","south","west","up","down"]},{"name":"powered","values":[false,true]}],
+		material: "mineable/pickaxe",
 		textures:["observerTop","observerTop","observerBack","observerFront","observerSide","observerSide"],
-		blastResistance:3.5,
+		blastResistance:3,
 		hardness:3,
 		getFacing:function(x,y,z,world){
 			var block = world.getBlock(x,y,z)
-			var facing
-			switch(block){
-				case this.id | NORTH:
-				case this.id | STAIR | NORTH:
-					facing = "north"
-					break
-				case this.id | SOUTH:
-				case this.id | STAIR | SOUTH:
-					facing = "south"
-					break
-				case this.id | EAST:
-				case this.id | STAIR | EAST:
-					facing = "east"
-					break
-				case this.id | WEST:
-				case this.id | STAIR | WEST:
-					facing = "west"
-					break
-				case this.id | SLAB:
-				case this.id | CROSS:
+			var facing = getBlockState(block,this.blockStatesMap.facing)
+			switch(facing){
+				case "down":
 					facing = "bottom"
-					break
-				case this.id | SLAB | FLIP:
-				case this.id | CROSS | FLIP:
+				case "up":
 					facing = "top"
-					break
-				default:
-					return
 			}
 			return facing
 		},
 		detected:function(x,y,z,sx,sy,sz,world, detected = false){ //if detected is true, it will send a signal no matter what
 			var block = world.getBlock(x,y,z)
-			var facing, tx = 0, ty = 0, tz = 0, onBlock
-			switch(block){
-				case this.id | NORTH:
-					facing = "north"
+			if(getBlockState(block,this.blockStatesMap.powered)) return
+			var facing = getBlockState(block,this.blockStatesMap.facing), tx = 0, ty = 0, tz = 0, onBlock = setBlockState(block,this.blockStatesMap.powered,true)
+			switch(facing){
+				case "north":
 					tz = -1
-					onBlock = this.id | STAIR | NORTH
 					break
-				case this.id | SOUTH:
-					facing = "south"
+				case "south":
 					tz = 1
-					onBlock = this.id | STAIR | SOUTH
 					break
-				case this.id | EAST:
-					facing = "east"
+				case "east":
 					tx = -1
-					onBlock = this.id | STAIR | EAST
 					break
-				case this.id | WEST:
-					facing = "west"
+				case "west":
 					tx = 1
-					onBlock = this.id | STAIR | WEST
 					break
-				case this.id | SLAB:
-					facing = "bottom"
+				case "down":
 					ty = -1
-					onBlock = this.id | CROSS
 					break
-				case this.id | SLAB | FLIP:
-					facing = "top"
+				case "up":
 					ty = 1
-					onBlock = this.id | CROSS | FLIP
 					break
-				default:
-					return
 			}
 			
 			if(!(x+tx === sx && y+ty === sy && z+tz === sz) && !detected) return
 			
-			world.setTimeout(function(){
+			world.setTimeout(() => {
 				var curBlock = world.getBlock(x,y,z)
 				if(!(curBlock && blockData[curBlock].name === "observer")) return
 				
@@ -8780,27 +9827,26 @@
 		canHavePower:function(rx,ry,rz, x,y,z,world){
 			var block = world.getBlock(rx,ry,rz)
 			var tx = 0, ty = 0, tz = 0
-			switch(block){
-				case this.id | STAIR | NORTH:
+			var facing = getBlockState(block,this.blockStatesMap.facing)
+			switch(facing){
+				case "north":
 					tz = -1
 					break
-				case this.id | STAIR | SOUTH:
+				case "south":
 					tz = 1
 					break
-				case this.id | STAIR | EAST:
+				case "east":
 					tx = -1
 					break
-				case this.id | STAIR | WEST:
+				case "west":
 					tx = 1
 					break
-				case this.id | CROSS:
+				case "down":
 					ty = -1
 					break
-				case this.id | CROSS | FLIP:
+				case "up":
 					ty = 1
 					break
-				default:
-					return
 			}
 			
 			if(rx-tx === x && ry-ty === y && rz-tz === z) return 15
@@ -8817,6 +9863,7 @@
 	},
 	{
 		name:"redDye",
+		nameMcd:"red_dye",
 		Name:"Red Dye",
 		item:true,
 		dye:"red",
@@ -8824,6 +9871,7 @@
 	},
 	{
 		name:"lightGrayDye",
+		nameMcd:"light_gray_dye",
 		Name:"Light Gray Dye",
 		item:true,
 		dye:"lightGray",
@@ -8831,6 +9879,7 @@
 	},
 	{
 		name:"lightBlueDye",
+		nameMcd:"light_blue_dye",
 		Name:"Light Blue Dye",
 		item:true,
 		dye:"lightBlue",
@@ -8838,6 +9887,7 @@
 	},
 	{
 		name:"magentaDye",
+		nameMcd:"magenta_dye",
 		Name:"Magenta Dye",
 		item:true,
 		dye:"magenta",
@@ -8845,6 +9895,7 @@
 	},
 	{
 		name:"yellowDye",
+		nameMcd:"yellow_dye",
 		Name:"Yellow Dye",
 		item:true,
 		dye:"yellow",
@@ -8852,6 +9903,7 @@
 	},
 	{
 		name:"purpleDye",
+		nameMcd:"purple_dye",
 		Name:"Purple Dye",
 		item:true,
 		dye:"purple",
@@ -8859,6 +9911,7 @@
 	},
 	{
 		name:"orangeDye",
+		nameMcd:"orange_dye",
 		Name:"Orange Dye",
 		item:true,
 		dye:"orange",
@@ -8866,6 +9919,7 @@
 	},
 	{
 		name:"whiteDye",
+		nameMcd:"white_dye",
 		Name:"White Dye",
 		item:true,
 		dye:"white",
@@ -8873,6 +9927,7 @@
 	},
 	{
 		name:"greenDye",
+		nameMcd:"green_dye",
 		Name:"Green Dye",
 		item:true,
 		dye:"green",
@@ -8880,6 +9935,7 @@
 	},
 	{
 		name:"brownDye",
+		nameMcd:"brown_dye",
 		Name:"Brown Dye",
 		item:true,
 		dye:"brown",
@@ -8887,6 +9943,7 @@
 	},
 	{
 		name:"blackDye",
+		nameMcd:"black_dye",
 		Name:"Black Dye",
 		item:true,
 		dye:"black",
@@ -8894,6 +9951,7 @@
 	},
 	{
 		name:"pinkDye",
+		nameMcd:"pink_dye",
 		Name:"Pink Dye",
 		item:true,
 		dye:"pink",
@@ -8901,6 +9959,7 @@
 	},
 	{
 		name:"limeDye",
+		nameMcd:"lime_dye",
 		Name:"Lime Dye",
 		item:true,
 		dye:"lime",
@@ -8908,6 +9967,7 @@
 	},
 	{
 		name:"grayDye",
+		nameMcd:"gray_dye",
 		Name:"Gray Dye",
 		item:true,
 		dye:"gray",
@@ -8915,6 +9975,7 @@
 	},
 	{
 		name:"cyanDye",
+		nameMcd:"cyan_dye",
 		Name:"Cyan Dye",
 		item:true,
 		dye:"cyan",
@@ -8922,6 +9983,7 @@
 	},
 	{
 		name:"blueDye",
+		nameMcd:"blue_dye",
 		Name:"Blue Dye",
 		item:true,
 		dye:"blue",
@@ -8929,6 +9991,8 @@
 	},
 	{
 		name:"endPortal",
+		nameMcd:"end_portal",
+		hardness: Infinity,
 		flatIcon:true,
 		solid:false,
 		transparent:true,
@@ -8985,7 +10049,11 @@
 	
 	{
 		name:"pearlescentFroglight",
+		nameMcd:"pearlescent_froglight",
 		Name:"Pearlescent Froglight",
+		blockStates: "paleOakWood",
+		hardness: 0.3,
+		blastResistance: 0.3,
 		textures:["pearlescentFroglightTop","pearlescentFroglightSide"],
 		lightLevel:15,
 		shadow:false,
@@ -8993,7 +10061,11 @@
 	},
 	{
 		name:"verdantFroglight",
+		nameMcd:"verdant_froglight",
 		Name:"Verdant Froglight",
+		blockStates: "paleOakWood",
+		hardness: 0.3,
+		blastResistance: 0.3,
 		textures:["verdantFroglightTop","verdantFroglightSide"],
 		lightLevel:15,
 		shadow:false,
@@ -9001,7 +10073,11 @@
 	},
 	{
 		name:"ochreFroglight",
+		nameMcd:"ochre_froglight",
 		Name:"Ochre Froglight",
+		blockStates: "paleOakWood",
+		hardness: 0.3,
+		blastResistance: 0.3,
 		textures:["ochreFroglightTop","ochreFroglightSide"],
 		lightLevel:15,
 		shadow:false,
@@ -9009,7 +10085,12 @@
 	},
 	{
 		name:"mangroveLeaves",
+		nameMcd:"mangrove_leaves",
 		Name:"Mangrove Leaves",
+		blockStates: "oakLeaves",
+		decreaseLight: 1,
+		blastResistance: 0.2,
+		material: "leaves;mineable/hoe",
 		transparent: true,
 		cullFace:0,
 		hardness: 0.2,
@@ -9039,7 +10120,11 @@
 	},
 	{
 		name:"mangroveLog",
+		nameMcd:"mangrove_log",
 		Name:"Mangrove Log",
+		blockStates: "paleOakWood",
+		blastResistance: 2,
+		material: "mineable/axe",
 		textures:["mangroveLogTop","mangroveLog"],
 		hardness:2,
 		woodSound:true,
@@ -9051,7 +10136,11 @@
 	},
 	{
 		name:"strippedMangroveLog",
+		nameMcd:"stripped_mangrove_log",
 		Name:"Stripped Mangrove Log",
+		blockStates: "paleOakWood",
+		blastResistance: 2,
+		material: "mineable/axe",
 		textures:["strippedMangroveLogTop","strippedMangroveLog"],
 		hardness:2,
 		woodSound:true,
@@ -9071,10 +10160,14 @@
 		textures: ["strippedMangroveLog","strippedMangroveLog","strippedMangroveLogTop","strippedMangroveLog"],
 		SW: true, woodSound:true, hidden:true
 	},
-	{name:"mangrovePlanks", Name:"Mangrove Planks", type:"wood", category:"build",hardness:2, woodSound:true, burnChance:0.1, burnTime:40},
+	{name:"mangrovePlanks", nameMcd:"mangrove_planks", Name:"Mangrove Planks", blastResistance: 3, material: "mineable/axe", type:"wood", category:"build",hardness:2, woodSound:true, burnChance:0.1, burnTime:40},
 	{ 
 		name: "mangroveDoor",
+		nameMcd:"mangrove_door",
 		Name:"Mangrove Door",
+		blockStates: "oakDoor",
+		blastResistance: 3,
+		material: "mineable/axe",
 		transparent: true,
 		shadow: false,
 		textures: "mangroveDoorConnected",
@@ -9082,46 +10175,76 @@
 		woodSound:true,
 		hardness:3,
 		type:"wood",
-		category:"build"
+		category:"build",
+		copyPropertiesHere:"oakDoor"
 	},
 	{ 
 		name: "mangroveTrapdoor",
+		nameMcd:"mangrove_trapdoor",
 		Name:"Mangrove Trapdoor",
+		blockStates: "oakTrapdoor",
+		hardness: 3,
+		blastResistance: 3,
+		material: "mineable/axe",
 		transparent: true,
 		trapdoor: true,
 		woodSound: true,
-		category:"build"
+		category:"build",
+		copyPropertiesHere:"oakTrapdoor"
 	},
 	{
 		name:"mangroveButton",
+		nameMcd:"mangrove_button",
 		Name: "Mangrove Button",
+		blockStates: "lever",
+		solid: false,
+		hardness: 0.5,
+		blastResistance: 0.5,
+		material: "mineable/axe",
 		textures:"mangrovePlanks",
 		button:true,
 		transparent: true,
 		shadow:false,
-		category:"redstone"
+		category:"redstone",
+		copyPropertiesHere:"oakButton"
 	},
 	{
 		name: "mangrovePressurePlate",
+		nameMcd:"mangrove_pressure_plate",
 		Name: "Mangrove Pressure Plate",
+		blockStates: "stonePressurePlate",
+		transparent: true,
+		solid: false,
+		blastResistance: 0.5,
+		material: "mineable/axe",
 		textures: "mangrovePlanks",
 		pressurePlate: true,
 		hardness:0.5,
 		type:"wood",
-		category:"redstone"
+		category:"redstone",
+		copyPropertiesHere:"oakPressurePlate"
 	},
 	{
 		name:"mangroveFenceGate",
+		nameMcd:"mangrove_fence_gate",
 		Name:"Mangrove Fence Gate",
+		blockStates: "oakFenceGate",
+		blastResistance: 3,
+		material: "mineable/axe",
 		textures:"mangrovePlanks",
 		fenceGate:true,
 		hardness:2,
 		woodSound:true,
 		type:"wood",
-		category:"build"
+		category:"build",
+		copyPropertiesHere:"oakFenceGate"
 	},
 	{
 		name:"mangroveRoots",
+		nameMcd:"mangrove_roots",
+		blockStates: [{"name":"waterlogged","values":[false,true]}],
+		decreaseLight: 1,
+		material: "mineable/axe",
 		textures:["mangroveRootsTop","mangroveRootsSide"],
 		transparent:true,
 		type:"wood",
@@ -9133,6 +10256,9 @@
 	},
 	{
 		name:"muddyMangroveRoots",
+		nameMcd:"muddy_mangrove_roots",
+		blockStates: "paleOakWood",
+		material: "mineable/shovel",
 		textures:["muddyMangroveRootsTop","muddyMangroveRootsSide"],
 		type:"wood",
 		hardness:0.7,
@@ -9141,7 +10267,11 @@
 	},
 	{
 		name: "mangroveWood",
+		nameMcd:"mangrove_wood",
 		Name:"Mangrove Wood",
+		blockStates: "paleOakWood",
+		blastResistance: 2,
+		material: "mineable/axe",
 		textures: "mangroveLog",
 		hardness:2,
 		woodSound:true,
@@ -9153,7 +10283,11 @@
 	},
 	{
 		name: "strippedMangroveWood",
+		nameMcd:"stripped_mangrove_wood",
 		Name:"Stripped Mangrove Wood",
+		blockStates: "paleOakWood",
+		blastResistance: 2,
+		material: "mineable/axe",
 		textures: "strippedMangroveLog",
 		hardness:2,
 		woodSound:true,
@@ -9165,6 +10299,7 @@
 	{
 		name:"mud",
 		Name:"Mud",
+		material: "mineable/shovel",
 		hardness:0.5,
 		blastResistance:0.5,
 		type:"ground",
@@ -9174,19 +10309,27 @@
 	},
 	{
 		name:"mudBricks",
+		nameMcd:"mud_bricks",
 		Name:"Mud Bricks",
+		harvestToolsNames: "stone",
+		blastResistance: 3,
+		material: "mineable/pickaxe",
 		category:"build",
 		hardness:1.5,
 	},
 	{
 		name:"packedMud",
+		nameMcd:"packed_mud",
 		Name:"Packed Mud",
+		blastResistance: 3,
+		material: "mineable/pickaxe",
 		randomRotate:true,randomRotateTop:true,randomRotateBottom:true,randomRotateNorth:true,randomRotateSouth:true,randomRotateEast:true,randomRotateWest:true,
 		category:"build",
 		hardness:1
 	},
 	{
 		name:"reinforcedDeepslate",
+		nameMcd:"reinforced_deepslate",
 		textures:["reinforcedDeepslateBottom","reinforcedDeepslateTop","reinforcedDeepslateSide"],
 		blastResistance:1200,
 		hardness:55,
@@ -9199,17 +10342,8 @@
 		name:"redRedstoneLamp",
 		Name:"Red Redstone Lamp",
 		textures:"redstoneLamp",
-		onpowerupdate:function(x,y,z,sx,sy,sz,blockPowerChanged,world){
-			var power = world.getRedstonePower(x,y,z) || world.getSurroundingBlockPower(x,y,z)
-			var block = this.id
-			if(power){
-				block = this.id | SLAB
-			}
-			if(world.getBlock(x,y,z) !== block) world.setBlock(x,y,z,block,false,false,false,false)
-		},
-		onset:function(x,y,z,world){
-			this.onpowerupdate(x,y,z,null,null,null,null,world)
-		},
+		blockStates:"redstoneLamp",
+		copyPropertiesHere:"redstoneLamp",
 		coloredRedstoneLamp:true,
 		category:"redstone"
 	},
@@ -9217,17 +10351,8 @@
 		name:"yellowRedstoneLamp",
 		Name:"Yellow Redstone Lamp",
 		textures:"redstoneLamp",
-		onpowerupdate:function(x,y,z,sx,sy,sz,blockPowerChanged,world){
-			var power = world.getRedstonePower(x,y,z) || world.getSurroundingBlockPower(x,y,z)
-			var block = this.id
-			if(power){
-				block = this.id | SLAB
-			}
-			if(world.getBlock(x,y,z) !== block) world.setBlock(x,y,z,block,false,false,false,false)
-		},
-		onset:function(x,y,z,world){
-			this.onpowerupdate(x,y,z,null,null,null,null,world)
-		},
+		blockStates:"redstoneLamp",
+		copyPropertiesHere:"redstoneLamp",
 		coloredRedstoneLamp:true,
 		category:"redstone"
 	},
@@ -9235,17 +10360,8 @@
 		name:"greenRedstoneLamp",
 		Name:"Green Redstone Lamp",
 		textures:"redstoneLamp",
-		onpowerupdate:function(x,y,z,sx,sy,sz,blockPowerChanged,world){
-			var power = world.getRedstonePower(x,y,z) || world.getSurroundingBlockPower(x,y,z)
-			var block = this.id
-			if(power){
-				block = this.id | SLAB
-			}
-			if(world.getBlock(x,y,z) !== block) world.setBlock(x,y,z,block,false,false,false,false)
-		},
-		onset:function(x,y,z,world){
-			this.onpowerupdate(x,y,z,null,null,null,null,world)
-		},
+		blockStates:"redstoneLamp",
+		copyPropertiesHere:"redstoneLamp",
 		coloredRedstoneLamp:true,
 		category:"redstone"
 	},
@@ -9253,23 +10369,15 @@
 		name:"blueRedstoneLamp",
 		Name:"Blue Redstone Lamp",
 		textures:"redstoneLamp",
-		onpowerupdate:function(x,y,z,sx,sy,sz,blockPowerChanged,world){
-			var power = world.getRedstonePower(x,y,z) || world.getSurroundingBlockPower(x,y,z)
-			var block = this.id
-			if(power){
-				block = this.id | SLAB
-			}
-			if(world.getBlock(x,y,z) !== block) world.setBlock(x,y,z,block,false,false,false,false)
-		},
-		onset:function(x,y,z,world){
-			this.onpowerupdate(x,y,z,null,null,null,null,world)
-		},
+		blockStates:"redstoneLamp",
+		copyPropertiesHere:"redstoneLamp",
 		coloredRedstoneLamp:true,
 		category:"redstone"
 	},
 	
 	{
 		name:"soulFire",
+		nameMcd:"soul_fire",
 		fire:true,
 		damage:2,
 		burnEnt:true,
@@ -9277,34 +10385,21 @@
 		shade:false,
 		shadow:false,
 		solid:false,
-		lightLevel:15,
+		lightLevel:10,
 		ambientSound:"fire.fire",
 		temperature:20,
 		smoothLight:false,
 		hidden:true,
 		noHitbox:true,
+		blockStates:"fire",
 		getAttached:function(x,y,z,block,getBlockOnly,world){
 			var ax = x, ay = y, az = z
-			switch(block){
-				case this.id:
-					ay--
-					break
-				case this.id | STAIR:
-					ay++
-					break
-				case this.id | SLAB | NORTH:
-					az++
-					break
-				case this.id | SLAB | SOUTH:
-					az--
-					break
-				case this.id | SLAB | EAST:
-					ax++
-					break
-				case this.id | SLAB | WEST:
-					ax--
-					break
-			}
+			if(getBlockState(block,this.blockStatesMap.up)) ay++
+			else if(getBlockState(block,this.blockStatesMap.north)) az++
+			else if(getBlockState(block,this.blockStatesMap.south)) az--
+			else if(getBlockState(block,this.blockStatesMap.east)) ax++
+			else if(getBlockState(block,this.blockStatesMap.west)) ax--
+			else ay--
 			var attached = world.getBlock(ax,ay,az)
 			if(getBlockOnly) return attached
 			else return [attached,ax,ay,az]
@@ -9317,11 +10412,12 @@
 	
 	{
 		name:"sweetBerries",
+		nameMcd:"sweet_berries",
 		Name:"Sweet Berries (they're spiky)",
 		item:true,
 		edible:true,
-		food:4,
-		saturation: 1.2,
+		food:2,
+		saturation: 0.4,
 		eatResult: "stick",
 		useAs: "sweetBerryBush",
 		compostChance:0.3,
@@ -9329,6 +10425,9 @@
 	},
 	{
 		name:"sweetBerryBush",
+		nameMcd:"sweet_berry_bush",
+		blockStates: "netherWart",
+		material: "plant;mineable/axe",
 		textures:"sweetBerryBushStage0",
 		textures1:new Array(6).fill("sweetBerryBushStage1"),
 		textures2:new Array(6).fill("sweetBerryBushStage2"),
@@ -9341,11 +10440,18 @@
 		hidden:true,
 		drop:"sweetBerries",
 		liquidBreakable:"drop",
-		category:"nature"
+		category:"nature",
+		growSlow:function(x,y,z,world,block){
+			let age = +getBlockState(block,this.blockStatesMap.age)
+			if(age !== 3) world.setBlock(x,y,z,setBlockState(block,this.blockStatesMap.age,(age+1)+""))
+		},
 	},
 	{
 		name:"smallDripleaf",
+		nameMcd:"small_dripleaf",
 		Name:"Small Dripleaf",
+		blockStates: [{"name":"facing","values":["north","south","west","east"]},{"name":"half","values":["upper","lower"]},{"name":"waterlogged","values":[false,true]}],
+		material: "plant;mineable/axe",
 		textures:"smallDripleafStemBottom",
 		shapeName:"smallDripleaf",
 		solid: false,
@@ -9357,7 +10463,12 @@
 	},
 	{
 		name:"bigDripleaf",
+		nameMcd:"big_dripleaf",
 		Name:"Big Dripleaf",
+		blockStates: [{"name":"facing","values":["north","south","west","east"]},{"name":"tilt","values":["none","unstable","partial","full"]},{"name":"waterlogged","values":[false,true]}],
+		hardness: 0.1,
+		blastResistance: 0.1,
+		material: "plant;mineable/axe",
 		textures:"bigDripleafStem",
 		shapeName:"bigDripleaf",
 		crossShape:true,
@@ -9366,13 +10477,10 @@
 		smoothLight:false,
 		liquidBreakable:"drop",
 		onupdate:function(x,y,z,block,world,sx,sy,sz){
-			var me = blockIds.bigDripleaf
 			var top = world.getBlock(x,y+1,z)
-			var isIt = top === me || top === (me | CROSS)
-			if(block === me && isIt){
-				world.setBlock(x,y,z,me | CROSS,false,false,false,false)
-			}else if(block === (me | CROSS) && !isIt){
-				world.setBlock(x,y,z,me,false,false,false,false)
+			var isIt = blockData[top].name === "bidDripleaf"
+			if(isIt){
+				world.setBlock(x,y,z, setBlockState(blockIds.bigDripleafStem,blockStateMaps.bigDripleafStem.facing,getBlockState(block,this.blockStatesMap.facing)), false,false,false,false)
 			}
 		},
 		category:"nature"
@@ -9390,7 +10498,8 @@
 			return (world.getRepeaterPower(x,y,z,x-pz,y,z-px) || world.getBlockPower(x-pz,y,z-px,null)
 							|| world.getRepeaterPower(x,y,z,x+pz,y,z+px) || world.getBlockPower(x+pz,y,z+px,null)) ? true : false
 		},
-		category:"redstone"
+		category:"redstone",
+		//todo n: shape
 	},
 	{
 		name:"andGate",
@@ -9437,7 +10546,10 @@
 	
 	{
 		name:"dripstoneBlock",
+		nameMcd:"dripstone_block",
 		Name:"Dripstone Block",
+		harvestToolsNames: "stone",
+		material: "mineable/pickaxe",
 		type:"rock1",
 		hardness:1.5,
 		blastResistance:1,
@@ -9446,7 +10558,10 @@
 	},
 	{
 		name:"pointedDripstone",
+		nameMcd:"pointed_dripstone",
 		Name:"Sharp Dripstone",
+		blockStates: [{"name":"thickness","values":["tip_merge","tip","frustum","middle","base"]},{"name":"vertical_direction","values":["up","down"]},{"name":"waterlogged","values":[false,true]}],
+		material: "mineable/pickaxe",
 		flatIcon:true,
 		iconTexture:"pointedDripstone",
 		transparent: true,
@@ -9457,10 +10572,10 @@
 		drop:"pointedDripstone",
 		pointing:function(x,y,z,world){
 			var b = world.getBlock(x,y,z)
-			if(blockData[b].name === this.name) return (b & FLIP) === FLIP ? -1 : 1
+			if(blockData[b].name === this.name) return getBlockState(b,this.blockStatesMap.vertical_direction) === "down" ? -1 : 1
 		},
 		onupdate:function(x,y,z,block,world,sx,sy,sz){
-			var down = (block & FLIP) === FLIP
+			var down = getBlockState(b,this.blockStatesMap.vertical_direction) === "down"
 			var pointing = down ? -1 : 1
 			if(down){
 				var attached = world.getBlock(x,y+1,z)
@@ -9473,45 +10588,110 @@
 				if(needsSupportingBlocks(x,y,z, this.id,world)) return
 			}
 			
-			var target = down ? this.id | FLIP : this.id
-			if(this.pointing(x,y+pointing,z,world) === pointing && this.pointing(x,y+pointing*2,z,world) !== pointing) target |= CROSS //frustum
-			else if(this.pointing(x,y+pointing,z,world) === pointing && !this.pointing(x,y-pointing,z,world)) target |= SLAB //base
-			else if(this.pointing(x,y+pointing,z,world) === pointing) target |= STAIR //middle
-			else if(this.pointing(x,y+pointing,z,world) === -pointing) target |= TALLCROSS //tip merge
+			var target = setBlockState(block,this.blockStatesMap.vertical_direction, down?"up":"down")
+			if(this.pointing(x,y+pointing,z,world) === pointing && this.pointing(x,y+pointing*2,z,world) !== pointing) target = setBlockState(target,this.blockStatesMap.thickness,"frustum")
+			else if(this.pointing(x,y+pointing,z,world) === pointing && !this.pointing(x,y-pointing,z,world)) target = setBlockState(target,this.blockStatesMap.thickness,"base")
+			else if(this.pointing(x,y+pointing,z,world) === pointing) target = setBlockState(target,this.blockStatesMap.thickness,"middle")
+			else if(this.pointing(x,y+pointing,z,world) === -pointing) target = setBlockState(target,this.blockStatesMap.thickness,"tip_merge")
+			else target = setBlockState(target,this.blockStatesMap.thickness,"tip")
 			
 			if(block !== target) world.setBlock(x,y,z,target,false,false,false,false)
 		},
 		spawnUpdate:function(x,y,z,block,world){
-			let down = (block & FLIP) === FLIP
-			let pointing = down ? -1 : 1
-			let target = down ? this.id | FLIP : this.id
-			if(this.pointing(x,y+pointing,z,world) === pointing && this.pointing(x,y+pointing*2,z,world) !== pointing) target |= CROSS //frustum
-			else if(this.pointing(x,y+pointing,z,world) === pointing && !this.pointing(x,y-pointing,z,world)) target |= SLAB //base
-			else if(this.pointing(x,y+pointing,z,world) === pointing) target |= STAIR //middle
-			else if(this.pointing(x,y+pointing,z,world) === -pointing) target |= TALLCROSS //tip merge
+			var down = getBlockState(b,this.blockStatesMap.vertical_direction) === "down"
+			var pointing = down ? -1 : 1
+			var target = setBlockState(block,this.blockStatesMap.vertical_direction, down?"up":"down")
+			if(this.pointing(x,y+pointing,z,world) === pointing && this.pointing(x,y+pointing*2,z,world) !== pointing) target = setBlockState(target,this.blockStatesMap.thickness,"frustum")
+			else if(this.pointing(x,y+pointing,z,world) === pointing && !this.pointing(x,y-pointing,z,world)) target = setBlockState(target,this.blockStatesMap.thickness,"base")
+			else if(this.pointing(x,y+pointing,z,world) === pointing) target = setBlockState(target,this.blockStatesMap.thickness,"middle")
+			else if(this.pointing(x,y+pointing,z,world) === -pointing) target = setBlockState(target,this.blockStatesMap.thickness,"tip_merge")
+			else target = setBlockState(target,this.blockStatesMap.thickness,"tip")
 			
 			if(block !== target) world.spawnBlock(x,y,z,target, true)
 		},
 		category:"nature",
 		randomOffset:true,
+		useAs:function(x,y,z,block,face,world){
+			if(face === "bottom") return this.id+this.blockStatesMap.vertical_direction.down
+			else return this.id+this.blockStatesMap.vertical_direction.up
+		},
+		growSlow:function(x,y,z,world,block){
+			let renjofdxnjlasfrsjln = world.getBlock(x,y+2,z), asoieuhisd
+			if(blockData[renjofdxnjlasfrsjln].liquid){
+				let y2
+				for(y2=y-1; y2>y-12; y2--){
+					asoieuhisd = world.getBlock(x,y2,z)
+					if(blockData[asoieuhisd].name !== "pointedDripstone") break
+				}
+				if(!blockData[asoieuhisd].solid){
+					world.setBlock(x,y2,z, blockIds.pointedDripstone + this.blockStatesMap.vertical_direction.down)
+					let y3
+					for(y3=y2-1; y3>y2-12; y3--){ // find ones pointing up underneath
+						asoieuhisd = world.getBlock(x,y3,z)
+						if(blockData[asoieuhisd].solid) break
+					}
+					if(blockData[asoieuhisd].solid){
+						world.setBlock(x,y3+1,z, blockIds.pointedDripstone + this.blockStatesMap.vertical_direction.up)
+					}
+				}
+			}
+		}
 	},
 	{
 		name:"oakSign",
+		nameMcd:"oak_sign",
 		Name:"Oak sign",
+		blockStates: [{"name":"rotation","values":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15"]},{"name":"waterlogged","values":[false,true]}],
+		transparent: true,
+		solid: false,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16,
 		textures:"oakPlanks",
 		poleTop:"logTop",
 		poleSide:"logSide",
 		iconTexture:"oakSign",
 		flatIcon:true,
+		hitbox:"cube",
 		sign:true,
+		tagBits:null,
+		copyFromProperties:["sign","hitbox","tagBits","shadow"],
 		hardness:1,
 		woodSound:true,
 		type:"wood",
-		category:"decoration"
+		category:"decoration",
+		shadow:false,
+		shapeName:"none",
+		useAsWall:"oakWallSign",
+		onplace:function(x,y,z, player,world){
+			var block = world.getBlock(x,y,z)
+			var tags = {sign:true}
+			var rot = round(player.ry*16/Math.PId)
+			if(!this.useAsWall) rot = round(rot/4)*4
+			tags.rot = rot
+			world.setTags(x,y,z,tags)
+		},
+		onclick:function(x,y,z,world,p){
+			if(p.holding && blockData[p.holding].dye){
+				world.setTagByName(x,y,z, "color",colors.dye[blockData[p.holding].dye].slice())
+			}else if(p.holding && p.holding === blockIds.glowInkSac){
+				let side = getSignSide(world.getTags(x,y,z),p) ? "glow2" : "glow"
+				world.setTagByName(x,y,z, side,true)
+			}else{
+				p.connection.send({type:"openContainer",data:"sign",x,y,z,dimension:world.dimension})
+			}
+		}
 	},
 	{
 		name:"birchSign",
+		nameMcd:"birch_sign",
 		Name:"Birch Sign",
+		blockStates: "oakSign",
+		transparent: true,
+		solid: false,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16,
 		textures:"birchPlanks",
 		poleTop:"birchLogTop",
 		poleSide:"birchLogSide",
@@ -9521,11 +10701,20 @@
 		hardness:1,
 		woodSound:true,
 		type:"wood",
-		category:"decoration"
+		category:"decoration",
+		useAsWall:"birchWallSign",
+		copyPropertiesHere:"oakSign"
 	},
 	{
 		name:"acaciaSign",
+		nameMcd:"acacia_sign",
 		Name:"Acacia Sign",
+		blockStates: "oakSign",
+		transparent: true,
+		solid: false,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16,
 		textures:"acaciaPlanks",
 		poleTop:"acaciaLogTop",
 		poleSide:"acaciaLogSide",
@@ -9535,11 +10724,20 @@
 		hardness:1,
 		woodSound:true,
 		type:"wood",
-		category:"decoration"
+		category:"decoration",
+		useAsWall:"acaciaWallSign",
+		copyPropertiesHere:"oakSign"
 	},
 	{
 		name:"jungleSign",
+		nameMcd:"jungle_sign",
 		Name:"Jungle Sign",
+		blockStates: "oakSign",
+		transparent: true,
+		solid: false,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16,
 		textures:"junglePlanks",
 		poleTop:"jungleLogTop",
 		poleSide:"jungleLogSide",
@@ -9549,11 +10747,20 @@
 		hardness:1,
 		woodSound:true,
 		type:"wood",
-		category:"decoration"
+		category:"decoration",
+		useAsWall:"jungleWallSign",
+		copyPropertiesHere:"oakSign"
 	},
 	{
 		name:"spruceSign",
+		nameMcd:"spruce_sign",
 		Name:"Spruce Sign",
+		blockStates: "oakSign",
+		transparent: true,
+		solid: false,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16,
 		textures:"sprucePlanks",
 		poleTop:"spruceLogTop",
 		poleSide:"spruceLogSide",
@@ -9563,11 +10770,20 @@
 		hardness:1,
 		woodSound:true,
 		type:"wood",
-		category:"decoration"
+		category:"decoration",
+		useAsWall:"spruceWallSign",
+		copyPropertiesHere:"oakSign"
 	},
 	{
 		name:"darkOakSign",
+		nameMcd:"dark_oak_sign",
 		Name:"Dark Oak Sign",
+		blockStates: "oakSign",
+		transparent: true,
+		solid: false,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16,
 		textures:"darkOakPlanks",
 		poleTop:"darkOakLogTop",
 		poleSide:"darkOakLogSide",
@@ -9578,11 +10794,20 @@
 		woodSound:true,
 		type:"wood",
 		color:[0.85,0.7,0.2],
-		category:"decoration"
+		category:"decoration",
+		useAsWall:"darkOakWallSign",
+		copyPropertiesHere:"oakSign"
 	},
 	{
 		name:"mangroveSign",
+		nameMcd:"mangrove_sign",
 		Name:"Mangrove Sign",
+		blockStates: "oakSign",
+		transparent: true,
+		solid: false,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16,
 		textures:"mangrovePlanks",
 		poleTop:"mangroveLogTop",
 		poleSide:"mangroveLog",
@@ -9592,11 +10817,15 @@
 		hardness:1,
 		woodSound:true,
 		type:"wood",
-		category:"decoration"
+		category:"decoration",
+		useAsWall:"mangroveWallSign",
+		copyPropertiesHere:"oakSign"
 	},
 	{
 		name:"composter",
 		Name:"Make bonemeal",
+		blockStates: [{"name":"level","values":["0","1","2","3","4","5","6","7","8"]}],
+		material: "mineable/axe",
 		textures:"composter",
 		transparent:true,
 		blastResistance:0.6,
@@ -9604,57 +10833,18 @@
 		woodSound:true,
 		type:"wood",
 		getLevel:function(block){
-			var id = this.id
-			switch(block){
-				case id:
-					return 0
-				case id | SLAB:
-					return 1
-				case id | STAIR:
-					return 2
-				case id | CROSS:
-					return 3
-				case id | TALLCROSS:
-					return 4
-				case id | DOOR:
-					return 5
-				case id | TORCH:
-					return 6
-				case id | LANTERN:
-					return 7
-			}
+			return +getBlockState(block,this.blockStatesMap.level)
 		},
 		onclick:function(x,y,z,world,p,holdObj){
 			if(!holdObj || !blockData[holdObj.id].compostChance) return true
 			let id = blockIds.composter
-			let target = id
 			let block = world.getBlock(x,y,z)
 			let add = rand() <= blockData[holdObj.id].compostChance
-			switch(block){
-				case id:
-					target |= SLAB
-					break
-				case id | SLAB:
-					target |= STAIR
-					break
-				case id | STAIR:
-					target |= CROSS
-					break
-				case id | CROSS:
-					target |= TALLCROSS
-					break
-				case id | TALLCROSS:
-					target |= DOOR
-					break
-				case id | DOOR:
-					target |= TORCH
-					break
-				case id | TORCH:
-					target |= LANTERN
-					break
-				case id | LANTERN:
-					if(add) world.addItems(x,y,z+0.5,0,0,0,blockIds.boneMeal,true, 1)
-			}
+			let level = +getBlockState(block,this.blockStatesMap.level)
+			let target = block
+			if(level === 8){
+				if(add) world.addItems(x,y,z+0.5,0,0,0,blockIds.boneMeal,true, 1)
+			}else target = setBlockState(block,this.blockStatesMap.level, level+1)
 			holdObj.amount--
 			if(add) world.setBlock(x,y,z,target)
 			world.glint(x,y,z)
@@ -9663,6 +10853,7 @@
 	},
 	{
 		name:"cocoaBeans",
+		nameMcd:"cocoa_beans",
 		Name:"Cocoa Beans",
 		item:true,
 		useAs:"cocoa",
@@ -9670,6 +10861,9 @@
 	},
 	{
 		name:"cocoa",
+		category: "nature",
+		blockStates: [{"name":"age","values":["0","1","2"]},{"name":"facing","values":["north","south","west","east"]}],
+		material: "plant;mineable/axe",
 		textures:"cocoaStage0",
 		hardness:0.2,
 		blastResistance:3,
@@ -9678,7 +10872,14 @@
 		drop:"cocoaBeans",
 		woodSound:true,
 		hidden:true,
-		liquidBreakable:"drop"
+		liquidBreakable:"drop",
+		dropAmount:function(block){
+			return +getBlockState(block, this.blockStatesMap.age) === 2 ? randInt(2,3) : 1
+		},
+		growSlow:function(x,y,z,world,block){
+			let age = +getBlockState(block,this.blockStatesMap.age)
+			if(age !== 2) world.setBlock(x,y,z,setBlockState(block,this.blockStatesMap.age,(age+1)+""))
+		},
 	},
 	{
 		name:"cookie",
@@ -9692,6 +10893,7 @@
 	},
 	{
 		name:"pumpkinPie",
+		nameMcd:"pumpkin_pie",
 		Name:"Pumpkin Pie",
 		item:true,
 		edible: true,
@@ -9702,6 +10904,7 @@
 	},
 	{
 		name:"rawChicken",
+		nameMcd:"chicken",
 		Name:"Raw Chicken",
 		item:true,
 		edible: true,
@@ -9711,6 +10914,7 @@
 	},
 	{
 		name:"cookedChicken",
+		nameMcd:"cooked_chicken",
 		Name:"Cooked Chicken",
 		item:true,
 		edible: true,
@@ -9720,6 +10924,7 @@
 	},
 	{
 		name:"rawCod",
+		nameMcd:"cod",
 		Name:"Raw Cod",
 		item:true,
 		edible: true,
@@ -9729,6 +10934,7 @@
 	},
 	{
 		name:"cookedCod",
+		nameMcd:"cooked_cod",
 		Name:"Cooked Cod",
 		item:true,
 		edible: true,
@@ -9738,6 +10944,7 @@
 	},
 	{
 		name:"rawMutton",
+		nameMcd:"mutton",
 		Name:"Raw Mutton",
 		item:true,
 		edible: true,
@@ -9747,6 +10954,7 @@
 	},
 	{
 		name:"cookedMutton",
+		nameMcd:"cooked_mutton",
 		Name:"Cooked Mutton",
 		item:true,
 		edible: true,
@@ -9756,6 +10964,7 @@
 	},
 	{
 		name:"rawPorkchop",
+		nameMcd:"porkchop",
 		Name:"Raw Porkchop",
 		item:true,
 		edible: true,
@@ -9765,6 +10974,7 @@
 	},
 	{
 		name:"cookedPorkchop",
+		nameMcd:"cooked_porkchop",
 		Name:"Cooked Porkchop",
 		item:true,
 		edible: true,
@@ -9774,6 +10984,7 @@
 	},
 	{
 		name:"rawRabbit",
+		nameMcd:"rabbit",
 		Name:"Raw Rabbit",
 		item:true,
 		edible: true,
@@ -9783,6 +10994,7 @@
 	},
 	{
 		name:"cookedRabbit",
+		nameMcd:"cooked_rabbit",
 		Name:"Cooked Rabbit",
 		item:true,
 		edible: true,
@@ -9792,6 +11004,7 @@
 	},
 	{
 		name:"rawSalmon",
+		nameMcd:"salmon",
 		Name:"Raw Salmon",
 		item:true,
 		edible: true,
@@ -9801,6 +11014,7 @@
 	},
 	{
 		name:"cookedSalmon",
+		nameMcd:"cooked_salmon",
 		Name:"Cooked Salmon",
 		item:true,
 		edible: true,
@@ -9810,6 +11024,7 @@
 	},
 	{
 		name:"tropicalFish",
+		nameMcd:"tropical_fish",
 		Name:"Tropical Fish",
 		item:true,
 		edible: true,
@@ -9829,11 +11044,13 @@
 	},
 	{
 		name:"beetrootSoup",
+		nameMcd:"beetroot_soup",
 		Name:"Beetroot Soup",
+		stackSize: 1,
 		item:true,
 		edible: true,
-		food: 7.2,
-		saturation: 13.2,
+		food: 6,
+		saturation: 7.2,
 		eatResult:"bowl",
 		category:"food",
 	},
@@ -9853,6 +11070,7 @@
 	},
 	{
 		name:"goldenCarrot",
+		nameMcd:"golden_carrot",
 		Name:"Golden Carrot",
 		item:true,
 		edible: true,
@@ -9862,7 +11080,9 @@
 	},
 	{
 		name:"rabbitStew",
+		nameMcd:"rabbit_stew",
 		Name:"Rabbit Stew",
+		stackSize: 1,
 		item:true,
 		edible: true,
 		food: 10,
@@ -9871,6 +11091,7 @@
 	},
 	{
 		name:"goldenApple",
+		nameMcd:"golden_apple",
 		Name:"Golden Apple",
 		item:true,
 		edible: true,
@@ -9881,6 +11102,7 @@
 	},
 	{
 		name:"rawBeef",
+		nameMcd:"beef",
 		Name:"Raw Beef",
 		item:true,
 		edible: true,
@@ -9890,6 +11112,7 @@
 	},
 	{
 		name:"cookedBeef",
+		nameMcd:"cooked_beef",
 		Name:"stake cooked befe",
 		item:true,
 		edible: true,
@@ -9910,12 +11133,10 @@
 			if(face === "top" && blockData[block].name === "farmland") return "potatoes"
 		},
 		category:"food",
-		growBonemeal:function(x,y,z,world){
-			world.setBlock(x,y,z, this.id|CROSS)
-		}
 	},
 	{
 		name:"bakedPotato",
+		nameMcd:"baked_potato",
 		Name:"Baked Potato",
 		item:true,
 		edible: true,
@@ -9932,12 +11153,15 @@
 	},
 	{
 		name:"milkBucket",
+		nameMcd:"milk_bucket",
 		Name:"Milk Bucket",
+		stackSize: 1,
 		item:true,
 		category:"items"
 	},
 	{
 		name:"beetrootSeeds",
+		nameMcd:"beetroot_seeds",
 		Name:"Beetroot Seeds",
 		item:true,
 		useAs:function(x,y,z,block,face){
@@ -9948,6 +11172,9 @@
 	},
 	{
 		name:"beetroots",
+		category: "nature",
+		blockStates: "netherWart",
+		material: "plant;mineable/axe",
 		textures:"beetrootsStage0",
 		textures1:new Array(6).fill("beetrootsStage1"),
 		textures2:new Array(6).fill("beetrootsStage2"),
@@ -9960,11 +11187,21 @@
 		hidden:true,
 		liquidBreakable:"drop",
 		growBonemeal:function(x,y,z,world){
-			world.setBlock(x,y,z, this.id|CROSS)
-		}
+			world.setBlock(x,y,z, this.id+blockStateMaps.beetroots.age[3])
+		},
+		dropAmount:function(block){
+			return +getBlockState(block, this.blockStatesMap.age) === 3 ? randInt(1,4) : 1
+		},
+		growSlow:function(x,y,z,world,block){
+			let age = +getBlockState(block,this.blockStatesMap.age)
+			if(age !== 3) world.setBlock(x,y,z,setBlockState(block,this.blockStatesMap.age,(age+1)+""))
+		},
 	},
 	{
 		name:"potatoes",
+		category: "nature",
+		blockStates: "wheat",
+		material: "plant;mineable/axe",
 		textures:"potatoesStage0",
 		textures1:new Array(6).fill("potatoesStage1"),
 		textures2:new Array(6).fill("potatoesStage2"),
@@ -9975,10 +11212,23 @@
 		crop: true,
 		drop:"potato",
 		hidden:true,
-		liquidBreakable:"drop"
+		liquidBreakable:"drop",
+		growBonemeal:function(x,y,z,world){
+			world.setBlock(x,y,z, this.id+blockStateMaps.beetroots.age[7])
+		},
+		dropAmount:function(block){
+			return +getBlockState(block, this.blockStatesMap.age) === 7 ? randInt(1,5) : 1
+		},
+		growSlow:function(x,y,z,world,block){
+			let age = +getBlockState(block,this.blockStatesMap.age)
+			if(age !== 7) world.setBlock(x,y,z,setBlockState(block,this.blockStatesMap.age,(age+1)+""))
+		},
 	},
 	{
 		name:"carrots",
+		category: "nature",
+		blockStates: "wheat",
+		material: "plant;mineable/axe",
 		textures:"carrotsStage0",
 		textures1:new Array(6).fill("carrotsStage1"),
 		textures2:new Array(6).fill("carrotsStage2"),
@@ -9991,8 +11241,15 @@
 		hidden:true,
 		liquidBreakable:"drop",
 		growBonemeal:function(x,y,z,world){
-			world.setBlock(x,y,z, this.id|CROSS)
-		}
+			world.setBlock(x,y,z, this.id+blockStateMaps.beetroots.age[7])
+		},
+		dropAmount:function(block){
+			return +getBlockState(block, this.blockStatesMap.age) === 7 ? randInt(2,5) : 1
+		},
+		growSlow:function(x,y,z,world,block){
+			let age = +getBlockState(block,this.blockStatesMap.age)
+			if(age !== 7) world.setBlock(x,y,z,setBlockState(block,this.blockStatesMap.age,(age+1)+""))
+		},
 	},
 	
 	{
@@ -10035,168 +11292,258 @@
 	
 	{
 		name:"lightGrayBed",
+		nameMcd:"light_gray_bed",
 		Name:"Light Gray Bed",
+		blockStates: "whiteBed",
+		hardness: 0.2,
+		blastResistance: 0.2,
+		stackSize: 1,
 		textures: "lightGrayBed",
 		iconTexture: "lightGrayBedIcon",
 		flatIcon: true,
 		transparent: true,
 		bed: true,
 		bounciness: 0.6,
-		category:"items"
+		category:"items",
+		copyPropertiesHere:"redBed"
 	},
 	{
 		name:"lightBlueBed",
+		nameMcd:"light_blue_bed",
 		Name:"Light Blue Bed",
+		blockStates: "whiteBed",
+		hardness: 0.2,
+		blastResistance: 0.2,
+		stackSize: 1,
 		textures: "lightBlueBed",
 		iconTexture: "lightBlueBedIcon",
 		flatIcon: true,
 		transparent: true,
 		bed: true,
 		bounciness: 0.6,
-		category:"items"
+		category:"items",
+		copyPropertiesHere:"redBed"
 	},
 	{
 		name:"magentaBed",
+		nameMcd:"magenta_bed",
 		Name:"Magenta Bed",
+		blockStates: "whiteBed",
+		hardness: 0.2,
+		blastResistance: 0.2,
+		stackSize: 1,
 		textures: "magentaBed",
 		iconTexture: "magentaBedIcon",
 		flatIcon: true,
 		transparent: true,
 		bed: true,
 		bounciness: 0.6,
-		category:"items"
+		category:"items",
+		copyPropertiesHere:"redBed"
 	},
 	{
 		name:"yellowBed",
+		nameMcd:"yellow_bed",
 		Name:"Yellow Bed",
+		blockStates: "whiteBed",
+		hardness: 0.2,
+		blastResistance: 0.2,
+		stackSize: 1,
 		textures: "yellowBed",
 		iconTexture: "yellowBedIcon",
 		flatIcon: true,
 		transparent: true,
 		bed: true,
 		bounciness: 0.6,
-		category:"items"
+		category:"items",
+		copyPropertiesHere:"redBed"
 	},
 	{
 		name:"purpleBed",
+		nameMcd:"purple_bed",
 		Name:"Purple Bed",
+		blockStates: "whiteBed",
+		hardness: 0.2,
+		blastResistance: 0.2,
+		stackSize: 1,
 		textures: "purpleBed",
 		iconTexture: "purpleBedIcon",
 		flatIcon: true,
 		transparent: true,
 		bed: true,
 		bounciness: 0.6,
-		category:"items"
+		category:"items",
+		copyPropertiesHere:"redBed"
 	},
 	{
 		name:"orangeBed",
+		nameMcd:"orange_bed",
 		Name:"Orange Bed",
+		blockStates: "whiteBed",
+		hardness: 0.2,
+		blastResistance: 0.2,
+		stackSize: 1,
 		textures: "orangeBed",
 		iconTexture: "orangeBedIcon",
 		flatIcon: true,
 		transparent: true,
 		bed: true,
 		bounciness: 0.6,
-		category:"items"
+		category:"items",
+		copyPropertiesHere:"redBed"
 	},
 	{
 		name:"whiteBed",
+		nameMcd:"white_bed",
 		Name:"White Bed",
+		blockStates: [{"name":"facing","values":["north","south","west","east"]},{"name":"occupied","values":[false,true]},{"name":"part","values":["head","foot"]}],
+		hardness: 0.2,
+		blastResistance: 0.2,
+		stackSize: 1,
 		textures: "whiteBed",
 		iconTexture: "whiteBedIcon",
 		flatIcon: true,
 		transparent: true,
 		bed: true,
 		bounciness: 0.6,
-		category:"items"
+		category:"items",
+		copyPropertiesHere:"redBed"
 	},
 	{
 		name:"greenBed",
+		nameMcd:"green_bed",
 		Name:"Green Bed",
+		blockStates: "whiteBed",
+		hardness: 0.2,
+		blastResistance: 0.2,
+		stackSize: 1,
 		textures: "greenBed",
 		iconTexture: "greenBedIcon",
 		flatIcon: true,
 		transparent: true,
 		bed: true,
 		bounciness: 0.6,
-		category:"items"
+		category:"items",
+		copyPropertiesHere:"redBed"
 	},
 	{
 		name:"brownBed",
+		nameMcd:"brown_bed",
 		Name:"Brown Bed",
+		blockStates: "whiteBed",
+		hardness: 0.2,
+		blastResistance: 0.2,
+		stackSize: 1,
 		textures: "brownBed",
 		iconTexture: "brownBedIcon",
 		flatIcon: true,
 		transparent: true,
 		bed: true,
 		bounciness: 0.6,
-		category:"items"
+		category:"items",
+		copyPropertiesHere:"redBed"
 	},
 	{
 		name:"blackBed",
+		nameMcd:"black_bed",
 		Name:"Black Bed",
+		blockStates: "whiteBed",
+		hardness: 0.2,
+		blastResistance: 0.2,
+		stackSize: 1,
 		textures: "blackBed",
 		iconTexture: "blackBedIcon",
 		flatIcon: true,
 		transparent: true,
 		bed: true,
 		bounciness: 0.6,
-		category:"items"
+		category:"items",
+		copyPropertiesHere:"redBed"
 	},
 	{
 		name:"pinkBed",
+		nameMcd:"pink_bed",
 		Name:"Pink Bed",
+		blockStates: "whiteBed",
+		hardness: 0.2,
+		blastResistance: 0.2,
+		stackSize: 1,
 		textures: "pinkBed",
 		iconTexture: "pinkBedIcon",
 		flatIcon: true,
 		transparent: true,
 		bed: true,
 		bounciness: 0.6,
-		category:"items"
+		category:"items",
+		copyPropertiesHere:"redBed"
 	},
 	{
 		name:"limeBed",
+		nameMcd:"lime_bed",
 		Name:"Lime Bed",
+		blockStates: "whiteBed",
+		hardness: 0.2,
+		blastResistance: 0.2,
+		stackSize: 1,
 		textures: "limeBed",
 		iconTexture: "limeBedIcon",
 		flatIcon: true,
 		transparent: true,
 		bed: true,
 		bounciness: 0.6,
-		category:"items"
+		category:"items",
+		copyPropertiesHere:"redBed"
 	},
 	{
 		name:"grayBed",
+		nameMcd:"gray_bed",
 		Name:"Gray Bed",
+		blockStates: "whiteBed",
+		hardness: 0.2,
+		blastResistance: 0.2,
+		stackSize: 1,
 		textures: "grayBed",
 		iconTexture: "grayBedIcon",
 		flatIcon: true,
 		transparent: true,
 		bed: true,
 		bounciness: 0.6,
-		category:"items"
+		category:"items",
+		copyPropertiesHere:"redBed"
 	},
 	{
 		name:"cyanBed",
+		nameMcd:"cyan_bed",
 		Name:"Cyan Bed",
+		blockStates: "whiteBed",
+		hardness: 0.2,
+		blastResistance: 0.2,
+		stackSize: 1,
 		textures: "cyanBed",
 		iconTexture: "cyanBedIcon",
 		flatIcon: true,
 		transparent: true,
 		bed: true,
 		bounciness: 0.6,
-		category:"items"
+		category:"items",
+		copyPropertiesHere:"redBed"
 	},
 	{
 		name:"blueBed",
+		nameMcd:"blue_bed",
 		Name:"Blue Bed",
+		blockStates: "whiteBed",
+		hardness: 0.2,
+		blastResistance: 0.2,
+		stackSize: 1,
 		textures: "blueBed",
 		iconTexture: "blueBedIcon",
 		flatIcon: true,
 		transparent: true,
 		bed: true,
 		bounciness: 0.6,
-		category:"items"
+		category:"items",
+		copyPropertiesHere:"redBed"
 	},
 	{
 		name:"quicksand",
@@ -10206,8 +11553,9 @@
 		category:"nature"
 	},
 	{
-		name:"bow",
+		name:"bow",//todo n: animation
 		Name:"Bow",
+		durability: 384,
 		pullTextures:["bow","bowPulling0","bowPulling1","bowPulling2"],
 		useAnywhere:true,
 		item:true,
@@ -10223,6 +11571,7 @@
 	},
 	{
 		name:"glisteringMelonSlice",
+		nameMcd:"glistering_melon_slice",
 		Name:"Slice of Watermelon With Unedible Gold",
 		item:true,
 		category:"items"
@@ -10249,7 +11598,14 @@
 	},
 	{
 		name:"crimsonSign",
+		nameMcd:"crimson_sign",
 		Name:"Crimson Sign",
+		blockStates: "oakSign",
+		transparent: true,
+		solid: false,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16,
 		textures:"crimsonPlanks",
 		poleTop:"crimsonStemTop",
 		poleSide:"crimsonStemSide",
@@ -10259,11 +11615,20 @@
 		hardness:1,
 		woodSound:true,
 		type:"wood",
-		category:"decoration"
+		category:"decoration",
+		useAsWall:"crimsonWallSign",
+		copyPropertiesHere:"oakSign"
 	},
 	{
 		name:"warpedSign",
+		nameMcd:"warped_sign",
 		Name:"Warped Sign",
+		blockStates: "oakSign",
+		transparent: true,
+		solid: false,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16,
 		textures:"warpedPlanks",
 		poleTop:"warpedStemTop",
 		poleSide:"warpedStemSide",
@@ -10273,11 +11638,18 @@
 		hardness:1,
 		woodSound:true,
 		type:"wood",
-		category:"decoration"
+		category:"decoration",
+		useAsWall:"warpedWallSign",
+		copyPropertiesHere:"oakSign"
 	},
 	{
 		name:"dropper",
 		Name:"Dropper",
+		harvestToolsNames: "stone",
+		blockStates: "dispenser",
+		hardness: 3.5,
+		blastResistance: 3.5,
+		material: "mineable/pickaxe",
 		textures:["furnaceTop","furnaceTop","furnaceSide","dropperFront","furnaceSide","furnaceSide"],
 		upTextures:fillTextureArray(["furnaceTop","dropperFrontVertical","furnaceTop"]),
 		downTextures:fillTextureArray(["dropperFrontVertical","furnaceTop","furnaceTop"]),
@@ -10301,14 +11673,14 @@
 		},
 		onpowerupdate:function(x,y,z,sx,sy,sz,blockPowerChanged,world){
 			var block = world.getBlock(x,y,z)
-			var power = world.getRedstonePower(x,y,z) || world.getSurroundingBlockPower(x,y,z)
+			var power = world.getRedstonePower(x,y,z) || world.getSurroundingBlockPower(x,y,z) ? true : false
 			var tags = world.getTags(x,y,z)
 			var on = tags && tags.on || false
 			if(power !== on) {
 				world.setTagByName(x,y,z,"on",power,false)
 				if(power){
 					var me = this
-					world.setTimeout(function(){
+					world.setTimeout(() => {
 						world.playSound(x,y,z, "click")
 						if(!tags || !tags.contents) return
 						var items = tags.contents.filter(r => r)
@@ -10316,33 +11688,33 @@
 						if(!items[idx]) return
 						idx = tags.contents.indexOf(items[idx]), items = tags.contents
 						var vx = 0, vy = 0, vz = 0, ix = x, iy = y, iz = z, tx = x, ty = y, tz = z
-						switch(block){
-							case me.id | NORTH:
+						switch(getBlockState(block,this.blockStatesMap.facing)){
+							case "north":
 								vz = -0.25
 								iz -= 0.75
 								tz--
 								break
-							case me.id | SOUTH:
+							case "south":
 								vz = 0.25
 								iz += 0.75
 								tz++
 								break
-							case me.id | EAST:
+							case "east":
 								vx = -0.25
 								ix -= 0.75
 								tx--
 								break
-							case me.id | WEST:
+							case "west":
 								vx = 0.25
 								ix += 0.75
 								tx++
 								break
-							case me.id | SLAB:
+							case "up":
 								vy = 0.25
 								iy += 0.75
 								ty++
 								break
-							case me.id | STAIR:
+							case "down":
 								vy = -0.25
 								iy -= 0.75
 								ty--
@@ -10365,6 +11737,10 @@
 	{
 		name:"dispenser",
 		Name:"Dispenser",
+		harvestToolsNames: "stone",
+		blockStates: [{"name":"facing","values":["north","east","south","west","up","down"]},{"name":"triggered","values":[false,true]}],
+		blastResistance: 3.5,
+		material: "mineable/pickaxe",
 		textures:["furnaceTop","furnaceTop","furnaceSide","dispenserFront","furnaceSide","furnaceSide"],
 		upTextures:fillTextureArray(["furnaceTop","dispenserFrontVertical","furnaceTop"]),
 		downTextures:fillTextureArray(["dispenserFrontVertical","furnaceTop","furnaceTop"]),
@@ -10390,14 +11766,14 @@
 		},
 		onpowerupdate:function(x,y,z,sx,sy,sz,blockPowerChanged,world){
 			var block = world.getBlock(x,y,z)
-			var power = world.getRedstonePower(x,y,z) || world.getSurroundingBlockPower(x,y,z)
+			var power = world.getRedstonePower(x,y,z) || world.getSurroundingBlockPower(x,y,z) ? true : false
 			var tags = world.getTags(x,y,z)
 			var on = tags && tags.on || false
 			if(power !== on) {
 				world.setTagByName(x,y,z,"on",power,false)
 				if(power){
 					var me = this
-					world.setTimeout(function(){
+					world.setTimeout(() => {
 						world.playSound(x,y,z, "click")
 						if(!tags || !tags.contents) return
 						var items = tags.contents.filter(r => r)
@@ -10405,30 +11781,30 @@
 						if(!items[idx]) return
 						idx = tags.contents.indexOf(items[idx]), items = tags.contents
 						var vx = 0, vy = 0, vz = 0, ix = x, iy = y, iz = z
-						switch(block){
-							case me.id | NORTH:
+						switch(getBlockState(block,this.blockStatesMap.facing)){
+							case "north":
 								vz = -0.25
-								iz--
+								iz -= 1
 								break
-							case me.id | SOUTH:
+							case "south":
 								vz = 0.25
-								iz++
+								iz += 1
 								break
-							case me.id | EAST:
+							case "east":
 								vx = -0.25
-								ix--
+								ix -= 1
 								break
-							case me.id | WEST:
+							case "west":
 								vx = 0.25
-								ix++
+								ix += 1
 								break
-							case me.id | SLAB:
+							case "up":
 								vy = 0.25
-								iy++
+								iy += 1
 								break
-							case me.id | STAIR:
+							case "down":
 								vy = -0.25
-								iy--
+								iy -= 1
 								break
 						}
 						var front = world.getBlock(ix,iy,iz)
@@ -10468,6 +11844,9 @@
 	{
 		name:"hopper",
 		Name:"Hopper",
+		harvestToolsNames: "stone",
+		blockStates: [{"name":"enabled","values":[false,true]},{"name":"facing","values":["down","north","south","west","east"]}],
+		material: "mineable/pickaxe",
 		textures:"hopper",
 		flatIcon:true,
 		iconTexture:"hopperIcon",
@@ -10495,25 +11874,25 @@
 		},
 		pushItem:function(x,y,z,tags,world){
 			var tx = x, ty = y, tz = z, top, dx = 0, dy = 0, dz = 0
-			switch(world.getBlock(x,y,z)){
-				case this.id:
+			switch(getBlockState(world.getBlock(x,y,z),this.blockStatesMap.facing)){
+				case "down":
 					ty--
 					dy = -1
 					top = true
 					break
-				case this.id | SLAB | NORTH:
+				case "north":
 					tz++
 					dz = 1
 					break
-				case this.id | SLAB | SOUTH:
+				case "south":
 					tz--
 					dz = -1
 					break
-				case this.id | SLAB | EAST:
+				case "east":
 					tx++
 					dx = 1
 					break
-				case this.id | SLAB | WEST:
+				case "west":
 					tx--
 					dx = -1
 					break
@@ -10598,7 +11977,7 @@
 			this.onupdate(x,y,z,null,world,null,null,null,world)
 		},
 		isLocked:function(x,y,z,world){
-			return world.getRedstonePower(x,y,z) || world.getSurroundingBlockPower(x,y,z)
+			return world.getRedstonePower(x,y,z) || world.getSurroundingBlockPower(x,y,z) ? true : false
 		},
 		itemOnTop(x,y,z,ent){
 			let world = ent.world
@@ -10614,6 +11993,8 @@
 	{
 		name:"target",
 		Name:"Target",
+		blockStates: "lightWeightedPressurePlate",
+		material: "mineable/hoe",
 		textures:["targetTop","targetSide"],
 		hardness:0.5,
 		blastResistance:0.5,
@@ -10639,6 +12020,7 @@
 	{
 		name:"comparator",
 		Name:"Redstone Comparator",
+		blockStates: [{"name":"facing","values":["north","south","west","east"]},{"name":"mode","values":["compare","subtract"]},{"name":"powered","values":[false,true]}],
 		transparent:true,
 		flatIcon:true,
 		iconTexture:"comparatorIcon",
@@ -10669,42 +12051,21 @@
 		},
 		onpowerupdate:function(x,y,z,sx,sy,sz,blockPowerChanged,world){
 			var dx = 0, dy = 0, dz = 0 //direction
-			var side //side of block it's pointing to
+			var side = getBlockState(block,this.blockStatesMap.facing) //side of block it's pointing to
 			var block = world.getBlock(x,y,z)
-			var offCompare = this.id, onCompare = this.id | SLAB, offSubtract = this.id | STAIR, onSubtract = this.id | DOOR
-			var subtractMode
-			switch(block){
-				case offSubtract | NORTH:
-				case onSubtract | NORTH:
-					subtractMode = true
-				case offCompare | NORTH:
-				case onCompare | NORTH:
+			var subtractMode = getBlockState(block,this.blockStatesMap.mode) === "subtract"
+			switch(side){
+				case "north":
 					dz = 1
-					side = "south"
 					break
-				case offSubtract | SOUTH:
-				case onSubtract | SOUTH:
-					subtractMode = true
-				case offCompare | SOUTH:
-				case onCompare | SOUTH:
+				case "south":
 					dz = -1
-					side = "north"
 					break
-				case offSubtract | EAST:
-				case onSubtract | EAST:
-					subtractMode = true
-				case offCompare | EAST:
-				case onCompare | EAST:
+				case "east":
 					dx = 1
-					side = "east"
 					break
-				case offSubtract | WEST:
-				case onSubtract | WEST:
-					subtractMode = true
-				case offCompare | WEST:
-				case onCompare | WEST:
+				case "west":
 					dx = -1
-					side = "west"
 					break
 			}
 			if(!dx && !dy && !dz) return console.log("doesn't match up") //doesn't match up
@@ -10727,76 +12088,15 @@
 			
 			if(power === output) return
 			var me = this
-			var t = function(){
+			var t = () => {
 				block = world.getBlock(x,y,z)
 				power = me.on(x,y,z,dx,dy,dz,subtractMode,world)
 				output = world.getTagByName(x,y,z,"output") || 0
 				if(power !== output) {
 					world.setTagByName(x,y,z,"output",power,false)
-					var on = false
-					switch(block){
-						case onSubtract | NORTH:
-						case onCompare | NORTH:
-						case onSubtract | SOUTH:
-						case onCompare | SOUTH:
-						case onSubtract | EAST:
-						case onCompare | EAST:
-						case onSubtract | WEST:
-						case onCompare | WEST:
-							on = true
-					}
+					var on = getBlockState(block,this.blockStatesMap.powered)
 					if((power ? true : false) !== on){
-						var target
-						switch(block){
-							case offCompare | NORTH:
-								target = onCompare | NORTH
-								break
-							case onCompare | NORTH:
-								target = offCompare | NORTH
-								break
-							case offSubtract | NORTH:
-								target = onSubtract | NORTH
-								break
-							case onSubtract | NORTH:
-								target = offSubtract | NORTH
-								break
-							case offCompare | SOUTH:
-								target = onCompare | SOUTH
-								break
-							case onCompare | SOUTH:
-								target = offCompare | SOUTH
-								break
-							case offSubtract | SOUTH:
-								target = onSubtract | SOUTH
-								break
-							case onSubtract | SOUTH:
-								target = offSubtract | SOUTH
-								break
-							case offCompare | EAST:
-								target = onCompare | EAST
-								break
-							case onCompare | EAST:
-								target = offCompare | EAST
-								break
-							case offSubtract | EAST:
-								target = onSubtract | EAST
-								break
-							case onSubtract | EAST:
-								target = offSubtract | EAST
-								break
-							case offCompare | WEST:
-								target = onCompare | WEST
-								break
-							case onCompare | WEST:
-								target = offCompare | WEST
-								break
-							case offSubtract | WEST:
-								target = onSubtract | WEST
-								break
-							case onSubtract | WEST:
-								target = offSubtract | WEST
-								break
-						}
+						var target = setBlockState(block,this.blockStatesMap.powered, power?true:false)
 						if(block !== target) world.setBlock(x,y,z,target,false,false,false,true)
 					}
 					
@@ -10823,119 +12123,28 @@
 		onclick:function(x,y,z,world){
 			var me = blockData[blockIds.comparator]
 			var block = world.getBlock(x,y,z)
-			var off = me.id, on = me.id | SLAB, offSubtract = me.id | STAIR, onSubtract = me.id | DOOR
-			var target
-			switch(block){
-				case off | NORTH:
-					target = offSubtract | NORTH
-					break
-				case on | NORTH:
-					target = onSubtract | NORTH
-					break
-				case offSubtract | NORTH:
-					target = off | NORTH
-					break
-				case onSubtract | NORTH:
-					target = on | NORTH
-					break
-				case off | SOUTH:
-					target = offSubtract | SOUTH
-					break
-				case on | SOUTH:
-					target = onSubtract | SOUTH
-					break
-				case offSubtract | SOUTH:
-					target = off | SOUTH
-					break
-				case onSubtract | SOUTH:
-					target = on | SOUTH
-					break
-				case off | EAST:
-					target = offSubtract | EAST
-					break
-				case on | EAST:
-					target = onSubtract | EAST
-					break
-				case offSubtract | EAST:
-					target = off | EAST
-					break
-				case onSubtract | EAST:
-					target = on | EAST
-					break
-				case off | WEST:
-					target = offSubtract | WEST
-					break
-				case on | WEST:
-					target = onSubtract | WEST
-					break
-				case offSubtract | WEST:
-					target = off | WEST
-					break
-				case onSubtract | WEST:
-					target = on | WEST
-					break
-			}
+			var target = setBlockState(block,this.blockStatesMap.mode, getBlockState(block,this.blockStatesMap.mode) === "subtract" ? "compare" : "subtract")
 			world.setBlock(x,y,z,target,false,false,false,true)
 		},
 		getFacing:function(x,y,z,world){
 			var block = world.getBlock(x,y,z)
-			var off = this.id, on = this.id | SLAB, offSubtract = this.id | STAIR, onSubtract = this.id | DOOR
-			var f
-			switch(block){
-				case off | NORTH:
-				case on | NORTH:
-				case offSubtract | NORTH:
-				case onSubtract | NORTH:
-					f = "north"
-					break
-				case off | SOUTH:
-				case on | SOUTH:
-				case offSubtract | SOUTH:
-				case onSubtract | SOUTH:
-					f = "south"
-					break
-				case off | EAST:
-				case on | EAST:
-				case offSubtract | EAST:
-				case onSubtract | EAST:
-					f = "east"
-					break
-				case off | WEST:
-				case on | WEST:
-				case offSubtract | WEST:
-				case onSubtract | WEST:
-					f = "west"
-					break
-			}
+			var f = getBlockState(block,this.blockStatesMap.facing)
 			return f
 		},
 		canHavePower:function(/*this*/rx,ry,rz,/*other thing*/x,y,z,world){
 			var tx = rx, ty = ry, tz = rz
 			var block = world.getBlock(rx,ry,rz)
-			var off = this.id, on = this.id | SLAB, offSubtract = this.id | STAIR, onSubtract = this.id | DOOR
-			switch(block){
-				case offSubtract | NORTH:
-				case onSubtract | NORTH:
-				case off | NORTH:
-				case on | NORTH:
+			switch(getBlockState(block,this.blockStatesMap.facing)){
+				case "north":
 					tz++
 					break
-				case offSubtract | SOUTH:
-				case onSubtract | SOUTH:
-				case off | SOUTH:
-				case on | SOUTH:
+				case "south":
 					tz--
 					break
-				case offSubtract | EAST:
-				case onSubtract | EAST:
-				case off | EAST:
-				case on | EAST:
+				case "east":
 					tx++
 					break
-				case offSubtract | WEST:
-				case onSubtract | WEST:
-				case off | WEST:
-				case on | WEST:
+				case "west":
 					tx--
 					break
 			}
@@ -11038,17 +12247,17 @@
 		category:"items"
 	},
 	{
-		name: "spawnCreeper",
+		name: "creeper_spawn_egg",
 		item: true,
 		serveronuse: (x,y,z, block,world,face,item,p) => {
 			let pos = movePositionByFace(face,x,y,z)
-			let ent = new entities[entityIds.Creeper](pos[0],pos[1],pos[2])
+			let ent = new entities[entityIds.creeper](pos[0],pos[1],pos[2])
 			if(item.customName) ent.name = item.customName
 			world.addEntity(ent)
 			item.amount--
 		},
 		spawnMob: function(x,y,z,world){
-			world.addEntity(new entities[entityIds.Creeper](x,y,z),false)
+			world.addEntity(new entities[entityIds.creeper](x,y,z),false)
 		},
 		category:"items"
 	},
@@ -11059,36 +12268,40 @@
 	},
 	{
 		name:"rottenFlesh",
+		nameMcd:"rotten_flesh",
 		Name:"Rotten Flesh",
+		edible: true,
+		food: 4,
+		saturation: 0.8,
 		item:true
 	},
 	{
-		name: "spawnSheep",
+		name: "sheep_spawn_egg",
 		item: true,
 		serveronuse: (x,y,z, block,world,face,item,p) => {
 			let pos = movePositionByFace(face,x,y,z)
-			let ent = new entities[entityIds.Sheep](pos[0],pos[1],pos[2])
+			let ent = new entities[entityIds.sheep](pos[0],pos[1],pos[2])
 			if(item.customName) ent.name = item.customName
 			world.addEntity(ent)
 			item.amount--
 		},
 		spawnMob: function(x,y,z,world){
-			world.addEntity(new entities[entityIds.Sheep](x,y,z),false)
+			world.addEntity(new entities[entityIds.sheep](x,y,z),false)
 		},
 		category:"items"
 	},
 	{
-		name: "spawnChicken",
+		name: "chicken_spawn_egg",
 		item: true,
 		serveronuse: (x,y,z, block,world,face,item,p) => {
 			let pos = movePositionByFace(face,x,y,z)
-			let ent = new entities[entityIds.Chicken](pos[0],pos[1],pos[2])
+			let ent = new entities[entityIds.chicken](pos[0],pos[1],pos[2])
 			if(item.customName) ent.name = item.customName
 			world.addEntity(ent)
 			item.amount--
 		},
 		spawnMob: function(x,y,z,world){
-			world.addEntity(new entities[entityIds.Chicken](x,y,z),false)
+			world.addEntity(new entities[entityIds.chicken](x,y,z),false)
 		},
 		category:"items"
 	},
@@ -11098,32 +12311,32 @@
 		item:true
 	},
 	{
-		name: "spawnZombie",
+		name: "zombie_spawn_egg",
 		item: true,
 		serveronuse: (x,y,z, block,world,face,item,p) => {
 			let pos = movePositionByFace(face,x,y,z)
-			let ent = new entities[entityIds.Zombie](pos[0],pos[1],pos[2])
+			let ent = new entities[entityIds.zombie](pos[0],pos[1],pos[2])
 			if(item.customName) ent.name = item.customName
 			world.addEntity(ent)
 			item.amount--
 		},
 		spawnMob: function(x,y,z,world){
-			world.addEntity(new entities[entityIds.Zombie](x,y,z),false)
+			world.addEntity(new entities[entityIds.zombie](x,y,z),false)
 		},
 		category:"items"
 	},
 	{
-		name: "spawnSkeleton",
+		name: "skeleton_spawn_egg",
 		item: true,
 		serveronuse: (x,y,z, block,world,face,item,p) => {
 			let pos = movePositionByFace(face,x,y,z)
-			let ent = new entities[entityIds.Skeleton](pos[0],pos[1],pos[2])
+			let ent = new entities[entityIds.skeleton](pos[0],pos[1],pos[2])
 			if(item.customName) ent.name = item.customName
 			world.addEntity(ent)
 			item.amount--
 		},
 		spawnMob: function(x,y,z,world){
-			world.addEntity(new entities[entityIds.Skeleton](x,y,z),false)
+			world.addEntity(new entities[entityIds.skeleton](x,y,z),false)
 		},
 		category:"items"
 	},
@@ -11136,6 +12349,10 @@
 	{
 		name:"spawner",
 		Name:"Mob Spawner",
+		category: "build",
+		harvestToolsNames: "stone",
+		decreaseLight: 1,
+		material: "mineable/pickaxe",
 		transparent:true,
 		blastResistance:5,
 		hardness:5,
@@ -11173,7 +12390,10 @@
 	},
 	{
 		name:"daylightDetector",
+		nameMcd:"daylight_detector",
 		Name:"Daylight detector",
+		blockStates: [{"name":"inverted","values":[false,true]},{"name":"power","values":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15"]}],
+		material: "mineable/axe",
 		textures:["daylightDetectorSide","daylightDetectorTop","daylightDetectorSide"],
 		invertedTextures:fillTextureArray(["daylightDetectorSide","daylightDetectorInvertedTop","daylightDetectorSide"]),
 		transparent:true,
@@ -11183,13 +12403,12 @@
 		onclick:function(x,y,z,world){
 			let block = world.getBlock(x,y,z)
 			let me = blockData[blockIds.daylightDetector]
-			if(block === (me.id | SLAB)) block = me.id
-			else block = me.id | SLAB
+			block = setBlockState(block,this.blockStatesMap.inverted, !getBlockState(block,this.blockStatesMap.inverted))
 			world.setBlock(x,y,z,block)
 		},
 		tick:function(block,x,y,z,world){
 			let power = round(world.getLight(x, y, z, 0)*world.world.skyLight)
-			if(block === (this.id | SLAB)) power = 15 - power
+			if(getBlockState(block,this.blockStatesMap.inverted)) power = 15 - power
 			let prev = world.getPower(x,y,z)
 			if(prev !== power){
 				world.setPower(x,y,z,power,false)
@@ -11215,7 +12434,11 @@
 	},
 	{
 		name:"commandBlock",
+		nameMcd:"command_block",
 		Name:"Command Block",
+		harvestToolsNames: [],
+		blockStates: [{"name":"conditional","values":[false,true]},{"name":"facing","values":["north","east","south","west","up","down"]}],
+		blastResistance: 3600000,
 		textures:["commandBlockBack",'commandBlockFront','commandBlockSide'],
 		errorTextures:fillTextureArray(["commandBlockBackError",'commandBlockFrontError','commandBlockSideError']),
 		sideTextures:["commandBlockSide","commandBlockSide","commandBlockBack","commandBlockFront","commandBlockSide","commandBlockSide"],
@@ -11225,7 +12448,7 @@
 		hardness:Infinity,
 		commandBlock:true,
 		tagBits: null,
-		trigger:function(x,y,z,world){
+		trigger:function(x,y,z,world){//todo n: add error state
 			let data = world.getTagByName(x,y,z,"data")
 			let running = world.getTagByName(x,y,z,"running")
 			if(data && !running){
@@ -11238,36 +12461,10 @@
 						outputHTML += Messages.format(output[i])
 					}
 					world.setTagByName(x,y,z,"output",outputHTML,false)
-					let target
+					/*let target
 					let block = world.getBlock(x,y,z)
-					switch(block){
-						case this.id:
-						case this.id | FLIP:
-							target = this.id
-							break
-						case this.id | SLAB | NORTH:
-						case this.id | SLAB | FLIP | NORTH:
-							target = this.id | SLAB | NORTH
-							break
-						case this.id | SLAB | SOUTH:
-						case this.id | SLAB | FLIP | SOUTH:
-							target = this.id | SLAB | SOUTH
-							break
-						case this.id | SLAB | EAST:
-						case this.id | SLAB | FLIP | EAST:
-							target = this.id | SLAB | EAST
-							break
-						case this.id | SLAB | WEST:
-						case this.id | SLAB | FLIP | WEST:
-							target = this.id | SLAB | WEST
-							break
-						case this.id | STAIR:
-						case this.id | STAIR | FLIP:
-							target = this.id | STAIR
-							break
-					}
 					if(output && output[output.length-1] === "error") target |= FLIP
-					if(block !== target) world.setBlock(x,y,z,target,false,false,false,true)
+					if(block !== target) world.setBlock(x,y,z,target,false,false,false,true)*/
 				}).then(() => world.setTagByName(x,y,z,"running",false,false))
 			}
 		},
@@ -11286,56 +12483,61 @@
 	},
 	{
 		name:"spiderEye",
+		nameMcd:"spider_eye",
+		edible: true,
+		food: 2,
+		saturation: 3.2,
 		item:true,
 		category:"items"
 	},
 	{
-		name: "spawnSpider",
+		name: "spider_spawn_egg",
 		item: true,
 		serveronuse: (x,y,z, block,world,face,item,p) => {
 			let pos = movePositionByFace(face,x,y,z)
-			let ent = new entities[entityIds.Spider](pos[0],pos[1],pos[2])
+			let ent = new entities[entityIds.spider](pos[0],pos[1],pos[2])
 			if(item.customName) ent.name = item.customName
 			world.addEntity(ent)
 			item.amount--
 		},
 		spawnMob: function(x,y,z,world){
-			world.addEntity(new entities[entityIds.Spider](x,y,z),false)
+			world.addEntity(new entities[entityIds.spider](x,y,z),false)
 		},
 		category:"items"
 	},
 	{
-		name: "spawnCaveSpider",
+		name: "cave_spider_spawn_egg",
 		item: true,
 		serveronuse: (x,y,z, block,world,face,item,p) => {
 			let pos = movePositionByFace(face,x,y,z)
-			let ent = new entities[entityIds.Spider](pos[0],pos[1],pos[2],true)
+			let ent = new entities[entityIds.spider](pos[0],pos[1],pos[2],true)
 			if(item.customName) ent.name = item.customName
 			world.addEntity(ent)
 			item.amount--
 		},
 		spawnMob: function(x,y,z,world){
-			world.addEntity(new entities[entityIds.Spider](x,y,z,true),false)
+			world.addEntity(new entities[entityIds.spider](x,y,z,true),false)
 		},
 		category:"items"
 	},
 	{
-		name: "spawnWolf",
+		name: "wolf_spawn_egg",
 		item: true,
 		serveronuse: (x,y,z, block,world,face,item,p) => {
 			let pos = movePositionByFace(face,x,y,z)
-			let ent = new entities[entityIds.Wolf](pos[0],pos[1],pos[2])
+			let ent = new entities[entityIds.wolf](pos[0],pos[1],pos[2])
 			if(item.customName) ent.name = item.customName
 			world.addEntity(ent)
 			item.amount--
 		},
 		spawnMob: function(x,y,z,world){
-			world.addEntity(new entities[entityIds.Wolf](x,y,z),false)
+			world.addEntity(new entities[entityIds.wolf](x,y,z),false)
 		},
 		category:"items"
 	},
 	{
 		name:"nameTag",
+		nameMcd:"name_tag",
 		Name:"Name Tag",
 		item:true,
 		onserverentityuse:function(ent,holding){
@@ -11348,35 +12550,38 @@
 	},
 	{
 		name:"blazeRod",
+		nameMcd:"blaze_rod",
 		Name:"Blaze Rod",
 		item:true
 	},
 	{
 		name:"blazePowder",
+		nameMcd:"blaze_powder",
 		Name:"Blaze Powder",
 		item:true
 	},
 	{
-		name: "spawnBlaze",
+		name: "blaze_spawn_egg",
 		item: true,
 		serveronuse: (x,y,z, block,world,face,item,p) => {
 			let pos = movePositionByFace(face,x,y,z)
-			let ent = new entities[entityIds.Blaze](pos[0],pos[1],pos[2])
+			let ent = new entities[entityIds.blaze](pos[0],pos[1],pos[2])
 			if(item.customName) ent.name = item.customName
 			world.addEntity(ent)
 			item.amount--
 		},
 		spawnMob: function(x,y,z,world){
-			world.addEntity(new entities[entityIds.Blaze](x,y,z),false)
+			world.addEntity(new entities[entityIds.blaze](x,y,z),false)
 		},
 		category:"items"
 	},
 	{
 		name:"fireCharge",
+		nameMcd:"fire_charge",
 		item:true
 	},
 	{
-		name: "spawnEnderDragon",
+		name: "ender_dragon_spawn_egg",
 		item: true,
 		/*serveronuse: (x,y,z, block,world,face,item,p) => {
 			let pos = movePositionByFace(face,x,y,z)
@@ -11392,9 +12597,11 @@
 	},
 	{
 		name:"debugStick",
+		nameMcd:"debug_stick",
+		stackSize: 1,
 		item:true,
 		hidden:true,
-		serveronuse: function(x,y,z, block,world,face,item,p,blockMode){
+		serveronuse: function(x,y,z, block,world,face,item,p,blockMode){//todo n
 			if(blockMode === CUBE) this.useGetTags(x,y,z, block, world)
 			else if(blockMode === SLAB) this.useChangeBlockState(x,y,z, block, world)
 			else if(blockMode === STAIR) this.useChangeBlockRotation(x,y,z, block, world)
@@ -11483,23 +12690,27 @@
 	{ name: "silverBlock", Name:"Block of Silver", hardness:5, type:"metal2",category:"build", stoneSound:true},
 	{ name: "limestone", Name:"Limestone", type:"rock1",category:"nature", hardness:1.25, blastResistance:0.8, stoneSound:true, randomRotate:"flip",randomRotateTop:true,randomRotateBottom:true,randomRotateNorth:true,randomRotateSouth:true,randomRotateEast:true,randomRotateWest:true},
 	{
-		name: "spawnEnderman",
+		name: "enderman_spawn_egg",
 		item: true,
 		serveronuse: (x,y,z, block,world,face,item,p) => {
 			let pos = movePositionByFace(face,x,y,z)
-			let ent = new entities[entityIds.Enderman](pos[0],pos[1],pos[2])
+			let ent = new entities[entityIds.enderman](pos[0],pos[1],pos[2])
 			if(item.customName) ent.name = item.customName
 			world.addEntity(ent)
 			item.amount--
 		},
 		spawnMob: function(x,y,z,world){
-			world.addEntity(new entities[entityIds.Enderman](x,y,z),false)
+			world.addEntity(new entities[entityIds.enderman](x,y,z),false)
 		},
 		category:"items"
 	},
 	{
 		name:"bambooBlock",
+		nameMcd:"bamboo_block",
 		Name:"Block of Bamboo",
+		blockStates: "paleOakWood",
+		blastResistance: 2,
+		material: "mineable/axe",
 		textures:["bambooBlockTop","bambooBlock"],
 		hardness:2,
 		woodSound:true,
@@ -11516,7 +12727,11 @@
 	},
 	{
 		name:"strippedBambooBlock",
+		nameMcd:"stripped_bamboo_block",
 		Name:"Stripped Block of Bamboo",
+		blockStates: "paleOakWood",
+		blastResistance: 2,
+		material: "mineable/axe",
 		textures:["strippedBambooBlockTop","strippedBambooBlock"],
 		hardness:2,
 		woodSound:true,
@@ -11531,20 +12746,31 @@
 		textures: ["strippedBambooBlock","strippedBambooBlock","strippedBambooBlockTop","strippedBambooBlock"],
 		SW: true, hidden:true
 	},
-	{ name: "bambooPlanks", Name:"Bamboo Planks", type:"wood",category:"build", hardness:2, woodSound:true, burnChance:0.1, burnTime:40},
-	{ name: "bambooMosaic", Name:"Bamboo Mosaic", type:"wood",category:"build", hardness:2, woodSound:true, burnChance:0.1, burnTime:40},
+	{ name: "bambooPlanks", nameMcd:"bamboo_planks", Name:"Bamboo Planks", blastResistance: 3, material: "mineable/axe", type:"wood",category:"build", hardness:2, woodSound:true, burnChance:0.1, burnTime:40},
+	{ name: "bambooMosaic", nameMcd:"bamboo_mosaic", Name:"Bamboo Mosaic", blastResistance: 3, material: "mineable/axe", type:"wood",category:"build", hardness:2, woodSound:true, burnChance:0.1, burnTime:40},
 	{
 		name:"bambooButton",
+		nameMcd:"bamboo_button",
 		Name: "Bamboo Button",
+		blockStates: "lever",
+		solid: false,
+		hardness: 0.5,
+		blastResistance: 0.5,
+		material: "mineable/axe",
 		textures:"bambooPlanks",
 		button:true,
 		transparent: true,
 		shadow:false,
-		category:"redstone"
+		category:"redstone",
+		copyPropertiesHere:"oakButton"
 	},
 	{ 
 		name: "bambooDoor",
+		nameMcd:"bamboo_door",
 		Name:"Bamboo Door",
+		blockStates: "oakDoor",
+		blastResistance: 3,
+		material: "mineable/axe",
 		transparent: true,
 		shadow: false,
 		textures: "bambooDoorConnected",
@@ -11552,30 +12778,50 @@
 		woodSound:true,
 		hardness:3,
 		type:"wood",
-		category:"build"
+		category:"build",
+		copyPropertiesHere:"oakDoor"
 	},
 	{
 		name:"bambooFenceGate",
+		nameMcd:"bamboo_fence_gate",
 		Name:"Bamboo Fence Gate",
+		blockStates: "oakFenceGate",
+		blastResistance: 3,
+		material: "mineable/axe",
 		textures:"bambooPlanks",
 		fenceGate:true,
 		hardness:2,
 		woodSound:true,
 		type:"wood",
-		category:"build"
+		category:"build",
+		copyPropertiesHere:"oakFenceGate"
 	},
 	{
 		name: "bambooPressurePlate",
+		nameMcd:"bamboo_pressure_plate",
 		Name: "Bamboo Pressure Plate",
+		blockStates: "stonePressurePlate",
+		transparent: true,
+		solid: false,
+		blastResistance: 0.5,
+		material: "mineable/axe",
 		textures: "bambooPlanks",
 		pressurePlate: true,
 		hardness:0.5,
 		type:"wood",
-		category:"redstone"
+		category:"redstone",
+		copyPropertiesHere:"oakPressurePlate"
 	},
 	{
 		name:"bambooSign",
+		nameMcd:"bamboo_sign",
 		Name:"Bamboo sign",
+		blockStates: "oakSign",
+		transparent: true,
+		solid: false,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16,
 		textures:"bambooPlanks",
 		poleTop:"bambooBlockTop",
 		poleSide:"bambooBlock",
@@ -11585,19 +12831,31 @@
 		hardness:1,
 		woodSound:true,
 		type:"wood",
-		category:"decoration"
+		category:"decoration",
+		useAsWall:"bambooWallSign",
+		copyPropertiesHere:"oakSign"
 	},
 	{ 
 		name: "bambooTrapdoor",
+		nameMcd:"bamboo_trapdoor",
 		Name:"Bamboo Trapdoor",
+		blockStates: "oakTrapdoor",
+		hardness: 3,
+		blastResistance: 3,
+		material: "mineable/axe",
 		transparent: true,
 		trapdoor: true,
 		woodSound: true,
-		category:"build"
+		category:"build",
+		copyPropertiesHere:"oakTrapdoor"
 	},
 	{
 		name:"strippedCherryLog",
+		nameMcd:"stripped_cherry_log",
 		Name:"Stripped Cherry Log",
+		blockStates: "paleOakWood",
+		blastResistance: 2,
+		material: "mineable/axe",
 		textures:["strippedCherryLogTop","strippedCherryLog"],
 		woodSound:true,
 		hardness:2,
@@ -11611,19 +12869,30 @@
 		textures: ["strippedCherryLog","strippedCherryLog","strippedCherryLogTop","strippedCherryLog"],
 		SW: true, hidden:true
 	},
-	{ name: "cherryPlanks", Name:"Cherry Planks", type:"wood",category:"build", hardness:2, woodSound:true, burnChance:0.1, burnTime:40},
+	{ name: "cherryPlanks", nameMcd:"cherry_planks", Name:"Cherry Planks", blastResistance: 3, material: "mineable/axe", type:"wood",category:"build", hardness:2, woodSound:true, burnChance:0.1, burnTime:40},
 	{
 		name:"cherryButton",
+		nameMcd:"cherry_button",
 		Name: "Cherry Button",
+		blockStates: "lever",
+		solid: false,
+		hardness: 0.5,
+		blastResistance: 0.5,
+		material: "mineable/axe",
 		textures:"cherryPlanks",
 		button:true,
 		transparent: true,
 		shadow:false,
-		category:"redstone"
+		category:"redstone",
+		copyPropertiesHere:"oakButton"
 	},
 	{ 
 		name: "cherryDoor",
+		nameMcd:"cherry_door",
 		Name:"Cherry Door",
+		blockStates: "oakDoor",
+		blastResistance: 3,
+		material: "mineable/axe",
 		transparent: true,
 		shadow: false,
 		textures: "cherryDoorConnected",
@@ -11631,30 +12900,50 @@
 		woodSound:true,
 		hardness:3,
 		type:"wood",
-		category:"build"
+		category:"build",
+		copyPropertiesHere:"oakDoor"
 	},
 	{
 		name:"cherryFenceGate",
+		nameMcd:"cherry_fence_gate",
 		Name:"Cherry Fence Gate",
+		blockStates: "oakFenceGate",
+		blastResistance: 3,
+		material: "mineable/axe",
 		textures:"cherryPlanks",
 		fenceGate:true,
 		hardness:2,
 		woodSound:true,
 		type:"wood",
-		category:"build"
+		category:"build",
+		copyPropertiesHere:"oakFenceGate"
 	},
 	{
 		name: "cherryPressurePlate",
+		nameMcd:"cherry_pressure_plate",
 		Name: "Cherry Pressure Plate",
+		blockStates: "stonePressurePlate",
+		transparent: true,
+		solid: false,
+		blastResistance: 0.5,
+		material: "mineable/axe",
 		textures: "cherryPlanks",
 		pressurePlate: true,
 		hardness:0.5,
 		type:"wood",
-		category:"redstone"
+		category:"redstone",
+		copyPropertiesHere:"oakPressurePlate"
 	},
 	{
 		name:"cherrySign",
+		nameMcd:"cherry_sign",
 		Name:"Cherry sign",
+		blockStates: "oakSign",
+		transparent: true,
+		solid: false,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16,
 		textures:"cherryPlanks",
 		poleTop:"cherryLogTop",
 		poleSide:"cherryLog",
@@ -11664,15 +12953,23 @@
 		hardness:1,
 		woodSound:true,
 		type:"wood",
-		category:"decoration"
+		category:"decoration",
+		useAsWall:"cherryWallSign",
+		copyPropertiesHere:"oakSign"
 	},
 	{ 
 		name: "cherryTrapdoor",
+		nameMcd:"cherry_trapdoor",
 		Name:"Cherry Trapdoor",
+		blockStates: "oakTrapdoor",
+		hardness: 3,
+		blastResistance: 3,
+		material: "mineable/axe",
 		transparent: true,
 		trapdoor: true,
 		woodSound: true,
-		category:"build"
+		category:"build",
+		copyPropertiesHere:"oakTrapdoor"
 	},
 	{
 		name:"cherryChair",
@@ -11696,9 +12993,13 @@
 	},
 	{
 		name: "suspicousSand",
+		nameMcd:"suspicious_sand",
 		Name:"Suspicois Sand",
+		category: "nature",
+		blockStates: [{"name":"dusted","values":["0","1","2","3"]}],
+		material: "mineable/shovel",
 		textures:"suspiciousSand0",
-		hardness:0.25, blastResistance:0.5,
+		hardness:0.25, blastResistance:0.25,
 		onupdate: function(x,y,z,b,world,sx,sy,sz){
 			fall(x,y,z,b,world,false)
 		},
@@ -11709,9 +13010,13 @@
 	},
 	{
 		name: "suspicousGravel",
+		nameMcd:"suspicious_gravel",
 		Name:"Suspicous Gravel",
+		category: "nature",
+		blockStates: "suspicousSand",
+		material: "mineable/shovel",
 		textures:"suspiciousGravel0",
-		hardness:0.25, blastResistance:0.5,
+		hardness:0.25, blastResistance:0.25,
 		onupdate: function(x,y,z,b,world,sx,sy,sz){
 			fall(x,y,z,b,world,false)
 		},
@@ -11722,7 +13027,10 @@
 	},
 	{
 		name:"pitcherPlant",
+		nameMcd:"pitcher_plant",
 		Name:"Pitcher Plant",
+		blockStates: "tallSeagrass",
+		material: "plant",
 		shapeName:"pitcherPlant",
 		flatIcon:true,
 		solid: false,
@@ -11734,6 +13042,7 @@
 	},
 	{
 		name:"pitcherPod",
+		nameMcd:"pitcher_pod",
 		Name:"Pitcher Pod",
 		item:true,
 		useAs:function(x,y,z,block,face){
@@ -11744,6 +13053,10 @@
 	},
 	{
 		name:"pitcherCrop",
+		nameMcd:"pitcher_crop",
+		category: "nature",
+		blockStates: [{"name":"age","values":["0","1","2","3","4"]},{"name":"half","values":["upper","lower"]}],
+		material: "plant",
 		textures:"pitcherCropSide",
 		textures1:new Array(6).fill("pitcherCropBottomStage1"),
 		textures2:new Array(6).fill("pitcherCropBottomStage2"),
@@ -11754,11 +13067,16 @@
 		solid: false,
 		drop:"pitcherPod",
 		hidden:true,
-		liquidBreakable:"drop"
+		liquidBreakable:"drop",
+		growSlow:function(x,y,z,world,block){//todo n: make half work
+			let age = +getBlockState(block,this.blockStatesMap.age)
+			if(age !== 4) world.setBlock(x,y,z,setBlockState(block,this.blockStatesMap.age,(age+1)+""))
+		},
 	},
 	{
 		name: "torchflower",
 		Name:"\"Torch\" flower",
+		material: "plant",
 		textures1:new Array(6).fill("torchflowerCropStage0"),
 		textures2:new Array(6).fill("torchflowerCropStage1"),
 		drop:"torchflowerSeeds",
@@ -11774,10 +13092,11 @@
 	},
 	{
 		name:"torchflowerSeeds",
+		nameMcd:"torchflower_seeds",
 		Name:"Torchflower seeds",
 		item:true,
 		useAs:function(x,y,z,block,face){
-			return blockIds.torchflower|SLAB
+			return blockIds.torchflower
 		},
 		category:"items"
 	},
@@ -11792,7 +13111,15 @@
 		transparent:true,
 		shadow:false,
 		solid:false,
-		groundLeaves:true
+		groundLeaves:true,
+		blockStates:[{name:"thick",values:[1,0]}],
+		init:function(){//todo n
+			this.shape = shapes.flat
+			if(this.thickTexture){
+				let block = blockData[this.id + this.blockStatesMap.thick[1]]
+				block.textures = this.thickTexture
+			}
+		}
 	},
 	{
 		name:"driedBirchLeaves",
@@ -11804,7 +13131,9 @@
 		transparent:true,
 		shadow:false,
 		solid:false,
-		groundLeaves:true
+		groundLeaves:true,
+		blockStates:"driedOakLeaves",
+		init:"driedOakLeaves"
 	},
 	{
 		name:"driedSpruceLeaves",
@@ -11820,10 +13149,16 @@
 		randomRotate:true,
 		randomRotateTop:true,
 		randomRotateBottom:true,
+		blockStates:"driedOakLeaves",
+		init:"driedOakLeaves"
 	},
 	{
 		name:"strippedCherryWood",
+		nameMcd:"stripped_cherry_wood",
 		Name:"Stripped Cherry Wood",
+		blockStates: "paleOakWood",
+		blastResistance: 2,
+		material: "mineable/axe",
 		textures: "strippedCherryLog",
 		hardness:2,
 		woodSound:true,
@@ -11835,7 +13170,10 @@
 	},
 	{
 		name:"pinkPetals",
+		nameMcd:"pink_petals",
 		Name:"Pink flowers",
+		blockStates: [{"name":"facing","values":["north","south","west","east"]},{"name":"flower_amount","values":["1","2","3","4"]}],
+		material: "plant",
 		textures:["pinkPetalsFlower","pinkPetalsStem"],
 		iconTexture:"pinkPetals",
 		flowerbed:true,
@@ -11846,20 +13184,9 @@
 		category:"nature",
 		randomRotateOnSpawn:true,
 		onclick:function(x,y,z,world,p,holdObj){
-			if(holdObj && (holdObj.id&isCube) === this.id){
-				let block = world.getBlock(x,y,z), target, rot = block&ROTATION
-				switch(block & (~ROTATION)){
-					case this.id:
-						target = this.id | SLAB
-						break
-					case this.id|SLAB:
-						target = this.id | STAIR
-						break
-					case this.id|STAIR:
-						target = this.id | DOOR
-						break
-				}
-				if(target) world.setBlock(x,y,z,target|rot)
+			if(holdObj && blockData[holdObj.id].name === "pinkPetals"){
+				let block = world.getBlock(x,y,z), target = setBlockState(block,this.blockStatesMap.flower_amount, ""+(+getBlockState(block,this.blockStatesMap.flower_amount)+1))
+				if(target) world.setBlock(x,y,z,target)
 				else return true
 			}
 		},
@@ -11871,7 +13198,9 @@
 	},
 	{
 		name:"lilyPad",
+		nameMcd:"lily_pad",
 		Name:"Lily Pad",
+		material: "plant;mineable/axe",
 		transparent:true,
 		shadow:false,
 		shapeName:"flat",
@@ -11933,6 +13262,7 @@
 		randomRotate:true,
 		randomRotateTop:true,
 		randomRotateBottom:true,
+		init:"driedOakLeaves"
 	},
 	{
 		name:"groundBerries",
@@ -11955,142 +13285,232 @@
 	},
 	{
 		name:"brainCoralBlock",
+		nameMcd:"brain_coral_block",
 		Name:"Sponge-like Coral Block",
+		harvestToolsNames: "stone",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
 		category:"nature",
-		coralBlock:true
+		coralBlock:true,
+		copyPropertiesHere:"bubbleCoralBlock"
 	},
 	{
 		name:"bubbleCoralBlock",
+		nameMcd:"bubble_coral_block",
 		Name:"Bubble Coral Block",
-		category:"nature",
-		coralBlock:true
+		harvestToolsNames: "stone",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category:"nature",
+		coralBlock:true,
+		growSlow:function(x,y,z,world,block){
+			let wet = (
+				blockData[world.getBlock(x,y+1,z)].wet ||
+				blockData[world.getBlock(x,y-1,z)].wet ||
+				blockData[world.getBlock(x+1,y,z)].wet ||
+				blockData[world.getBlock(x-1,y,z)].wet ||
+				blockData[world.getBlock(x,y,z+1)].wet ||
+				blockData[world.getBlock(x,y,z-1)].wet
+			)
+			if(!wet){
+				let name = this.name
+				name = "dead" + name[0].toUpperCase() + name.substring(1)
+				world.setBlock(x, y, z, blockIds[name])
+			}
+		}
 	},
 	{
 		name:"fireCoralBlock",
+		nameMcd:"fire_coral_block",
 		Name:"Fire Coral Block",
+		harvestToolsNames: "stone",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
 		category:"nature",
-		coralBlock:true
+		coralBlock:true,
+		copyPropertiesHere:"bubbleCoralBlock"
 	},
 	{
 		name:"hornCoralBlock",
+		nameMcd:"horn_coral_block",
 		Name:"Horn Coral Block",
+		harvestToolsNames: "stone",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
 		category:"nature",
-		coralBlock:true
+		coralBlock:true,
+		copyPropertiesHere:"bubbleCoralBlock"
 	},
 	{
 		name:"tubeCoralBlock",
+		nameMcd:"tube_coral_block",
 		Name:"Tube Coral Block",
+		harvestToolsNames: "stone",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
 		category:"nature",
-		coralBlock:true
+		coralBlock:true,
+		copyPropertiesHere:"bubbleCoralBlock"
 	},
 	{
 		name:"brainCoral",
+		nameMcd:"brain_coral",
 		Name:"Sponge-like Coral (standing)",
+		blockStates: "mangroveRoots",
+		decreaseLight: 1,
 		category:"nature",
 		coral:true,
 		transparent:true,
 		solid:false,
 		shadow:false,
 		potCross:true,
-		wetgrassSound:true
+		wetgrassSound:true,
+		copyPropertiesHere:"bubbleCoralBlock"
 	},
 	{
 		name:"bubbleCoral",
+		nameMcd:"bubble_coral",
 		Name:"Bubble Coral (standing)",
+		blockStates: "mangroveRoots",
+		decreaseLight: 1,
 		category:"nature",
 		coral:true,
 		transparent:true,
 		solid:false,
 		shadow:false,
 		potCross:true,
-		wetgrassSound:true
+		wetgrassSound:true,
+		copyPropertiesHere:"bubbleCoralBlock"
 	},
 	{
 		name:"fireCoral",
+		nameMcd:"fire_coral",
 		Name:"Fire Coral (standing)",
+		blockStates: "mangroveRoots",
+		decreaseLight: 1,
 		category:"nature",
 		coral:true,
 		transparent:true,
 		solid:false,
 		shadow:false,
 		potCross:true,
-		wetgrassSound:true
+		wetgrassSound:true,
+		copyPropertiesHere:"bubbleCoralBlock"
 	},
 	{
 		name:"hornCoral",
+		nameMcd:"horn_coral",
 		Name:"Horn Coral (standing)",
+		blockStates: "mangroveRoots",
+		decreaseLight: 1,
 		category:"nature",
 		coral:true,
 		transparent:true,
 		solid:false,
 		shadow:false,
 		potCross:true,
-		wetgrassSound:true
+		wetgrassSound:true,
+		copyPropertiesHere:"bubbleCoralBlock"
 	},
 	{
 		name:"tubeCoral",
+		nameMcd:"tube_coral",
 		Name:"Tube Coral (standing)",
+		blockStates: "mangroveRoots",
+		decreaseLight: 1,
 		category:"nature",
 		coral:true,
 		transparent:true,
 		solid:false,
 		shadow:false,
 		potCross:true,
-		wetgrassSound:true
+		wetgrassSound:true,
+		copyPropertiesHere:"bubbleCoralBlock"
 	},
 	{
 		name:"brainCoralFan",
+		nameMcd:"brain_coral_fan",
 		Name:"Sponge-like Coral Fan",
+		blockStates: "mangroveRoots",
+		decreaseLight: 1,
 		category:"nature",
 		coralFan:true,
 		transparent:true,
 		solid:false,
 		shadow:false,
-		wetgrassSound:true
+		wetgrassSound:true,
+		useAsWall:"brainCoralWallFan",
+		copyPropertiesHere:"bubbleCoralBlock"
 	},
 	{
 		name:"bubbleCoralFan",
+		nameMcd:"bubble_coral_fan",
 		Name:"Bubble Coral Fan",
+		blockStates: "mangroveRoots",
+		decreaseLight: 1,
 		category:"nature",
 		coralFan:true,
 		transparent:true,
 		solid:false,
 		shadow:false,
-		wetgrassSound:true
+		wetgrassSound:true,
+		useAsWall:"bubbleCoralWallFan",
+		copyPropertiesHere:"bubbleCoralBlock"
 	},
 	{
 		name:"fireCoralFan",
+		nameMcd:"fire_coral_fan",
 		Name:"Fire Coral Fan",
+		blockStates: "mangroveRoots",
+		decreaseLight: 1,
 		category:"nature",
 		coralFan:true,
 		transparent:true,
 		solid:false,
 		shadow:false,
-		wetgrassSound:true
+		wetgrassSound:true,
+		useAsWall:"fireCoralWallFan",
+		copyPropertiesHere:"bubbleCoralBlock"
 	},
 	{
 		name:"hornCoralFan",
+		nameMcd:"horn_coral_fan",
 		Name:"Horn Coral Fan",
+		blockStates: "mangroveRoots",
+		decreaseLight: 1,
 		category:"nature",
 		coralFan:true,
 		transparent:true,
 		solid:false,
 		shadow:false,
-		wetgrassSound:true
+		wetgrassSound:true,
+		useAsWall:"hornCoralWallFan",
+		copyPropertiesHere:"bubbleCoralBlock"
 	},
 	{
 		name:"tubeCoralFan",
+		nameMcd:"tube_coral_fan",
 		Name:"Tube Coral Fan",
+		blockStates: "mangroveRoots",
+		decreaseLight: 1,
 		category:"nature",
 		coralFan:true,
 		transparent:true,
 		solid:false,
 		shadow:false,
-		wetgrassSound:true
+		wetgrassSound:true,
+		useAsWall:"tubeCoralWallFan",
+		copyPropertiesHere:"bubbleCoralBlock"
 	},
 	{
 		name:"minecart",
 		Name:"Minecart",
+		stackSize: 1,
 		textures:"minecartIcon",
 		item:true,
 		category:"redstone",
@@ -12103,6 +13523,8 @@
 	{
 		name:"rail",
 		Name:"Rail",
+		blockStates: [{"name":"shape","values":["north_south","east_west","ascending_east","ascending_west","ascending_north","ascending_south","south_east","south_west","north_west","north_east"]},{"name":"waterlogged","values":[false,true]}],
+		material: "mineable/pickaxe",
 		transparent:true,
 		shadow:false,
 		solid:false,
@@ -12111,13 +13533,139 @@
 		rail:true,
 		category:"redstone",
 		flatIcon:true,
+		lastConnectSides: {},
+		isFacing: function(x,y,z,side,setLastConnectSides,world){//are there sides of that rail facing in direction
+			let block = world.getBlock(x,y,z)
+			if(!blockData[block].rail) return false
+			let rot = getBlockState(block,this.blockStatesMap.shape)
+			switch(rot){
+				case "north_south":
+				case "ascending_north":
+				case "ascending_south":
+					if(side === "north" || side === "south") return this.lastConnectSides[setLastConnectSides] = true
+				case "east_west":
+				case "ascending_east":
+				case "ascending_west":
+					if(side === "east" || side === "west") return this.lastConnectSides[setLastConnectSides] = true
+				case "north_east":
+					if(side === "south" || side === "west") return this.lastConnectSides[setLastConnectSides] = true
+				case "south_west":
+					if(side === "north" || side === "east") return this.lastConnectSides[setLastConnectSides] = true
+				case "north_west":
+					if(side === "south" || side === "east") return this.lastConnectSides[setLastConnectSides] = true
+				case "south_east":
+					if(side === "north" || side === "west") return this.lastConnectSides[setLastConnectSides] = true
+			}
+			return false
+		},
+		isConnected: function(x,y,z,world){//returns number of sides connected
+			let block = world.getBlock(x,y,z)
+			if(!blockData[block].rail) return
+			let rot = getBlockState(block,this.blockStatesMap.shape)
+			switch(rot){
+				case "north_south": return this.isFacing(x,y,z+1,"south","north",world) + this.isFacing(x,y,z-1,"north","south",world)
+				case "east_west":  return this.isFacing(x+1,y,z,"west","east",world) + this.isFacing(x-1,y,z,"east","west",world)
+				case "ascending_north": return this.isFacing(x,y+1,z+1,"south","northUp",world) + this.isFacing(x,y,z-1,"north","south",world)
+				case "ascending_south": return this.isFacing(x,y+1,z-1,"north","southUp",world) + this.isFacing(x,y,z+1,"south","north",world)
+				case "ascending_east":  return this.isFacing(x+1,y+1,z,"west","eastUp",world) + this.isFacing(x-1,y,z,"east","west",world)
+				case "ascending_west":  return this.isFacing(x-1,y+1,z,"east","westUp",world) + this.isFacing(x+1,y,z,"west","east",world)
+				case "south_west":  return this.isFacing(x,y,z-1,"north","south",world)+this.isFacing(x-1,y,z,"east","west",world)
+				case "north_east":  return this.isFacing(x,y,z+1,"south","north",world)+this.isFacing(x+1,y,z,"west","east",world)
+				case "south_east":  return this.isFacing(x,y,z-1,"north","south",world)+this.isFacing(x+1,y,z,"west","east",world)
+				case "north_west":  return this.isFacing(x,y,z+1,"south","north",world)+this.isFacing(x-1,y,z,"east","west",world)
+			}
+		},
+		railonupdate: function(x,y,z,b,world){
+			this.lastConnectSides.north = this.lastConnectSides.south = this.lastConnectSides.east = this.lastConnectSides.west = this.lastConnectSides.northUp = this.lastConnectSides.southUp = this.lastConnectSides.eastUp = this.lastConnectSides.westUp = false
+			if(this.isConnected(x,y,z,world) === 2) return
+			let {north:curConnectNorth, south:curConnectSouth, east:curConnectEast, west:curConnectWest, northUp:curConnectNorthUp, southUp:curConnectSouthUp, eastUp:curConnectEastUp, westUp:curConnectWestUp} = this.lastConnectSides
+			//below: is the other rail available for connecting or already connected to this rail
+			let north = this.isConnected(x,y,z+1,world) < 2 || curConnectNorth,
+				south = this.isConnected(x,y,z-1,world) < 2 || curConnectSouth,
+				east = this.isConnected(x+1,y,z,world) < 2 || curConnectEast,
+				west = this.isConnected(x-1,y,z,world) < 2 || curConnectWest,
+				northUp = this.isConnected(x,y+1,z+1,world) < 2 || curConnectNorthUp,
+				southUp = this.isConnected(x,y+1,z-1,world) < 2 || curConnectSouthUp,
+				eastUp = this.isConnected(x+1,y+1,z,world) < 2 || curConnectEastUp,
+				westUp = this.isConnected(x-1,y+1,z,world) < 2 || curConnectWestUp
+			this.lastConnectSides.north = false
+			north = north || this.isConnected(x,y-1,z+1,world) < 2 || this.lastConnectSides.north
+			this.lastConnectSides.south = false
+			south = south || this.isConnected(x,y-1,z-1,world) < 2 || this.lastConnectSides.south
+			this.lastConnectSides.east = false
+			east = east || this.isConnected(x+1,y-1,z,world) < 2 || this.lastConnectSides.east
+			this.lastConnectSides.west = false
+			west = west || this.isConnected(x-1,y-1,z,world) < 2 || this.lastConnectSides.west
+
+			let rot
+			if(northUp){
+				rot = "ascending_north"
+			}else if(eastUp){
+				rot = "ascending_east"
+			}else if(southUp){
+				rot = "ascending_south"
+			}else if(westUp){
+				rot = "ascending_west"
+			}else if(this.name === "rail" && north && east){
+				rot = "north_east"
+			}else if(this.name === "rail" && east && south){
+				rot = "south_east"
+			}else if(this.name === "rail" && south && west){
+				rot = "south_west"
+			}else if(this.name === "rail" && west && north){
+				rot = "north_west"
+			}else if(north || south){
+				rot = "north_south"
+			}else if(east || west){
+				rot = "east_west"
+			}else return
+			target = setBlockState(b,this.blockStatesMap.shape,rot)
+			if(b !== target){
+				world.setBlock(x,y,z,target,false,false,false,true)
+			}
+		},
+		onset: function(x,y,z,world){
+			world.updateBlock(x,y+1,z+1,false,false,null,null,null)
+			world.updateBlock(x,y+1,z-1,false,false,null,null,null)
+			world.updateBlock(x+1,y+1,z,false,false,null,null,null)
+			world.updateBlock(x-1,y+1,z,false,false,null,null,null)
+			world.updateBlock(x,y-1,z+1,false,false,null,null,null)
+			world.updateBlock(x,y-1,z-1,false,false,null,null,null)
+			world.updateBlock(x+1,y-1,z,false,false,null,null,null)
+			world.updateBlock(x-1,y-1,z,false,false,null,null,null)
+			if(this.carryRedstone){
+				let power = world.getRedstoneWirePower(x,y,z)
+				let strong = world.getSurroundingBlockPower(x,y,z) === "strong"
+				if(strong) power = 15
+				world.setTagByName(x,y,z,"power",power)
+				if(power) world.spreadPower(x,y,z,power)
+			}
+		},
+		ondelete:function(x,y,z,prevTags,prev,world){
+			world.updateBlock(x,y+1,z+1)
+			world.updateBlock(x,y+1,z-1)
+			world.updateBlock(x+1,y+1,z)
+			world.updateBlock(x-1,y+1,z)
+			world.updateBlock(x,y-1,z+1)
+			world.updateBlock(x,y-1,z-1)
+			world.updateBlock(x+1,y-1,z)
+			world.updateBlock(x-1,y-1,z)
+			if(this.carryRedstone){
+				const power = getTagBits(prevTags,"power",this.id)
+				if(power) world.unspreadPower(x,y,z,power)
+			}
+		},
 		onupdate:function(x,y,z,b,world,sx,sy,sz){
 			this.railonupdate(x,y,z,b,world)
 		},
+		copyFromProperties:["isFacing,isConnected","railonupdate","onset","ondelete"]
 	},
 	{
 		name:"poweredRail",
+		nameMcd:"powered_rail",
 		Name:"Powered Rail",
+		blockStates: [{"name":"powered","values":[false,true]},{"name":"shape","values":["north_south","east_west","ascending_east","ascending_west","ascending_north","ascending_south"]},{"name":"waterlogged","values":[false,true]}],
+		material: "mineable/pickaxe",
 		transparent:true,
 		shadow:false,
 		solid:false,
@@ -12127,14 +13675,13 @@
 		category:"redstone",
 		flatIcon:true,
 		carryRedstone:true,
+		copyPropertiesHere:"rail",
 		onupdate:function(x,y,z,b,world,sx,sy,sz){
 			let on = world.getTagByName(x,y,z,"power")
-			if(on && !(b&FLIP)){
-				b |= FLIP
-				world.setBlock(x,y,z,b,false,false,false,true)
-			}else if(!on && (b&FLIP)){
-				b &= ~FLIP
-				world.setBlock(x,y,z,b,false,false,false,true)
+			if(on && !getBlockState(b,this.blockStatesMap.powered)){
+				world.setBlock(x,y,z,setBlockState(b,this.blockStatesMap.powered,true),false,false,false,true)
+			}else if(!on && getBlockState(b,this.blockStatesMap.powered)){
+				world.setBlock(x,y,z,setBlockState(b,this.blockStatesMap.powered,false),false,false,false,true)
 			}
 			this.railonupdate(x,y,z,b,world)
 		},
@@ -12150,6 +13697,7 @@
 		textures3:new Array(6).fill("cornStage3"),
 		textures4:new Array(6).fill("cornStage4"),
 		textures5:new Array(6).fill("cornStage5"),
+		blockStates:[{name:"age",values:["0","1","2","3","4","5"]}],
 		transparent: true,
 		shadow: false,
 		solid: false,
@@ -12157,8 +13705,15 @@
 		hidden:true,
 		liquidBreakable:"drop",
 		growBonemeal:function(x,y,z,world){
-			world.setBlock(x,y,z, this.id|DOOR)
-		}
+			world.setBlock(x,y,z, this.id+this.blockStatesMap.age[5])
+		},
+		dropAmount:function(block){
+			return +getBlockState(block, this.blockStatesMap.age) === 5 ? randInt(2,3) : 1
+		},//todo n: shape
+		growSlow:function(x,y,z,world,block){
+			let age = +getBlockState(block,this.blockStatesMap.age)
+			if(age !== 5) world.setBlock(x,y,z,setBlockState(block,this.blockStatesMap.age,(age+1)+""))
+		},
 	},
 	{
 		name:"corn",
@@ -12186,20 +13741,5661 @@
 	},
 	{
 		name:"dirtPath",
+		nameMcd:"dirt_path",
+		category: "nature",
+		hardness: 0.65,
+		blastResistance: 0.65,
+		material: "mineable/shovel",
 		_1PixLower:true,
 		textures: ["dirt","dirtPathTop","dirtPathSide","dirtPathSide","dirtPathSide","dirtPathSide"],
 		solid: true,
 		transparent: true,
 		cullFace: "same",
-	}
+	},
+	{
+		name:"blueRedstoneDust",
+		blockStates: "redstoneDust",
+		shadow:false,
+		transparent:true,
+		solid:false,
+		hidden:true,
+		smoothLight:false,
+		drop: "blueRedstone",
+		carryRedstone:true,
+		copyPropertiesHere:"redstoneDust",
+		tint:[[0,75,75],[0,111,111],[0,121,121],[0,130,130],[0,140,140],[0,151,151],[0,161,161],[0,171,171],[0,181,181],[0,191,191],[0,202,202],[0,211,211],[0,221,221],[6,231,231],[27,241,241],[49,252,252]].map(v => {v[0]/=255;v[1]/=255;v[2]/=255;return v}),
+		tagTint: "power",
+		redstoneDust:true
+	},
+	{
+		name:"paleOakWood",
+		nameMcd:"pale_oak_wood",
+		Name:"Pale Oak Wood",
+		blockStates: [{"name":"axis","values":["x","y","z"]}],
+		hardness: 2,
+		blastResistance: 2,
+		material: "mineable/axe"
+	},
+	{
+		name:"paleOakPlanks",
+		nameMcd:"pale_oak_planks",
+		Name:"Pale Oak Planks",
+		hardness: 2,
+		blastResistance: 3,
+		material: "mineable/axe"
+	},
+	{
+		name:"paleOakSapling",
+		nameMcd:"pale_oak_sapling",
+		Name:"Pale Oak Sapling",
+		blockStates: "oakSapling",
+		transparent: true,
+		solid: false,
+		material: "plant;mineable/axe",
+		category: "nature"
+	},
+	{
+		name:"mangrovePropagule",
+		nameMcd:"mangrove_propagule",
+		Name:"Mangrove Propagule",
+		blockStates: [{"name":"age","values":["0","1","2","3","4"]},{"name":"hanging","values":[false,true]},{"name":"stage","values":["0","1"]},{"name":"waterlogged","values":[false,true]}],
+		transparent: true,
+		solid: false,
+		material: "plant;mineable/axe",
+		category: "nature"
+	},
+	{
+		name:"paleOakLog",
+		nameMcd:"pale_oak_log",
+		Name:"Pale Oak Log",
+		copyPropertiesHere:"oakLog",
+		blockStates: "paleOakWood",
+		hardness: 2,
+		blastResistance: 2,
+		material: "mineable/axe"
+	},
+	{
+		name:"strippedPaleOakLog",
+		nameMcd:"stripped_pale_oak_log",
+		Name:"Stripped Pale Oak Log",
+		copyPropertiesHere:"oakLog",
+		blockStates: "paleOakWood",
+		hardness: 2,
+		blastResistance: 2,
+		material: "mineable/axe"
+	},
+	{
+		name:"strippedPaleOakWood",
+		nameMcd:"stripped_pale_oak_wood",
+		Name:"Stripped Pale Oak Wood",
+		blockStates: "paleOakWood",
+		hardness: 2,
+		blastResistance: 2,
+		material: "mineable/axe"
+	},
+	{
+		name:"paleOakLeaves",
+		nameMcd:"pale_oak_leaves",
+		Name:"Pale Oak Leaves",
+		blockStates: "oakLeaves",
+		decreaseLight: 1,
+		transparent: true,
+		hardness: 0.2,
+		blastResistance: 0.2,
+		material: "leaves;mineable/hoe",
+		category: "nature"
+	},
+	{
+		name:"wetSponge",
+		nameMcd:"wet_sponge",
+		Name:"Wet Sponge",
+		hardness: 0.6,
+		blastResistance: 0.6,
+		material: "mineable/hoe"
+	},
+	{
+		name:"detectorRail",
+		nameMcd:"detector_rail",
+		Name:"Detector Rail",
+		copyPropertiesHere:"rail",
+		blockStates: "poweredRail",
+		transparent: true,
+		solid: false,
+		hardness: 0.7,
+		blastResistance: 0.7,
+		material: "mineable/pickaxe",
+		category: "build"
+	},
+	{
+		name:"pistonHead",
+		nameMcd:"piston_head",
+		Name:"Piston Head",
+		blockStates: [{"name":"facing","values":["north","east","south","west","up","down"]},{"name":"short","values":[false,true]},{"name":"type","values":["normal","sticky"]}],
+		hardness: 1.5,
+		blastResistance: 1.5,
+		material: "mineable/pickaxe",
+		category: "build"
+	},
+	{
+		name:"movingPiston",
+		nameMcd:"moving_piston",
+		Name:"Moving Piston",
+		blockStates: [{"name":"facing","values":["north","east","south","west","up","down"]},{"name":"type","values":["normal","sticky"]}],
+		transparent: true,
+		solid: false,
+		hardness: Infinity
+	},
+	{
+		name:"chiseledBookshelf",
+		nameMcd:"chiseled_bookshelf",
+		Name:"Chiseled Bookshelf",
+		blockStates: [{"name":"facing","values":["north","south","west","east"]},{"name":"slot_0_occupied","values":[false,true]},{"name":"slot_1_occupied","values":[false,true]},{"name":"slot_2_occupied","values":[false,true]},{"name":"slot_3_occupied","values":[false,true]},{"name":"slot_4_occupied","values":[false,true]},{"name":"slot_5_occupied","values":[false,true]}],
+		hardness: 1.5,
+		blastResistance: 1.5,
+		material: "mineable/axe"
+	},
+	{
+		name:"wallTorch",
+		nameMcd:"wall_torch",
+		Name:"Torch",
+		blockStates: [{"name":"facing","values":["north","south","west","east"]}],
+		lightLevel: 14,
+		transparent: true,
+		solid: false
+	},
+	{
+		name:"creakingHeart",
+		nameMcd:"creaking_heart",
+		Name:"Creaking Heart",
+		blockStates: [{"name":"axis","values":["x","y","z"]},{"name":"creaking","values":["disabled","dormant","active"]}],
+		hardness: 5,
+		blastResistance: 5,
+		material: "mineable/axe"
+	},
+	{
+		name:"oakStairs",
+		nameMcd:"oak_stairs",
+		Name:"Oak Stairs",
+		blockStates: [{"name":"facing","values":["north","south","west","east"]},{"name":"half","values":["top","bottom"]},{"name":"shape","values":["straight","inner_left","inner_right","outer_left","outer_right"]},{"name":"waterlogged","values":[false,true]}],
+		hardness: 2,
+		blastResistance: 3,
+		material: "mineable/axe",
+		copyFromProperties:["canStairConnect","flipFacing"],
+		useAs:function(x,y,z,block,face,world,rotate,flip){
+			return setBlockState(setBlockState(this.id,this.blockStatesMap.facing,rotate),this.blockStatesMap.half, flip?"top":"bottom")
+		},
+		canStairConnect(sourceBlock,otherBlock,isBack){
+			if(blockData[otherBlock].name !== this.name) return
+			let sourceRot = getBlockRotation(getBlockState(sourceBlock,this.blockStatesMap.facing))
+			let otherRot = getBlockRotation(getBlockState(otherBlock,this.blockStatesMap.facing))
+			let rotDiff = mod(sourceRot-otherRot,4)
+			if(rotDiff === 1) return 1
+			else if(rotDiff === 3) return -1
+		},
+		onupdate:function(x,y,z,b,world,sx,sy,sz){
+			if(getBlockState(b,this.blockStatesMap.shape) !== "straight") return
+			let front, back //front is lower side
+			switch(getBlockState(b,this.blockStatesMap.facing)){
+				case "north":
+					front = world.getBlock(x,y,z-1)
+					back = world.getBlock(x,y,z+1)
+					break
+				case "south":
+					front = world.getBlock(x,y,z+1)
+					back = world.getBlock(x,y,z-1)
+					break
+				case "east":
+					front = world.getBlock(x-1,y,z)
+					back = world.getBlock(x+1,y,z)
+					break
+				case "west":
+					front = world.getBlock(x+1,y,z)
+					back = world.getBlock(x-1,y,z)
+					break
+			}
+			let connectBack = this.canStairConnect(b,back,true)
+			let connectFront = this.canStairConnect(b,front,false)
+			if(connectBack || connectFront) world.setTimeout(() => {
+				if(connectBack === 1) world.setBlock(x,y,z,this.flipFacing(false,setBlockState(b,this.blockStatesMap.shape,"outer_right")))
+				else if(connectBack === -1) world.setBlock(x,y,z,this.flipFacing(true,setBlockState(b,this.blockStatesMap.shape,"outer_left")))
+				else if(connectFront === 1) world.setBlock(x,y,z,this.flipFacing(false,setBlockState(b,this.blockStatesMap.shape,"inner_right")))
+				else if(connectFront === -1) world.setBlock(x,y,z,this.flipFacing(true,setBlockState(b,this.blockStatesMap.shape,"inner_left")))
+			},tickTime)
+		},
+		flipFacing:function(alt,block){
+			if((getBlockState(block,this.blockStatesMap.half) === "bottom") !== alt) return block
+			switch(getBlockState(block,this.blockStatesMap.facing)){
+				case "north": return setBlockState(block,this.blockStatesMap.facing,"south")
+				case "south": return setBlockState(block,this.blockStatesMap.facing,"north")
+				case "east": return setBlockState(block,this.blockStatesMap.facing,"west")
+				case "west": return setBlockState(block,this.blockStatesMap.facing,"east")
+			}
+		}
+	},
+	{
+		name:"paleOakSign",
+		nameMcd:"pale_oak_sign",
+		Name:"Pale Oak Sign",
+		blockStates: "oakSign",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"cobblestoneStairs",
+		nameMcd:"cobblestone_stairs",
+		Name:"Cobblestone Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"oakWallSign",
+		nameMcd:"oak_wall_sign",
+		Name:"Oak Sign",
+		blockStates: "ladder",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16,
+		copyPropertiesHere:"oakSign"
+	},
+	{
+		name:"spruceWallSign",
+		nameMcd:"spruce_wall_sign",
+		Name:"Spruce Sign",
+		blockStates: "ladder",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16,
+		copyPropertiesHere:"oakSign"
+	},
+	{
+		name:"birchWallSign",
+		nameMcd:"birch_wall_sign",
+		Name:"Birch Sign",
+		blockStates: "ladder",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16,
+		copyPropertiesHere:"oakSign"
+	},
+	{
+		name:"acaciaWallSign",
+		nameMcd:"acacia_wall_sign",
+		Name:"Acacia Sign",
+		blockStates: "ladder",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16,
+		copyPropertiesHere:"oakSign"
+	},
+	{
+		name:"cherryWallSign",
+		nameMcd:"cherry_wall_sign",
+		Name:"Cherry Sign",
+		blockStates: "ladder",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16,
+		copyPropertiesHere:"oakSign"
+	},
+	{
+		name:"jungleWallSign",
+		nameMcd:"jungle_wall_sign",
+		Name:"Jungle Sign",
+		blockStates: "ladder",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16,
+		copyPropertiesHere:"oakSign"
+	},
+	{
+		name:"darkOakWallSign",
+		nameMcd:"dark_oak_wall_sign",
+		Name:"Dark Oak Sign",
+		blockStates: "ladder",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16,
+		copyPropertiesHere:"oakSign"
+	},
+	{
+		name:"paleOakWallSign",
+		nameMcd:"pale_oak_wall_sign",
+		Name:"Pale Oak Sign",
+		blockStates: "ladder",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16,
+		copyPropertiesHere:"oakSign"
+	},
+	{
+		name:"mangroveWallSign",
+		nameMcd:"mangrove_wall_sign",
+		Name:"Mangrove Sign",
+		blockStates: "ladder",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16,
+		copyPropertiesHere:"oakSign"
+	},
+	{
+		name:"bambooWallSign",
+		nameMcd:"bamboo_wall_sign",
+		Name:"Bamboo Sign",
+		blockStates: "ladder",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16,
+		copyPropertiesHere:"oakSign"
+	},
+	{
+		name:"oakHangingSign",
+		nameMcd:"oak_hanging_sign",
+		Name:"Oak Hanging Sign",
+		blockStates: [{"name":"attached","values":[false,true]},{"name":"rotation","values":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15"]},{"name":"waterlogged","values":[false,true]}],
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"spruceHangingSign",
+		nameMcd:"spruce_hanging_sign",
+		Name:"Spruce Hanging Sign",
+		blockStates: "oakHangingSign",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"birchHangingSign",
+		nameMcd:"birch_hanging_sign",
+		Name:"Birch Hanging Sign",
+		blockStates: "oakHangingSign",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"acaciaHangingSign",
+		nameMcd:"acacia_hanging_sign",
+		Name:"Acacia Hanging Sign",
+		blockStates: "oakHangingSign",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"cherryHangingSign",
+		nameMcd:"cherry_hanging_sign",
+		Name:"Cherry Hanging Sign",
+		blockStates: "oakHangingSign",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"jungleHangingSign",
+		nameMcd:"jungle_hanging_sign",
+		Name:"Jungle Hanging Sign",
+		blockStates: "oakHangingSign",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"darkOakHangingSign",
+		nameMcd:"dark_oak_hanging_sign",
+		Name:"Dark Oak Hanging Sign",
+		blockStates: "oakHangingSign",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"paleOakHangingSign",
+		nameMcd:"pale_oak_hanging_sign",
+		Name:"Pale Oak Hanging Sign",
+		blockStates: "oakHangingSign",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"crimsonHangingSign",
+		nameMcd:"crimson_hanging_sign",
+		Name:"Crimson Hanging Sign",
+		blockStates: "oakHangingSign",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"warpedHangingSign",
+		nameMcd:"warped_hanging_sign",
+		Name:"Warped Hanging Sign",
+		blockStates: "oakHangingSign",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"mangroveHangingSign",
+		nameMcd:"mangrove_hanging_sign",
+		Name:"Mangrove Hanging Sign",
+		blockStates: "oakHangingSign",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"bambooHangingSign",
+		nameMcd:"bamboo_hanging_sign",
+		Name:"Bamboo Hanging Sign",
+		blockStates: "oakHangingSign",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"oakWallHangingSign",
+		nameMcd:"oak_wall_hanging_sign",
+		Name:"Oak Hanging Sign",
+		blockStates: "ladder",
+		transparent: true,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"spruceWallHangingSign",
+		nameMcd:"spruce_wall_hanging_sign",
+		Name:"Spruce Hanging Sign",
+		blockStates: "ladder",
+		transparent: true,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"birchWallHangingSign",
+		nameMcd:"birch_wall_hanging_sign",
+		Name:"Birch Hanging Sign",
+		blockStates: "ladder",
+		transparent: true,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"acaciaWallHangingSign",
+		nameMcd:"acacia_wall_hanging_sign",
+		Name:"Acacia Hanging Sign",
+		blockStates: "ladder",
+		transparent: true,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"cherryWallHangingSign",
+		nameMcd:"cherry_wall_hanging_sign",
+		Name:"Cherry Hanging Sign",
+		blockStates: "ladder",
+		transparent: true,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"jungleWallHangingSign",
+		nameMcd:"jungle_wall_hanging_sign",
+		Name:"Jungle Hanging Sign",
+		blockStates: "ladder",
+		transparent: true,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"darkOakWallHangingSign",
+		nameMcd:"dark_oak_wall_hanging_sign",
+		Name:"Dark Oak Hanging Sign",
+		blockStates: "ladder",
+		transparent: true,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"paleOakWallHangingSign",
+		nameMcd:"pale_oak_wall_hanging_sign",
+		Name:"Pale Oak Hanging Sign",
+		blockStates: "ladder",
+		transparent: true,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"mangroveWallHangingSign",
+		nameMcd:"mangrove_wall_hanging_sign",
+		Name:"Mangrove Hanging Sign",
+		blockStates: "ladder",
+		transparent: true,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"crimsonWallHangingSign",
+		nameMcd:"crimson_wall_hanging_sign",
+		Name:"Crimson Hanging Sign",
+		blockStates: "ladder",
+		transparent: true,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"warpedWallHangingSign",
+		nameMcd:"warped_wall_hanging_sign",
+		Name:"Warped Hanging Sign",
+		blockStates: "ladder",
+		transparent: true,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"bambooWallHangingSign",
+		nameMcd:"bamboo_wall_hanging_sign",
+		Name:"Bamboo Hanging Sign",
+		blockStates: "ladder",
+		transparent: true,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"paleOakPressurePlate",
+		nameMcd:"pale_oak_pressure_plate",
+		Name:"Pale Oak Pressure Plate",
+		copyPropertiesHere:"oakPressurePlate",
+		blockStates: "stonePressurePlate",
+		transparent: true,
+		solid: false,
+		hardness: 0.5,
+		blastResistance: 0.5,
+		material: "mineable/axe"
+	},
+	{
+		name:"redstoneWallTorch",
+		nameMcd:"redstone_wall_torch",
+		Name:"Redstone Torch",
+		blockStates: "furnace",
+		lightLevel: 7,
+		transparent: true,
+		solid: false,
+		copyPropertiesHere:"redstoneTorch",
+		init:"redstoneTorch"
+	},
+	{
+		name:"oakFence",
+		nameMcd:"oak_fence",
+		Name:"Oak Fence",
+		blockStates: [{"name":"east","values":[false,true]},{"name":"north","values":[false,true]},{"name":"south","values":[false,true]},{"name":"waterlogged","values":[false,true]},{"name":"west","values":[false,true]}],
+		hardness: 2,
+		blastResistance: 3,
+		material: "mineable/axe"
+	},
+	{
+		name:"soulWallTorch",
+		nameMcd:"soul_wall_torch",
+		Name:"Soul Torch",
+		blockStates: "wallTorch",
+		lightLevel: 10,
+		transparent: true,
+		solid: false
+	},
+	{
+		name:"paleOakTrapdoor",
+		nameMcd:"pale_oak_trapdoor",
+		Name:"Pale Oak Trapdoor",
+		copyPropertiesHere:"oakTrapdoor",
+		blockStates: "oakTrapdoor",
+		transparent: true,
+		hardness: 3,
+		blastResistance: 3,
+		material: "mineable/axe"
+	},
+	{
+		name:"infestedStone",
+		nameMcd:"infested_stone",
+		Name:"Infested Stone",
+		hardness: 0.75,
+		blastResistance: 0.75,
+		material: "mineable/pickaxe",
+		category: "build"
+	},
+	{
+		name:"infestedCobblestone",
+		nameMcd:"infested_cobblestone",
+		Name:"Infested Cobblestone",
+		hardness: 1,
+		blastResistance: 0.75,
+		material: "mineable/pickaxe",
+		category: "build"
+	},
+	{
+		name:"infestedStoneBricks",
+		nameMcd:"infested_stone_bricks",
+		Name:"Infested Stone Bricks",
+		hardness: 0.75,
+		blastResistance: 0.75,
+		material: "mineable/pickaxe",
+		category: "build"
+	},
+	{
+		name:"infestedMossyStoneBricks",
+		nameMcd:"infested_mossy_stone_bricks",
+		Name:"Infested Mossy Stone Bricks",
+		hardness: 0.75,
+		blastResistance: 0.75,
+		material: "mineable/pickaxe",
+		category: "build"
+	},
+	{
+		name:"infestedCrackedStoneBricks",
+		nameMcd:"infested_cracked_stone_bricks",
+		Name:"Infested Cracked Stone Bricks",
+		hardness: 0.75,
+		blastResistance: 0.75,
+		material: "mineable/pickaxe",
+		category: "build"
+	},
+	{
+		name:"infestedChiseledStoneBricks",
+		nameMcd:"infested_chiseled_stone_bricks",
+		Name:"Infested Chiseled Stone Bricks",
+		hardness: 0.75,
+		blastResistance: 0.75,
+		material: "mineable/pickaxe",
+		category: "build"
+	},
+	{
+		name:"ironBars",
+		nameMcd:"iron_bars",
+		Name:"Iron Bars",
+		blockStates: "oakFence",
+		transparent: true,
+		hardness: 5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"attachedPumpkinStem",
+		nameMcd:"attached_pumpkin_stem",
+		Name:"Attached Pumpkin Stem",
+		blockStates: "wallTorch",
+		transparent: true,
+		solid: false,
+		material: "plant;mineable/axe",
+		category: "nature"
+	},
+	{
+		name:"attachedMelonStem",
+		nameMcd:"attached_melon_stem",
+		Name:"Attached Melon Stem",
+		blockStates: "wallTorch",
+		transparent: true,
+		solid: false,
+		material: "plant;mineable/axe",
+		category: "nature"
+	},
+	{
+		name:"pumpkinStem",
+		nameMcd:"pumpkin_stem",
+		Name:"Pumpkin Stem",
+		blockStates: "wheat",
+		transparent: true,
+		solid: false,
+		material: "plant;mineable/axe",
+		category: "nature"
+	},
+	{
+		name:"melonStem",
+		nameMcd:"melon_stem",
+		Name:"Melon Stem",
+		blockStates: "wheat",
+		transparent: true,
+		solid: false,
+		material: "plant;mineable/axe",
+		category: "nature"
+	},
+	{
+		name:"brickStairs",
+		nameMcd:"brick_stairs",
+		Name:"Brick Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"stoneBrickStairs",
+		nameMcd:"stone_brick_stairs",
+		Name:"Stone Brick Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"mudBrickStairs",
+		nameMcd:"mud_brick_stairs",
+		Name:"Mud Brick Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 1.5,
+		blastResistance: 3,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"netherBrickFence",
+		nameMcd:"nether_brick_fence",
+		Name:"Nether Brick Fence",
+		blockStates: "oakFence",
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"netherBrickStairs",
+		nameMcd:"nether_brick_stairs",
+		Name:"Nether Brick Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"enchantingTable",
+		nameMcd:"enchanting_table",
+		Name:"Enchanting Table",
+		lightLevel: 7,
+		hardness: 5,
+		blastResistance: 1200,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"brewingStand",
+		nameMcd:"brewing_stand",
+		Name:"Brewing Stand",
+		blockStates: [{"name":"has_bottle_0","values":[false,true]},{"name":"has_bottle_1","values":[false,true]},{"name":"has_bottle_2","values":[false,true]}],
+		lightLevel: 1,
+		transparent: true,
+		hardness: 0.5,
+		blastResistance: 0.5,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"cauldron",
+		Name:"Cauldron",
+		transparent: true,
+		hardness: 2,
+		blastResistance: 2,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"waterCauldron",
+		nameMcd:"water_cauldron",
+		Name:"Water Cauldron",
+		blockStates: [{"name":"level","values":["1","2","3"]}],
+		transparent: true,
+		hardness: 2,
+		blastResistance: 2,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"lavaCauldron",
+		nameMcd:"lava_cauldron",
+		Name:"Lava Cauldron",
+		lightLevel: 15,
+		transparent: true,
+		hardness: 2,
+		blastResistance: 2,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"powderSnowCauldron",
+		nameMcd:"powder_snow_cauldron",
+		Name:"Powder Snow Cauldron",
+		blockStates: "waterCauldron",
+		transparent: true,
+		hardness: 2,
+		blastResistance: 2,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"dragonEgg",
+		nameMcd:"dragon_egg",
+		Name:"Dragon Egg",
+		lightLevel: 1,
+		transparent: true,
+		hardness: 3,
+		blastResistance: 9
+	},
+	{
+		name:"sandstoneStairs",
+		nameMcd:"sandstone_stairs",
+		Name:"Sandstone Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 0.8,
+		blastResistance: 0.8,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"enderChest",
+		nameMcd:"ender_chest",
+		Name:"Ender Chest",
+		blockStates: "ladder",
+		lightLevel: 7,
+		hardness: 22.5,
+		blastResistance: 600,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"tripwireHook",
+		nameMcd:"tripwire_hook",
+		Name:"Tripwire Hook",
+		blockStates: [{"name":"attached","values":[false,true]},{"name":"facing","values":["north","south","west","east"]},{"name":"powered","values":[false,true]}],
+		transparent: true,
+		solid: false
+	},
+	{
+		name:"tripwire",
+		Name:"Tripwire",
+		blockStates: [{"name":"attached","values":[false,true]},{"name":"disarmed","values":[false,true]},{"name":"east","values":[false,true]},{"name":"north","values":[false,true]},{"name":"powered","values":[false,true]},{"name":"south","values":[false,true]},{"name":"west","values":[false,true]}],
+		transparent: true,
+		solid: false
+	},
+	{
+		name:"spruceStairs",
+		nameMcd:"spruce_stairs",
+		Name:"Spruce Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 2,
+		blastResistance: 3,
+		material: "mineable/axe"
+	},
+	{
+		name:"birchStairs",
+		nameMcd:"birch_stairs",
+		Name:"Birch Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 2,
+		blastResistance: 3,
+		material: "mineable/axe"
+	},
+	{
+		name:"jungleStairs",
+		nameMcd:"jungle_stairs",
+		Name:"Jungle Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 2,
+		blastResistance: 3,
+		material: "mineable/axe"
+	},
+	{
+		name:"cobblestoneWall",
+		nameMcd:"cobblestone_wall",
+		Name:"Cobblestone Wall",
+		blockStates: [{"name":"east","values":["none","low","tall"]},{"name":"north","values":["none","low","tall"]},{"name":"south","values":["none","low","tall"]},{"name":"up","values":[false,true]},{"name":"waterlogged","values":[false,true]},{"name":"west","values":["none","low","tall"]}],
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"mossyCobblestoneWall",
+		nameMcd:"mossy_cobblestone_wall",
+		Name:"Mossy Cobblestone Wall",
+		blockStates: "cobblestoneWall",
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"pottedTorchflower",
+		nameMcd:"potted_torchflower",
+		Name:"Potted Torchflower",
+		transparent: true
+	},
+	{
+		name:"pottedOakSapling",
+		nameMcd:"potted_oak_sapling",
+		Name:"Potted Oak Sapling",
+		transparent: true
+	},
+	{
+		name:"pottedSpruceSapling",
+		nameMcd:"potted_spruce_sapling",
+		Name:"Potted Spruce Sapling",
+		transparent: true
+	},
+	{
+		name:"pottedBirchSapling",
+		nameMcd:"potted_birch_sapling",
+		Name:"Potted Birch Sapling",
+		transparent: true
+	},
+	{
+		name:"pottedJungleSapling",
+		nameMcd:"potted_jungle_sapling",
+		Name:"Potted Jungle Sapling",
+		transparent: true
+	},
+	{
+		name:"pottedAcaciaSapling",
+		nameMcd:"potted_acacia_sapling",
+		Name:"Potted Acacia Sapling",
+		transparent: true
+	},
+	{
+		name:"pottedCherrySapling",
+		nameMcd:"potted_cherry_sapling",
+		Name:"Potted Cherry Sapling",
+		transparent: true
+	},
+	{
+		name:"pottedDarkOakSapling",
+		nameMcd:"potted_dark_oak_sapling",
+		Name:"Potted Dark Oak Sapling",
+		transparent: true
+	},
+	{
+		name:"pottedPaleOakSapling",
+		nameMcd:"potted_pale_oak_sapling",
+		Name:"Potted Pale Oak Sapling",
+		transparent: true
+	},
+	{
+		name:"pottedMangrovePropagule",
+		nameMcd:"potted_mangrove_propagule",
+		Name:"Potted Mangrove Propagule",
+		transparent: true
+	},
+	{
+		name:"pottedFern",
+		nameMcd:"potted_fern",
+		Name:"Potted Fern",
+		transparent: true
+	},
+	{
+		name:"pottedDandelion",
+		nameMcd:"potted_dandelion",
+		Name:"Potted Dandelion",
+		transparent: true
+	},
+	{
+		name:"pottedPoppy",
+		nameMcd:"potted_poppy",
+		Name:"Potted Poppy",
+		transparent: true
+	},
+	{
+		name:"pottedBlueOrchid",
+		nameMcd:"potted_blue_orchid",
+		Name:"Potted Blue Orchid",
+		transparent: true
+	},
+	{
+		name:"pottedAllium",
+		nameMcd:"potted_allium",
+		Name:"Potted Allium",
+		transparent: true
+	},
+	{
+		name:"pottedAzureBluet",
+		nameMcd:"potted_azure_bluet",
+		Name:"Potted Azure Bluet",
+		transparent: true
+	},
+	{
+		name:"pottedRedTulip",
+		nameMcd:"potted_red_tulip",
+		Name:"Potted Red Tulip",
+		transparent: true
+	},
+	{
+		name:"pottedOrangeTulip",
+		nameMcd:"potted_orange_tulip",
+		Name:"Potted Orange Tulip",
+		transparent: true
+	},
+	{
+		name:"pottedWhiteTulip",
+		nameMcd:"potted_white_tulip",
+		Name:"Potted White Tulip",
+		transparent: true
+	},
+	{
+		name:"pottedPinkTulip",
+		nameMcd:"potted_pink_tulip",
+		Name:"Potted Pink Tulip",
+		transparent: true
+	},
+	{
+		name:"pottedOxeyeDaisy",
+		nameMcd:"potted_oxeye_daisy",
+		Name:"Potted Oxeye Daisy",
+		transparent: true
+	},
+	{
+		name:"pottedCornflower",
+		nameMcd:"potted_cornflower",
+		Name:"Potted Cornflower",
+		transparent: true
+	},
+	{
+		name:"pottedLilyOfTheValley",
+		nameMcd:"potted_lily_of_the_valley",
+		Name:"Potted Lily of the Valley",
+		transparent: true
+	},
+	{
+		name:"pottedWitherRose",
+		nameMcd:"potted_wither_rose",
+		Name:"Potted Wither Rose",
+		transparent: true
+	},
+	{
+		name:"pottedRedMushroom",
+		nameMcd:"potted_red_mushroom",
+		Name:"Potted Red Mushroom",
+		transparent: true
+	},
+	{
+		name:"pottedBrownMushroom",
+		nameMcd:"potted_brown_mushroom",
+		Name:"Potted Brown Mushroom",
+		transparent: true
+	},
+	{
+		name:"pottedDeadBush",
+		nameMcd:"potted_dead_bush",
+		Name:"Potted Dead Bush",
+		transparent: true
+	},
+	{
+		name:"pottedCactus",
+		nameMcd:"potted_cactus",
+		Name:"Potted Cactus",
+		transparent: true
+	},
+	{
+		name:"paleOakButton",
+		nameMcd:"pale_oak_button",
+		Name:"Pale Oak Button",
+		copyPropertiesHere:"oakButton",
+		blockStates: "lever",
+		transparent: true,
+		solid: false,
+		hardness: 0.5,
+		blastResistance: 0.5,
+		material: "mineable/axe"
+	},
+	{
+		name:"skeletonSkull",
+		nameMcd:"skeleton_skull",
+		Name:"Skeleton Skull",
+		blockStates: [{"name":"powered","values":[false,true]},{"name":"rotation","values":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15"]}],
+		hardness: 1,
+		blastResistance: 1
+	},
+	{
+		name:"skeletonWallSkull",
+		nameMcd:"skeleton_wall_skull",
+		Name:"Skeleton Skull",
+		blockStates: [{"name":"facing","values":["north","south","west","east"]},{"name":"powered","values":[false,true]}],
+		hardness: 1,
+		blastResistance: 1
+	},
+	{
+		name:"witherSkeletonSkull",
+		nameMcd:"wither_skeleton_skull",
+		Name:"Wither Skeleton Skull",
+		blockStates: "skeletonSkull",
+		hardness: 1,
+		blastResistance: 1
+	},
+	{
+		name:"witherSkeletonWallSkull",
+		nameMcd:"wither_skeleton_wall_skull",
+		Name:"Wither Skeleton Skull",
+		blockStates: "skeletonWallSkull",
+		hardness: 1,
+		blastResistance: 1
+	},
+	{
+		name:"zombieHead",
+		nameMcd:"zombie_head",
+		Name:"Zombie Head",
+		blockStates: "skeletonSkull",
+		hardness: 1,
+		blastResistance: 1
+	},
+	{
+		name:"zombieWallHead",
+		nameMcd:"zombie_wall_head",
+		Name:"Zombie Head",
+		blockStates: "skeletonWallSkull",
+		hardness: 1,
+		blastResistance: 1
+	},
+	{
+		name:"playerHead",
+		nameMcd:"player_head",
+		Name:"Player Head",
+		blockStates: "skeletonSkull",
+		hardness: 1,
+		blastResistance: 1
+	},
+	{
+		name:"playerWallHead",
+		nameMcd:"player_wall_head",
+		Name:"Player Head",
+		blockStates: "skeletonWallSkull",
+		hardness: 1,
+		blastResistance: 1
+	},
+	{
+		name:"creeperHead",
+		nameMcd:"creeper_head",
+		Name:"Creeper Head",
+		blockStates: "skeletonSkull",
+		hardness: 1,
+		blastResistance: 1
+	},
+	{
+		name:"creeperWallHead",
+		nameMcd:"creeper_wall_head",
+		Name:"Creeper Head",
+		blockStates: "skeletonWallSkull",
+		hardness: 1,
+		blastResistance: 1
+	},
+	{
+		name:"dragonHead",
+		nameMcd:"dragon_head",
+		Name:"Dragon Head",
+		blockStates: "skeletonSkull",
+		hardness: 1,
+		blastResistance: 1
+	},
+	{
+		name:"dragonWallHead",
+		nameMcd:"dragon_wall_head",
+		Name:"Dragon Head",
+		blockStates: "skeletonWallSkull",
+		hardness: 1,
+		blastResistance: 1
+	},
+	{
+		name:"piglinHead",
+		nameMcd:"piglin_head",
+		Name:"Piglin Head",
+		blockStates: "skeletonSkull",
+		hardness: 1,
+		blastResistance: 1
+	},
+	{
+		name:"piglinWallHead",
+		nameMcd:"piglin_wall_head",
+		Name:"Piglin Head",
+		blockStates: "skeletonWallSkull",
+		hardness: 1,
+		blastResistance: 1
+	},
+	{
+		name:"chippedAnvil",
+		nameMcd:"chipped_anvil",
+		Name:"Chipped Anvil",
+		blockStates: "wallTorch",
+		hardness: 5,
+		blastResistance: 1200,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"damagedAnvil",
+		nameMcd:"damaged_anvil",
+		Name:"Damaged Anvil",
+		blockStates: "wallTorch",
+		hardness: 5,
+		blastResistance: 1200,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"trappedChest",
+		nameMcd:"trapped_chest",
+		Name:"Trapped Chest",
+		blockStates: "chest",
+		hardness: 2.5,
+		blastResistance: 2.5,
+		material: "mineable/axe"
+	},
+	{
+		name:"quartzStairs",
+		nameMcd:"quartz_stairs",
+		Name:"Quartz Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 0.8,
+		blastResistance: 0.8,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"activatorRail",
+		nameMcd:"activator_rail",
+		Name:"Activator Rail",
+		copyPropertiesHere:"rail",
+		blockStates: "poweredRail",
+		transparent: true,
+		solid: false,
+		hardness: 0.7,
+		blastResistance: 0.7,
+		material: "mineable/pickaxe",
+		category: "build"
+	},
+	{
+		name:"acaciaStairs",
+		nameMcd:"acacia_stairs",
+		Name:"Acacia Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 2,
+		blastResistance: 3,
+		material: "mineable/axe"
+	},
+	{
+		name:"cherryStairs",
+		nameMcd:"cherry_stairs",
+		Name:"Cherry Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 2,
+		blastResistance: 3,
+		material: "mineable/axe"
+	},
+	{
+		name:"darkOakStairs",
+		nameMcd:"dark_oak_stairs",
+		Name:"Dark Oak Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 2,
+		blastResistance: 3,
+		material: "mineable/axe"
+	},
+	{
+		name:"paleOakStairs",
+		nameMcd:"pale_oak_stairs",
+		Name:"Pale Oak Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 2,
+		blastResistance: 3,
+		material: "mineable/axe"
+	},
+	{
+		name:"mangroveStairs",
+		nameMcd:"mangrove_stairs",
+		Name:"Mangrove Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 2,
+		blastResistance: 3,
+		material: "mineable/axe"
+	},
+	{
+		name:"bambooStairs",
+		nameMcd:"bamboo_stairs",
+		Name:"Bamboo Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 2,
+		blastResistance: 3,
+		material: "mineable/axe"
+	},
+	{
+		name:"bambooMosaicStairs",
+		nameMcd:"bamboo_mosaic_stairs",
+		Name:"Bamboo Mosaic Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 2,
+		blastResistance: 3,
+		material: "mineable/axe"
+	},
+	{
+		name:"prismarineStairs",
+		nameMcd:"prismarine_stairs",
+		Name:"Prismarine Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"prismarineBrickStairs",
+		nameMcd:"prismarine_brick_stairs",
+		Name:"Prismarine Brick Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"darkPrismarineStairs",
+		nameMcd:"dark_prismarine_stairs",
+		Name:"Dark Prismarine Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"prismarineSlab",
+		nameMcd:"prismarine_slab",
+		Name:"Prismarine Slab",
+		blockStates: [{"name":"type","values":["top","bottom","double"]},{"name":"waterlogged","values":[false,true]}],
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"prismarineBrickSlab",
+		nameMcd:"prismarine_brick_slab",
+		Name:"Prismarine Brick Slab",
+		blockStates: "prismarineSlab",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"darkPrismarineSlab",
+		nameMcd:"dark_prismarine_slab",
+		Name:"Dark Prismarine Slab",
+		blockStates: "prismarineSlab",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"whiteBanner",
+		nameMcd:"white_banner",
+		Name:"White Banner",
+		blockStates: [{"name":"rotation","values":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15"]}],
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"orangeBanner",
+		nameMcd:"orange_banner",
+		Name:"Orange Banner",
+		blockStates: "whiteBanner",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"magentaBanner",
+		nameMcd:"magenta_banner",
+		Name:"Magenta Banner",
+		blockStates: "whiteBanner",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"lightBlueBanner",
+		nameMcd:"light_blue_banner",
+		Name:"Light Blue Banner",
+		blockStates: "whiteBanner",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"yellowBanner",
+		nameMcd:"yellow_banner",
+		Name:"Yellow Banner",
+		blockStates: "whiteBanner",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"limeBanner",
+		nameMcd:"lime_banner",
+		Name:"Lime Banner",
+		blockStates: "whiteBanner",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"pinkBanner",
+		nameMcd:"pink_banner",
+		Name:"Pink Banner",
+		blockStates: "whiteBanner",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"grayBanner",
+		nameMcd:"gray_banner",
+		Name:"Gray Banner",
+		blockStates: "whiteBanner",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"lightGrayBanner",
+		nameMcd:"light_gray_banner",
+		Name:"Light Gray Banner",
+		blockStates: "whiteBanner",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"cyanBanner",
+		nameMcd:"cyan_banner",
+		Name:"Cyan Banner",
+		blockStates: "whiteBanner",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"purpleBanner",
+		nameMcd:"purple_banner",
+		Name:"Purple Banner",
+		blockStates: "whiteBanner",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"blueBanner",
+		nameMcd:"blue_banner",
+		Name:"Blue Banner",
+		blockStates: "whiteBanner",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"brownBanner",
+		nameMcd:"brown_banner",
+		Name:"Brown Banner",
+		blockStates: "whiteBanner",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"greenBanner",
+		nameMcd:"green_banner",
+		Name:"Green Banner",
+		blockStates: "whiteBanner",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"redBanner",
+		nameMcd:"red_banner",
+		Name:"Red Banner",
+		blockStates: "whiteBanner",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"blackBanner",
+		nameMcd:"black_banner",
+		Name:"Black Banner",
+		blockStates: "whiteBanner",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"whiteWallBanner",
+		nameMcd:"white_wall_banner",
+		Name:"White Banner",
+		blockStates: "wallTorch",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"orangeWallBanner",
+		nameMcd:"orange_wall_banner",
+		Name:"Orange Banner",
+		blockStates: "wallTorch",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"magentaWallBanner",
+		nameMcd:"magenta_wall_banner",
+		Name:"Magenta Banner",
+		blockStates: "wallTorch",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"lightBlueWallBanner",
+		nameMcd:"light_blue_wall_banner",
+		Name:"Light Blue Banner",
+		blockStates: "wallTorch",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"yellowWallBanner",
+		nameMcd:"yellow_wall_banner",
+		Name:"Yellow Banner",
+		blockStates: "wallTorch",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"limeWallBanner",
+		nameMcd:"lime_wall_banner",
+		Name:"Lime Banner",
+		blockStates: "wallTorch",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"pinkWallBanner",
+		nameMcd:"pink_wall_banner",
+		Name:"Pink Banner",
+		blockStates: "wallTorch",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"grayWallBanner",
+		nameMcd:"gray_wall_banner",
+		Name:"Gray Banner",
+		blockStates: "wallTorch",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"lightGrayWallBanner",
+		nameMcd:"light_gray_wall_banner",
+		Name:"Light Gray Banner",
+		blockStates: "wallTorch",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"cyanWallBanner",
+		nameMcd:"cyan_wall_banner",
+		Name:"Cyan Banner",
+		blockStates: "wallTorch",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"purpleWallBanner",
+		nameMcd:"purple_wall_banner",
+		Name:"Purple Banner",
+		blockStates: "wallTorch",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"blueWallBanner",
+		nameMcd:"blue_wall_banner",
+		Name:"Blue Banner",
+		blockStates: "wallTorch",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"brownWallBanner",
+		nameMcd:"brown_wall_banner",
+		Name:"Brown Banner",
+		blockStates: "wallTorch",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"greenWallBanner",
+		nameMcd:"green_wall_banner",
+		Name:"Green Banner",
+		blockStates: "wallTorch",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"redWallBanner",
+		nameMcd:"red_wall_banner",
+		Name:"Red Banner",
+		blockStates: "wallTorch",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"blackWallBanner",
+		nameMcd:"black_wall_banner",
+		Name:"Black Banner",
+		blockStates: "wallTorch",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16
+	},
+	{
+		name:"redSandstoneStairs",
+		nameMcd:"red_sandstone_stairs",
+		Name:"Red Sandstone Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 0.8,
+		blastResistance: 0.8,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"oakSlab",
+		nameMcd:"oak_slab",
+		Name:"Oak Slab",
+		blockStates: "prismarineSlab",
+		hardness: 2,
+		blastResistance: 3,
+		material: "mineable/axe"
+	},
+	{
+		name:"spruceSlab",
+		nameMcd:"spruce_slab",
+		Name:"Spruce Slab",
+		blockStates: "prismarineSlab",
+		hardness: 2,
+		blastResistance: 3,
+		material: "mineable/axe"
+	},
+	{
+		name:"birchSlab",
+		nameMcd:"birch_slab",
+		Name:"Birch Slab",
+		blockStates: "prismarineSlab",
+		hardness: 2,
+		blastResistance: 3,
+		material: "mineable/axe"
+	},
+	{
+		name:"jungleSlab",
+		nameMcd:"jungle_slab",
+		Name:"Jungle Slab",
+		blockStates: "prismarineSlab",
+		hardness: 2,
+		blastResistance: 3,
+		material: "mineable/axe"
+	},
+	{
+		name:"acaciaSlab",
+		nameMcd:"acacia_slab",
+		Name:"Acacia Slab",
+		blockStates: "prismarineSlab",
+		hardness: 2,
+		blastResistance: 3,
+		material: "mineable/axe"
+	},
+	{
+		name:"cherrySlab",
+		nameMcd:"cherry_slab",
+		Name:"Cherry Slab",
+		blockStates: "prismarineSlab",
+		hardness: 2,
+		blastResistance: 3,
+		material: "mineable/axe"
+	},
+	{
+		name:"darkOakSlab",
+		nameMcd:"dark_oak_slab",
+		Name:"Dark Oak Slab",
+		blockStates: "prismarineSlab",
+		hardness: 2,
+		blastResistance: 3,
+		material: "mineable/axe"
+	},
+	{
+		name:"paleOakSlab",
+		nameMcd:"pale_oak_slab",
+		Name:"Pale Oak Slab",
+		blockStates: "prismarineSlab",
+		hardness: 2,
+		blastResistance: 3,
+		material: "mineable/axe"
+	},
+	{
+		name:"mangroveSlab",
+		nameMcd:"mangrove_slab",
+		Name:"Mangrove Slab",
+		blockStates: "prismarineSlab",
+		hardness: 2,
+		blastResistance: 3,
+		material: "mineable/axe"
+	},
+	{
+		name:"bambooSlab",
+		nameMcd:"bamboo_slab",
+		Name:"Bamboo Slab",
+		blockStates: "prismarineSlab",
+		hardness: 2,
+		blastResistance: 3,
+		material: "mineable/axe"
+	},
+	{
+		name:"bambooMosaicSlab",
+		nameMcd:"bamboo_mosaic_slab",
+		Name:"Bamboo Mosaic Slab",
+		blockStates: "prismarineSlab",
+		hardness: 2,
+		blastResistance: 3,
+		material: "mineable/axe"
+	},
+	{
+		name:"stoneSlab",
+		nameMcd:"stone_slab",
+		Name:"Stone Slab",
+		blockStates: "prismarineSlab",
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"smoothStoneSlab",
+		nameMcd:"smooth_stone_slab",
+		Name:"Smooth Stone Slab",
+		blockStates: "prismarineSlab",
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"sandstoneSlab",
+		nameMcd:"sandstone_slab",
+		Name:"Sandstone Slab",
+		blockStates: "prismarineSlab",
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"cutSandstoneSlab",
+		nameMcd:"cut_sandstone_slab",
+		Name:"Cut Sandstone Slab",
+		blockStates: "prismarineSlab",
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"petrifiedOakSlab",
+		nameMcd:"petrified_oak_slab",
+		Name:"Petrified Oak Slab",
+		blockStates: "prismarineSlab",
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"cobblestoneSlab",
+		nameMcd:"cobblestone_slab",
+		Name:"Cobblestone Slab",
+		blockStates: "prismarineSlab",
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"brickSlab",
+		nameMcd:"brick_slab",
+		Name:"Brick Slab",
+		blockStates: "prismarineSlab",
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"stoneBrickSlab",
+		nameMcd:"stone_brick_slab",
+		Name:"Stone Brick Slab",
+		blockStates: "prismarineSlab",
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"mudBrickSlab",
+		nameMcd:"mud_brick_slab",
+		Name:"Mud Brick Slab",
+		blockStates: "prismarineSlab",
+		hardness: 1.5,
+		blastResistance: 3,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"netherBrickSlab",
+		nameMcd:"nether_brick_slab",
+		Name:"Nether Brick Slab",
+		blockStates: "prismarineSlab",
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"quartzSlab",
+		nameMcd:"quartz_slab",
+		Name:"Quartz Slab",
+		blockStates: "prismarineSlab",
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"redSandstoneSlab",
+		nameMcd:"red_sandstone_slab",
+		Name:"Red Sandstone Slab",
+		blockStates: "prismarineSlab",
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"cutRedSandstoneSlab",
+		nameMcd:"cut_red_sandstone_slab",
+		Name:"Cut Red Sandstone Slab",
+		blockStates: "prismarineSlab",
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"purpurSlab",
+		nameMcd:"purpur_slab",
+		Name:"Purpur Slab",
+		blockStates: "prismarineSlab",
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"paleOakFenceGate",
+		nameMcd:"pale_oak_fence_gate",
+		Name:"Pale Oak Fence Gate",
+		copyPropertiesHere:"oakFenceGate",
+		blockStates: "oakFenceGate",
+		hardness: 2,
+		blastResistance: 3,
+		material: "mineable/axe"
+	},
+	{
+		name:"spruceFence",
+		nameMcd:"spruce_fence",
+		Name:"Spruce Fence",
+		blockStates: "oakFence",
+		hardness: 2,
+		blastResistance: 3,
+		material: "mineable/axe"
+	},
+	{
+		name:"birchFence",
+		nameMcd:"birch_fence",
+		Name:"Birch Fence",
+		blockStates: "oakFence",
+		hardness: 2,
+		blastResistance: 3,
+		material: "mineable/axe"
+	},
+	{
+		name:"jungleFence",
+		nameMcd:"jungle_fence",
+		Name:"Jungle Fence",
+		blockStates: "oakFence",
+		hardness: 2,
+		blastResistance: 3,
+		material: "mineable/axe"
+	},
+	{
+		name:"acaciaFence",
+		nameMcd:"acacia_fence",
+		Name:"Acacia Fence",
+		blockStates: "oakFence",
+		hardness: 2,
+		blastResistance: 3,
+		material: "mineable/axe"
+	},
+	{
+		name:"cherryFence",
+		nameMcd:"cherry_fence",
+		Name:"Cherry Fence",
+		blockStates: "oakFence",
+		hardness: 2,
+		blastResistance: 3,
+		material: "mineable/axe"
+	},
+	{
+		name:"darkOakFence",
+		nameMcd:"dark_oak_fence",
+		Name:"Dark Oak Fence",
+		blockStates: "oakFence",
+		hardness: 2,
+		blastResistance: 3,
+		material: "mineable/axe"
+	},
+	{
+		name:"paleOakFence",
+		nameMcd:"pale_oak_fence",
+		Name:"Pale Oak Fence",
+		blockStates: "oakFence",
+		hardness: 2,
+		blastResistance: 3,
+		material: "mineable/axe"
+	},
+	{
+		name:"mangroveFence",
+		nameMcd:"mangrove_fence",
+		Name:"Mangrove Fence",
+		blockStates: "oakFence",
+		hardness: 2,
+		blastResistance: 3,
+		material: "mineable/axe"
+	},
+	{
+		name:"bambooFence",
+		nameMcd:"bamboo_fence",
+		Name:"Bamboo Fence",
+		blockStates: "oakFence",
+		hardness: 2,
+		blastResistance: 3,
+		material: "mineable/axe"
+	},
+	{
+		name:"paleOakDoor",
+		nameMcd:"pale_oak_door",
+		Name:"Pale Oak Door",
+		copyPropertiesHere:"oakDoor",
+		blockStates: "oakDoor",
+		transparent: true,
+		hardness: 3,
+		blastResistance: 3,
+		material: "mineable/axe"
+	},
+	{
+		name:"chorusPlant",
+		nameMcd:"chorus_plant",
+		Name:"Chorus Plant",
+		blockStates: "brownMushroomBlock",
+		decreaseLight: 1,
+		transparent: true,
+		hardness: 0.4,
+		blastResistance: 0.4,
+		material: "plant;mineable/axe",
+		category: "nature"
+	},
+	{
+		name:"chorusFlower",
+		nameMcd:"chorus_flower",
+		Name:"Chorus Flower",
+		blockStates: [{"name":"age","values":["0","1","2","3","4","5"]}],
+		decreaseLight: 1,
+		transparent: true,
+		hardness: 0.4,
+		blastResistance: 0.4,
+		material: "plant;mineable/axe",
+		category: "nature"
+	},
+	{
+		name:"purpurStairs",
+		nameMcd:"purpur_stairs",
+		Name:"Purpur Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"torchflowerCrop",
+		nameMcd:"torchflower_crop",
+		Name:"Torchflower Crop",
+		blockStates: [{"name":"age","values":["0","1"]}],
+		transparent: true,
+		solid: false,
+		material: "plant",
+		category: "nature"
+	},
+	{
+		name:"endGateway",
+		nameMcd:"end_gateway",
+		Name:"End Gateway",
+		lightLevel: 15,
+		decreaseLight: 1,
+		transparent: true,
+		solid: false,
+		hardness: Infinity,
+		blastResistance: 3600000
+	},
+	{
+		name:"repeatingCommandBlock",
+		nameMcd:"repeating_command_block",
+		Name:"Repeating Command Block",
+		blockStates: "commandBlock",
+		hardness: Infinity,
+		blastResistance: 3600000,
+		harvestToolsNames: "commandBlock"
+	},
+	{
+		name:"chainCommandBlock",
+		nameMcd:"chain_command_block",
+		Name:"Chain Command Block",
+		blockStates: "commandBlock",
+		hardness: Infinity,
+		blastResistance: 3600000,
+		harvestToolsNames: "commandBlock"
+	},
+	{
+		name:"frostedIce",
+		nameMcd:"frosted_ice",
+		Name:"Frosted Ice",
+		blockStates: "netherWart",
+		decreaseLight: 1,
+		transparent: true,
+		hardness: 0.5,
+		blastResistance: 0.5
+	},
+	{
+		name:"magmaBlock",
+		nameMcd:"magma_block",
+		Name:"Magma Block",
+		lightLevel: 3,
+		hardness: 0.5,
+		blastResistance: 0.5,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"structureVoid",
+		nameMcd:"structure_void",
+		Name:"Structure Void",
+		transparent: true,
+		solid: false
+	},
+	{
+		name:"shulkerBox",
+		nameMcd:"shulker_box",
+		Name:"Shulker Box",
+		blockStates: "endRod",
+		decreaseLight: 1,
+		transparent: true,
+		hardness: 2,
+		blastResistance: 2,
+		material: "mineable/pickaxe",
+		category: "build",
+		stackSize: 1
+	},
+	{
+		name:"whiteShulkerBox",
+		nameMcd:"white_shulker_box",
+		Name:"White Shulker Box",
+		blockStates: "endRod",
+		decreaseLight: 1,
+		transparent: true,
+		hardness: 2,
+		blastResistance: 2,
+		material: "mineable/pickaxe",
+		category: "build",
+		stackSize: 1
+	},
+	{
+		name:"orangeShulkerBox",
+		nameMcd:"orange_shulker_box",
+		Name:"Orange Shulker Box",
+		blockStates: "endRod",
+		decreaseLight: 1,
+		transparent: true,
+		hardness: 2,
+		blastResistance: 2,
+		material: "mineable/pickaxe",
+		category: "build",
+		stackSize: 1
+	},
+	{
+		name:"magentaShulkerBox",
+		nameMcd:"magenta_shulker_box",
+		Name:"Magenta Shulker Box",
+		blockStates: "endRod",
+		decreaseLight: 1,
+		transparent: true,
+		hardness: 2,
+		blastResistance: 2,
+		material: "mineable/pickaxe",
+		category: "build",
+		stackSize: 1
+	},
+	{
+		name:"lightBlueShulkerBox",
+		nameMcd:"light_blue_shulker_box",
+		Name:"Light Blue Shulker Box",
+		blockStates: "endRod",
+		decreaseLight: 1,
+		transparent: true,
+		hardness: 2,
+		blastResistance: 2,
+		material: "mineable/pickaxe",
+		category: "build",
+		stackSize: 1
+	},
+	{
+		name:"yellowShulkerBox",
+		nameMcd:"yellow_shulker_box",
+		Name:"Yellow Shulker Box",
+		blockStates: "endRod",
+		decreaseLight: 1,
+		transparent: true,
+		hardness: 2,
+		blastResistance: 2,
+		material: "mineable/pickaxe",
+		category: "build",
+		stackSize: 1
+	},
+	{
+		name:"limeShulkerBox",
+		nameMcd:"lime_shulker_box",
+		Name:"Lime Shulker Box",
+		blockStates: "endRod",
+		decreaseLight: 1,
+		transparent: true,
+		hardness: 2,
+		blastResistance: 2,
+		material: "mineable/pickaxe",
+		category: "build",
+		stackSize: 1
+	},
+	{
+		name:"pinkShulkerBox",
+		nameMcd:"pink_shulker_box",
+		Name:"Pink Shulker Box",
+		blockStates: "endRod",
+		decreaseLight: 1,
+		transparent: true,
+		hardness: 2,
+		blastResistance: 2,
+		material: "mineable/pickaxe",
+		category: "build",
+		stackSize: 1
+	},
+	{
+		name:"grayShulkerBox",
+		nameMcd:"gray_shulker_box",
+		Name:"Gray Shulker Box",
+		blockStates: "endRod",
+		decreaseLight: 1,
+		transparent: true,
+		hardness: 2,
+		blastResistance: 2,
+		material: "mineable/pickaxe",
+		category: "build",
+		stackSize: 1
+	},
+	{
+		name:"lightGrayShulkerBox",
+		nameMcd:"light_gray_shulker_box",
+		Name:"Light Gray Shulker Box",
+		blockStates: "endRod",
+		decreaseLight: 1,
+		transparent: true,
+		hardness: 2,
+		blastResistance: 2,
+		material: "mineable/pickaxe",
+		category: "build",
+		stackSize: 1
+	},
+	{
+		name:"cyanShulkerBox",
+		nameMcd:"cyan_shulker_box",
+		Name:"Cyan Shulker Box",
+		blockStates: "endRod",
+		decreaseLight: 1,
+		transparent: true,
+		hardness: 2,
+		blastResistance: 2,
+		material: "mineable/pickaxe",
+		category: "build",
+		stackSize: 1
+	},
+	{
+		name:"purpleShulkerBox",
+		nameMcd:"purple_shulker_box",
+		Name:"Purple Shulker Box",
+		blockStates: "endRod",
+		decreaseLight: 1,
+		transparent: true,
+		hardness: 2,
+		blastResistance: 2,
+		material: "mineable/pickaxe",
+		category: "build",
+		stackSize: 1
+	},
+	{
+		name:"blueShulkerBox",
+		nameMcd:"blue_shulker_box",
+		Name:"Blue Shulker Box",
+		blockStates: "endRod",
+		decreaseLight: 1,
+		transparent: true,
+		hardness: 2,
+		blastResistance: 2,
+		material: "mineable/pickaxe",
+		category: "build",
+		stackSize: 1
+	},
+	{
+		name:"brownShulkerBox",
+		nameMcd:"brown_shulker_box",
+		Name:"Brown Shulker Box",
+		blockStates: "endRod",
+		decreaseLight: 1,
+		transparent: true,
+		hardness: 2,
+		blastResistance: 2,
+		material: "mineable/pickaxe",
+		category: "build",
+		stackSize: 1
+	},
+	{
+		name:"greenShulkerBox",
+		nameMcd:"green_shulker_box",
+		Name:"Green Shulker Box",
+		blockStates: "endRod",
+		decreaseLight: 1,
+		transparent: true,
+		hardness: 2,
+		blastResistance: 2,
+		material: "mineable/pickaxe",
+		category: "build",
+		stackSize: 1
+	},
+	{
+		name:"redShulkerBox",
+		nameMcd:"red_shulker_box",
+		Name:"Red Shulker Box",
+		blockStates: "endRod",
+		decreaseLight: 1,
+		transparent: true,
+		hardness: 2,
+		blastResistance: 2,
+		material: "mineable/pickaxe",
+		category: "build",
+		stackSize: 1
+	},
+	{
+		name:"blackShulkerBox",
+		nameMcd:"black_shulker_box",
+		Name:"Black Shulker Box",
+		blockStates: "endRod",
+		decreaseLight: 1,
+		transparent: true,
+		hardness: 2,
+		blastResistance: 2,
+		material: "mineable/pickaxe",
+		category: "build",
+		stackSize: 1
+	},
+	{
+		name:"whiteConcretePowder",
+		nameMcd:"white_concrete_powder",
+		Name:"White Concrete Powder",
+		hardness: 0.5,
+		blastResistance: 0.5,
+		material: "mineable/shovel",
+		category: "nature"
+	},
+	{
+		name:"orangeConcretePowder",
+		nameMcd:"orange_concrete_powder",
+		Name:"Orange Concrete Powder",
+		hardness: 0.5,
+		blastResistance: 0.5,
+		material: "mineable/shovel",
+		category: "nature"
+	},
+	{
+		name:"magentaConcretePowder",
+		nameMcd:"magenta_concrete_powder",
+		Name:"Magenta Concrete Powder",
+		hardness: 0.5,
+		blastResistance: 0.5,
+		material: "mineable/shovel",
+		category: "nature"
+	},
+	{
+		name:"lightBlueConcretePowder",
+		nameMcd:"light_blue_concrete_powder",
+		Name:"Light Blue Concrete Powder",
+		hardness: 0.5,
+		blastResistance: 0.5,
+		material: "mineable/shovel",
+		category: "nature"
+	},
+	{
+		name:"yellowConcretePowder",
+		nameMcd:"yellow_concrete_powder",
+		Name:"Yellow Concrete Powder",
+		hardness: 0.5,
+		blastResistance: 0.5,
+		material: "mineable/shovel",
+		category: "nature"
+	},
+	{
+		name:"limeConcretePowder",
+		nameMcd:"lime_concrete_powder",
+		Name:"Lime Concrete Powder",
+		hardness: 0.5,
+		blastResistance: 0.5,
+		material: "mineable/shovel",
+		category: "nature"
+	},
+	{
+		name:"pinkConcretePowder",
+		nameMcd:"pink_concrete_powder",
+		Name:"Pink Concrete Powder",
+		hardness: 0.5,
+		blastResistance: 0.5,
+		material: "mineable/shovel",
+		category: "nature"
+	},
+	{
+		name:"grayConcretePowder",
+		nameMcd:"gray_concrete_powder",
+		Name:"Gray Concrete Powder",
+		hardness: 0.5,
+		blastResistance: 0.5,
+		material: "mineable/shovel",
+		category: "nature"
+	},
+	{
+		name:"lightGrayConcretePowder",
+		nameMcd:"light_gray_concrete_powder",
+		Name:"Light Gray Concrete Powder",
+		hardness: 0.5,
+		blastResistance: 0.5,
+		material: "mineable/shovel",
+		category: "nature"
+	},
+	{
+		name:"cyanConcretePowder",
+		nameMcd:"cyan_concrete_powder",
+		Name:"Cyan Concrete Powder",
+		hardness: 0.5,
+		blastResistance: 0.5,
+		material: "mineable/shovel",
+		category: "nature"
+	},
+	{
+		name:"purpleConcretePowder",
+		nameMcd:"purple_concrete_powder",
+		Name:"Purple Concrete Powder",
+		hardness: 0.5,
+		blastResistance: 0.5,
+		material: "mineable/shovel",
+		category: "nature"
+	},
+	{
+		name:"blueConcretePowder",
+		nameMcd:"blue_concrete_powder",
+		Name:"Blue Concrete Powder",
+		hardness: 0.5,
+		blastResistance: 0.5,
+		material: "mineable/shovel",
+		category: "nature"
+	},
+	{
+		name:"brownConcretePowder",
+		nameMcd:"brown_concrete_powder",
+		Name:"Brown Concrete Powder",
+		hardness: 0.5,
+		blastResistance: 0.5,
+		material: "mineable/shovel",
+		category: "nature"
+	},
+	{
+		name:"greenConcretePowder",
+		nameMcd:"green_concrete_powder",
+		Name:"Green Concrete Powder",
+		hardness: 0.5,
+		blastResistance: 0.5,
+		material: "mineable/shovel",
+		category: "nature"
+	},
+	{
+		name:"redConcretePowder",
+		nameMcd:"red_concrete_powder",
+		Name:"Red Concrete Powder",
+		hardness: 0.5,
+		blastResistance: 0.5,
+		material: "mineable/shovel",
+		category: "nature"
+	},
+	{
+		name:"blackConcretePowder",
+		nameMcd:"black_concrete_powder",
+		Name:"Black Concrete Powder",
+		hardness: 0.5,
+		blastResistance: 0.5,
+		material: "mineable/shovel",
+		category: "nature"
+	},
+	{
+		name:"driedKelpBlock",
+		nameMcd:"dried_kelp_block",
+		Name:"Dried Kelp Block",
+		hardness: 0.5,
+		blastResistance: 2.5,
+		material: "mineable/hoe"
+	},
+	{
+		name:"turtleEgg",
+		nameMcd:"turtle_egg",
+		Name:"Turtle Egg",
+		blockStates: [{"name":"eggs","values":["1","2","3","4"]},{"name":"hatch","values":["0","1","2"]}],
+		transparent: true,
+		hardness: 0.5,
+		blastResistance: 0.5
+	},
+	{
+		name:"snifferEgg",
+		nameMcd:"sniffer_egg",
+		Name:"Sniffer Egg",
+		blockStates: [{"name":"hatch","values":["0","1","2"]}],
+		transparent: true,
+		hardness: 0.5,
+		blastResistance: 0.5
+	},
+	{
+		name:"deadTubeCoralBlock",
+		nameMcd:"dead_tube_coral_block",
+		Name:"Dead Tube Coral Block",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone",
+		copyPropertiesHere:"deadBubbleCoralBlock"
+	},
+	{
+		name:"deadBrainCoralBlock",
+		nameMcd:"dead_brain_coral_block",
+		Name:"Dead Brain Coral Block",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone",
+		copyPropertiesHere:"deadBubbleCoralBlock"
+	},
+	{
+		name:"deadBubbleCoralBlock",
+		nameMcd:"dead_bubble_coral_block",
+		Name:"Dead Bubble Coral Block",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone",
+		growSlow:function(x,y,z,world,block){
+			let wet = (
+				blockData[world.getBlock(x,y+1,z)].wet ||
+				blockData[world.getBlock(x,y-1,z)].wet ||
+				blockData[world.getBlock(x+1,y,z)].wet ||
+				blockData[world.getBlock(x-1,y,z)].wet ||
+				blockData[world.getBlock(x,y,z+1)].wet ||
+				blockData[world.getBlock(x,y,z-1)].wet
+			)
+			if(wet){
+				let name = this.name
+				name = name[4].toLowerCase() + name.substring(5)
+				world.setBlock(x, y, z, blockIds[name])
+			}
+		}
+	},
+	{
+		name:"deadFireCoralBlock",
+		nameMcd:"dead_fire_coral_block",
+		Name:"Dead Fire Coral Block",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone",
+		copyPropertiesHere:"deadBubbleCoralBlock"
+	},
+	{
+		name:"deadHornCoralBlock",
+		nameMcd:"dead_horn_coral_block",
+		Name:"Dead Horn Coral Block",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone",
+		copyPropertiesHere:"deadBubbleCoralBlock"
+	},
+	{
+		name:"deadTubeCoral",
+		nameMcd:"dead_tube_coral",
+		Name:"Dead Tube Coral",
+		blockStates: "mangroveRoots",
+		decreaseLight: 1,
+		transparent: true,
+		solid: false,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone",
+		copyPropertiesHere:"deadBubbleCoralBlock"
+	},
+	{
+		name:"deadBrainCoral",
+		nameMcd:"dead_brain_coral",
+		Name:"Dead Brain Coral",
+		blockStates: "mangroveRoots",
+		decreaseLight: 1,
+		transparent: true,
+		solid: false,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone",
+		copyPropertiesHere:"deadBubbleCoralBlock"
+	},
+	{
+		name:"deadBubbleCoral",
+		nameMcd:"dead_bubble_coral",
+		Name:"Dead Bubble Coral",
+		blockStates: "mangroveRoots",
+		decreaseLight: 1,
+		transparent: true,
+		solid: false,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone",
+		copyPropertiesHere:"deadBubbleCoralBlock"
+	},
+	{
+		name:"deadFireCoral",
+		nameMcd:"dead_fire_coral",
+		Name:"Dead Fire Coral",
+		blockStates: "mangroveRoots",
+		decreaseLight: 1,
+		transparent: true,
+		solid: false,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone",
+		copyPropertiesHere:"deadBubbleCoralBlock"
+	},
+	{
+		name:"deadHornCoral",
+		nameMcd:"dead_horn_coral",
+		Name:"Dead Horn Coral",
+		blockStates: "mangroveRoots",
+		decreaseLight: 1,
+		transparent: true,
+		solid: false,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone",
+		copyPropertiesHere:"deadBubbleCoralBlock"
+	},
+	{
+		name:"deadTubeCoralFan",
+		nameMcd:"dead_tube_coral_fan",
+		Name:"Dead Tube Coral Fan",
+		blockStates: "mangroveRoots",
+		decreaseLight: 1,
+		transparent: true,
+		solid: false,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone",
+		copyPropertiesHere:"deadBubbleCoralBlock"
+	},
+	{
+		name:"deadBrainCoralFan",
+		nameMcd:"dead_brain_coral_fan",
+		Name:"Dead Brain Coral Fan",
+		blockStates: "mangroveRoots",
+		decreaseLight: 1,
+		transparent: true,
+		solid: false,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone",
+		copyPropertiesHere:"deadBubbleCoralBlock"
+	},
+	{
+		name:"deadBubbleCoralFan",
+		nameMcd:"dead_bubble_coral_fan",
+		Name:"Dead Bubble Coral Fan",
+		blockStates: "mangroveRoots",
+		decreaseLight: 1,
+		transparent: true,
+		solid: false,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone",
+		copyPropertiesHere:"deadBubbleCoralBlock"
+	},
+	{
+		name:"deadFireCoralFan",
+		nameMcd:"dead_fire_coral_fan",
+		Name:"Dead Fire Coral Fan",
+		blockStates: "mangroveRoots",
+		decreaseLight: 1,
+		transparent: true,
+		solid: false,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone",
+		copyPropertiesHere:"deadBubbleCoralBlock"
+	},
+	{
+		name:"deadHornCoralFan",
+		nameMcd:"dead_horn_coral_fan",
+		Name:"Dead Horn Coral Fan",
+		blockStates: "mangroveRoots",
+		decreaseLight: 1,
+		transparent: true,
+		solid: false,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone",
+		copyPropertiesHere:"deadBubbleCoralBlock"
+	},
+	{
+		name:"deadTubeCoralWallFan",
+		nameMcd:"dead_tube_coral_wall_fan",
+		Name:"Dead Tube Coral Wall Fan",
+		blockStates: "ladder",
+		decreaseLight: 1,
+		transparent: true,
+		solid: false,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone",
+		copyPropertiesHere:"deadBubbleCoralBlock"
+	},
+	{
+		name:"deadBrainCoralWallFan",
+		nameMcd:"dead_brain_coral_wall_fan",
+		Name:"Dead Brain Coral Wall Fan",
+		blockStates: "ladder",
+		decreaseLight: 1,
+		transparent: true,
+		solid: false,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone",
+		copyPropertiesHere:"deadBubbleCoralBlock"
+	},
+	{
+		name:"deadBubbleCoralWallFan",
+		nameMcd:"dead_bubble_coral_wall_fan",
+		Name:"Dead Bubble Coral Wall Fan",
+		blockStates: "ladder",
+		decreaseLight: 1,
+		transparent: true,
+		solid: false,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone",
+		copyPropertiesHere:"deadBubbleCoralBlock"
+	},
+	{
+		name:"deadFireCoralWallFan",
+		nameMcd:"dead_fire_coral_wall_fan",
+		Name:"Dead Fire Coral Wall Fan",
+		blockStates: "ladder",
+		decreaseLight: 1,
+		transparent: true,
+		solid: false,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone",
+		copyPropertiesHere:"deadBubbleCoralBlock"
+	},
+	{
+		name:"deadHornCoralWallFan",
+		nameMcd:"dead_horn_coral_wall_fan",
+		Name:"Dead Horn Coral Wall Fan",
+		blockStates: "ladder",
+		decreaseLight: 1,
+		transparent: true,
+		solid: false,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone",
+		copyPropertiesHere:"deadBubbleCoralBlock"
+	},
+	{
+		name:"tubeCoralWallFan",
+		nameMcd:"tube_coral_wall_fan",
+		Name:"Tube Coral Wall Fan",
+		blockStates: "ladder",
+		decreaseLight: 1,
+		transparent: true,
+		solid: false,
+		copyPropertiesHere:"deadBubbleCoralBlock"
+	},
+	{
+		name:"brainCoralWallFan",
+		nameMcd:"brain_coral_wall_fan",
+		Name:"Brain Coral Wall Fan",
+		blockStates: "ladder",
+		decreaseLight: 1,
+		transparent: true,
+		solid: false,
+		copyPropertiesHere:"deadBubbleCoralBlock"
+	},
+	{
+		name:"bubbleCoralWallFan",
+		nameMcd:"bubble_coral_wall_fan",
+		Name:"Bubble Coral Wall Fan",
+		blockStates: "ladder",
+		decreaseLight: 1,
+		transparent: true,
+		solid: false,
+		copyPropertiesHere:"deadBubbleCoralBlock"
+	},
+	{
+		name:"fireCoralWallFan",
+		nameMcd:"fire_coral_wall_fan",
+		Name:"Fire Coral Wall Fan",
+		blockStates: "ladder",
+		decreaseLight: 1,
+		transparent: true,
+		solid: false,
+		copyPropertiesHere:"deadBubbleCoralBlock"
+	},
+	{
+		name:"hornCoralWallFan",
+		nameMcd:"horn_coral_wall_fan",
+		Name:"Horn Coral Wall Fan",
+		blockStates: "ladder",
+		decreaseLight: 1,
+		transparent: true,
+		solid: false,
+		copyPropertiesHere:"deadBubbleCoralBlock"
+	},
+	{
+		name:"seaPickle",
+		nameMcd:"sea_pickle",
+		Name:"Sea Pickle",
+		blockStates: [{"name":"pickles","values":["1","2","3","4"]},{"name":"waterlogged","values":[false,true]}],
+		lightLevel: 6,
+		decreaseLight: 1,
+		transparent: true
+	},
+	{
+		name:"conduit",
+		Name:"Conduit",
+		blockStates: "mangroveRoots",
+		lightLevel: 15,
+		decreaseLight: 1,
+		transparent: true,
+		hardness: 3,
+		blastResistance: 3,
+		material: "mineable/pickaxe",
+		category: "build"
+	},
+	{
+		name:"pottedBamboo",
+		nameMcd:"potted_bamboo",
+		Name:"Potted Bamboo",
+		transparent: true
+	},
+	{
+		name:"voidAir",
+		nameMcd:"void_air",
+		Name:"Void Air",
+		transparent: true,
+		solid: false
+	},
+	{
+		name:"caveAir",
+		nameMcd:"cave_air",
+		Name:"Cave Air",
+		transparent: true,
+		solid: false
+	},
+	{
+		name:"bubbleColumn",
+		nameMcd:"bubble_column",
+		Name:"Bubble Column",
+		blockStates: [{"name":"drag","values":[false,true]}],
+		decreaseLight: 1,
+		transparent: true,
+		solid: false
+	},
+	{
+		name:"polishedGraniteStairs",
+		nameMcd:"polished_granite_stairs",
+		Name:"Polished Granite Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"smoothRedSandstoneStairs",
+		nameMcd:"smooth_red_sandstone_stairs",
+		Name:"Smooth Red Sandstone Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"mossyStoneBrickStairs",
+		nameMcd:"mossy_stone_brick_stairs",
+		Name:"Mossy Stone Brick Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"polishedDioriteStairs",
+		nameMcd:"polished_diorite_stairs",
+		Name:"Polished Diorite Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"mossyCobblestoneStairs",
+		nameMcd:"mossy_cobblestone_stairs",
+		Name:"Mossy Cobblestone Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"endStoneBrickStairs",
+		nameMcd:"end_stone_brick_stairs",
+		Name:"End Stone Brick Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 3,
+		blastResistance: 9,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"stoneStairs",
+		nameMcd:"stone_stairs",
+		Name:"Stone Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"smoothSandstoneStairs",
+		nameMcd:"smooth_sandstone_stairs",
+		Name:"Smooth Sandstone Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"smoothQuartzStairs",
+		nameMcd:"smooth_quartz_stairs",
+		Name:"Smooth Quartz Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"graniteStairs",
+		nameMcd:"granite_stairs",
+		Name:"Granite Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"andesiteStairs",
+		nameMcd:"andesite_stairs",
+		Name:"Andesite Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"redNetherBrickStairs",
+		nameMcd:"red_nether_brick_stairs",
+		Name:"Red Nether Brick Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"polishedAndesiteStairs",
+		nameMcd:"polished_andesite_stairs",
+		Name:"Polished Andesite Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"dioriteStairs",
+		nameMcd:"diorite_stairs",
+		Name:"Diorite Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"polishedGraniteSlab",
+		nameMcd:"polished_granite_slab",
+		Name:"Polished Granite Slab",
+		blockStates: "prismarineSlab",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"smoothRedSandstoneSlab",
+		nameMcd:"smooth_red_sandstone_slab",
+		Name:"Smooth Red Sandstone Slab",
+		blockStates: "prismarineSlab",
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"mossyStoneBrickSlab",
+		nameMcd:"mossy_stone_brick_slab",
+		Name:"Mossy Stone Brick Slab",
+		blockStates: "prismarineSlab",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"polishedDioriteSlab",
+		nameMcd:"polished_diorite_slab",
+		Name:"Polished Diorite Slab",
+		blockStates: "prismarineSlab",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"mossyCobblestoneSlab",
+		nameMcd:"mossy_cobblestone_slab",
+		Name:"Mossy Cobblestone Slab",
+		blockStates: "prismarineSlab",
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"endStoneBrickSlab",
+		nameMcd:"end_stone_brick_slab",
+		Name:"End Stone Brick Slab",
+		blockStates: "prismarineSlab",
+		hardness: 3,
+		blastResistance: 9,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"smoothSandstoneSlab",
+		nameMcd:"smooth_sandstone_slab",
+		Name:"Smooth Sandstone Slab",
+		blockStates: "prismarineSlab",
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"smoothQuartzSlab",
+		nameMcd:"smooth_quartz_slab",
+		Name:"Smooth Quartz Slab",
+		blockStates: "prismarineSlab",
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"graniteSlab",
+		nameMcd:"granite_slab",
+		Name:"Granite Slab",
+		blockStates: "prismarineSlab",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"andesiteSlab",
+		nameMcd:"andesite_slab",
+		Name:"Andesite Slab",
+		blockStates: "prismarineSlab",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"redNetherBrickSlab",
+		nameMcd:"red_nether_brick_slab",
+		Name:"Red Nether Brick Slab",
+		blockStates: "prismarineSlab",
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"polishedAndesiteSlab",
+		nameMcd:"polished_andesite_slab",
+		Name:"Polished Andesite Slab",
+		blockStates: "prismarineSlab",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"dioriteSlab",
+		nameMcd:"diorite_slab",
+		Name:"Diorite Slab",
+		blockStates: "prismarineSlab",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"brickWall",
+		nameMcd:"brick_wall",
+		Name:"Brick Wall",
+		blockStates: "cobblestoneWall",
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"prismarineWall",
+		nameMcd:"prismarine_wall",
+		Name:"Prismarine Wall",
+		blockStates: "cobblestoneWall",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"redSandstoneWall",
+		nameMcd:"red_sandstone_wall",
+		Name:"Red Sandstone Wall",
+		blockStates: "cobblestoneWall",
+		hardness: 0.8,
+		blastResistance: 0.8,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"mossyStoneBrickWall",
+		nameMcd:"mossy_stone_brick_wall",
+		Name:"Mossy Stone Brick Wall",
+		blockStates: "cobblestoneWall",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"graniteWall",
+		nameMcd:"granite_wall",
+		Name:"Granite Wall",
+		blockStates: "cobblestoneWall",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"stoneBrickWall",
+		nameMcd:"stone_brick_wall",
+		Name:"Stone Brick Wall",
+		blockStates: "cobblestoneWall",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"mudBrickWall",
+		nameMcd:"mud_brick_wall",
+		Name:"Mud Brick Wall",
+		blockStates: "cobblestoneWall",
+		hardness: 1.5,
+		blastResistance: 3,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"netherBrickWall",
+		nameMcd:"nether_brick_wall",
+		Name:"Nether Brick Wall",
+		blockStates: "cobblestoneWall",
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"andesiteWall",
+		nameMcd:"andesite_wall",
+		Name:"Andesite Wall",
+		blockStates: "cobblestoneWall",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"redNetherBrickWall",
+		nameMcd:"red_nether_brick_wall",
+		Name:"Red Nether Brick Wall",
+		blockStates: "cobblestoneWall",
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"sandstoneWall",
+		nameMcd:"sandstone_wall",
+		Name:"Sandstone Wall",
+		blockStates: "cobblestoneWall",
+		hardness: 0.8,
+		blastResistance: 0.8,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"endStoneBrickWall",
+		nameMcd:"end_stone_brick_wall",
+		Name:"End Stone Brick Wall",
+		blockStates: "cobblestoneWall",
+		hardness: 3,
+		blastResistance: 9,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"dioriteWall",
+		nameMcd:"diorite_wall",
+		Name:"Diorite Wall",
+		blockStates: "cobblestoneWall",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"scaffolding",
+		Name:"Scaffolding",
+		blockStates: [{"name":"bottom","values":[false,true]},{"name":"distance","values":["0","1","2","3","4","5","6","7"]},{"name":"waterlogged","values":[false,true]}],
+		transparent: true,
+		material: "mineable/axe"
+	},
+	{
+		name:"fletchingTable",
+		nameMcd:"fletching_table",
+		Name:"Fletching Table",
+		hardness: 2.5,
+		blastResistance: 2.5,
+		material: "mineable/axe"
+	},
+	{
+		name:"grindstone",
+		Name:"Grindstone",
+		blockStates: [{"name":"face","values":["floor","wall","ceiling"]},{"name":"facing","values":["north","south","west","east"]}],
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"lectern",
+		Name:"Lectern",
+		blockStates: [{"name":"facing","values":["north","south","west","east"]},{"name":"has_book","values":[false,true]},{"name":"powered","values":[false,true]}],
+		hardness: 2.5,
+		blastResistance: 2.5,
+		material: "mineable/axe"
+	},
+	{
+		name:"bell",
+		Name:"Bell",
+		blockStates: [{"name":"attachment","values":["floor","ceiling","single_wall","double_wall"]},{"name":"facing","values":["north","south","west","east"]},{"name":"powered","values":[false,true]}],
+		hardness: 5,
+		blastResistance: 5,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"crimsonSlab",
+		nameMcd:"crimson_slab",
+		Name:"Crimson Slab",
+		blockStates: "prismarineSlab",
+		hardness: 2,
+		blastResistance: 3,
+		material: "mineable/axe"
+	},
+	{
+		name:"warpedSlab",
+		nameMcd:"warped_slab",
+		Name:"Warped Slab",
+		blockStates: "prismarineSlab",
+		hardness: 2,
+		blastResistance: 3,
+		material: "mineable/axe"
+	},
+	{
+		name:"crimsonFence",
+		nameMcd:"crimson_fence",
+		Name:"Crimson Fence",
+		blockStates: "oakFence",
+		hardness: 2,
+		blastResistance: 3,
+		material: "mineable/axe"
+	},
+	{
+		name:"warpedFence",
+		nameMcd:"warped_fence",
+		Name:"Warped Fence",
+		blockStates: "oakFence",
+		hardness: 2,
+		blastResistance: 3,
+		material: "mineable/axe"
+	},
+	{
+		name:"crimsonStairs",
+		nameMcd:"crimson_stairs",
+		Name:"Crimson Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 2,
+		blastResistance: 3,
+		material: "mineable/axe"
+	},
+	{
+		name:"warpedStairs",
+		nameMcd:"warped_stairs",
+		Name:"Warped Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 2,
+		blastResistance: 3,
+		material: "mineable/axe"
+	},
+	{
+		name:"crimsonWallSign",
+		nameMcd:"crimson_wall_sign",
+		Name:"Crimson Sign",
+		blockStates: "ladder",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16,
+		copyPropertiesHere:"oakSign"
+	},
+	{
+		name:"warpedWallSign",
+		nameMcd:"warped_wall_sign",
+		Name:"Warped Sign",
+		blockStates: "ladder",
+		transparent: true,
+		solid: false,
+		hardness: 1,
+		blastResistance: 1,
+		material: "mineable/axe",
+		stackSize: 16,
+		copyPropertiesHere:"oakSign"
+	},
+	{
+		name:"structureBlock",
+		nameMcd:"structure_block",
+		Name:"Structure Block",
+		blockStates: [{"name":"mode","values":["save","load","corner","data"]}],
+		hardness: Infinity,
+		blastResistance: 3600000,
+		harvestToolsNames: "commandBlock"
+	},
+	{
+		name:"jigsaw",
+		Name:"Jigsaw Block",
+		blockStates: [{"name":"orientation","values":["down_east","down_north","down_south","down_west","up_east","up_north","up_south","up_west","west_up","east_up","north_up","south_up"]}],
+		hardness: Infinity,
+		blastResistance: 3600000,
+		harvestToolsNames: "commandBlock"
+	},
+	{
+		name:"pottedCrimsonFungus",
+		nameMcd:"potted_crimson_fungus",
+		Name:"Potted Crimson Fungus",
+		transparent: true
+	},
+	{
+		name:"pottedWarpedFungus",
+		nameMcd:"potted_warped_fungus",
+		Name:"Potted Warped Fungus",
+		transparent: true
+	},
+	{
+		name:"pottedCrimsonRoots",
+		nameMcd:"potted_crimson_roots",
+		Name:"Potted Crimson Roots",
+		transparent: true
+	},
+	{
+		name:"pottedWarpedRoots",
+		nameMcd:"potted_warped_roots",
+		Name:"Potted Warped Roots",
+		transparent: true
+	},
+	{
+		name:"blackstoneStairs",
+		nameMcd:"blackstone_stairs",
+		Name:"Blackstone Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"blackstoneWall",
+		nameMcd:"blackstone_wall",
+		Name:"Blackstone Wall",
+		blockStates: "cobblestoneWall",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"blackstoneSlab",
+		nameMcd:"blackstone_slab",
+		Name:"Blackstone Slab",
+		blockStates: "prismarineSlab",
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"polishedBlackstoneBrickSlab",
+		nameMcd:"polished_blackstone_brick_slab",
+		Name:"Polished Blackstone Brick Slab",
+		blockStates: "prismarineSlab",
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"polishedBlackstoneBrickStairs",
+		nameMcd:"polished_blackstone_brick_stairs",
+		Name:"Polished Blackstone Brick Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"polishedBlackstoneBrickWall",
+		nameMcd:"polished_blackstone_brick_wall",
+		Name:"Polished Blackstone Brick Wall",
+		blockStates: "cobblestoneWall",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"polishedBlackstoneStairs",
+		nameMcd:"polished_blackstone_stairs",
+		Name:"Polished Blackstone Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"polishedBlackstoneSlab",
+		nameMcd:"polished_blackstone_slab",
+		Name:"Polished Blackstone Slab",
+		blockStates: "prismarineSlab",
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"polishedBlackstoneWall",
+		nameMcd:"polished_blackstone_wall",
+		Name:"Polished Blackstone Wall",
+		blockStates: "cobblestoneWall",
+		hardness: 2,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"candle",
+		Name:"Candle",
+		blockStates: [{"name":"candles","values":["1","2","3","4"]},{"name":"lit","values":[false,true]},{"name":"waterlogged","values":[false,true]}],
+		transparent: true,
+		hardness: 0.1,
+		blastResistance: 0.1
+	},
+	{
+		name:"whiteCandle",
+		nameMcd:"white_candle",
+		Name:"White Candle",
+		blockStates: "candle",
+		transparent: true,
+		hardness: 0.1,
+		blastResistance: 0.1
+	},
+	{
+		name:"orangeCandle",
+		nameMcd:"orange_candle",
+		Name:"Orange Candle",
+		blockStates: "candle",
+		transparent: true,
+		hardness: 0.1,
+		blastResistance: 0.1
+	},
+	{
+		name:"magentaCandle",
+		nameMcd:"magenta_candle",
+		Name:"Magenta Candle",
+		blockStates: "candle",
+		transparent: true,
+		hardness: 0.1,
+		blastResistance: 0.1
+	},
+	{
+		name:"lightBlueCandle",
+		nameMcd:"light_blue_candle",
+		Name:"Light Blue Candle",
+		blockStates: "candle",
+		transparent: true,
+		hardness: 0.1,
+		blastResistance: 0.1
+	},
+	{
+		name:"yellowCandle",
+		nameMcd:"yellow_candle",
+		Name:"Yellow Candle",
+		blockStates: "candle",
+		transparent: true,
+		hardness: 0.1,
+		blastResistance: 0.1
+	},
+	{
+		name:"limeCandle",
+		nameMcd:"lime_candle",
+		Name:"Lime Candle",
+		blockStates: "candle",
+		transparent: true,
+		hardness: 0.1,
+		blastResistance: 0.1
+	},
+	{
+		name:"pinkCandle",
+		nameMcd:"pink_candle",
+		Name:"Pink Candle",
+		blockStates: "candle",
+		transparent: true,
+		hardness: 0.1,
+		blastResistance: 0.1
+	},
+	{
+		name:"grayCandle",
+		nameMcd:"gray_candle",
+		Name:"Gray Candle",
+		blockStates: "candle",
+		transparent: true,
+		hardness: 0.1,
+		blastResistance: 0.1
+	},
+	{
+		name:"lightGrayCandle",
+		nameMcd:"light_gray_candle",
+		Name:"Light Gray Candle",
+		blockStates: "candle",
+		transparent: true,
+		hardness: 0.1,
+		blastResistance: 0.1
+	},
+	{
+		name:"cyanCandle",
+		nameMcd:"cyan_candle",
+		Name:"Cyan Candle",
+		blockStates: "candle",
+		transparent: true,
+		hardness: 0.1,
+		blastResistance: 0.1
+	},
+	{
+		name:"purpleCandle",
+		nameMcd:"purple_candle",
+		Name:"Purple Candle",
+		blockStates: "candle",
+		transparent: true,
+		hardness: 0.1,
+		blastResistance: 0.1
+	},
+	{
+		name:"blueCandle",
+		nameMcd:"blue_candle",
+		Name:"Blue Candle",
+		blockStates: "candle",
+		transparent: true,
+		hardness: 0.1,
+		blastResistance: 0.1
+	},
+	{
+		name:"brownCandle",
+		nameMcd:"brown_candle",
+		Name:"Brown Candle",
+		blockStates: "candle",
+		transparent: true,
+		hardness: 0.1,
+		blastResistance: 0.1
+	},
+	{
+		name:"greenCandle",
+		nameMcd:"green_candle",
+		Name:"Green Candle",
+		blockStates: "candle",
+		transparent: true,
+		hardness: 0.1,
+		blastResistance: 0.1
+	},
+	{
+		name:"redCandle",
+		nameMcd:"red_candle",
+		Name:"Red Candle",
+		blockStates: "candle",
+		transparent: true,
+		hardness: 0.1,
+		blastResistance: 0.1
+	},
+	{
+		name:"blackCandle",
+		nameMcd:"black_candle",
+		Name:"Black Candle",
+		blockStates: "candle",
+		transparent: true,
+		hardness: 0.1,
+		blastResistance: 0.1
+	},
+	{
+		name:"candleCake",
+		nameMcd:"candle_cake",
+		Name:"Cake with Candle",
+		blockStates: "redstoneOre",
+		hardness: 0.5,
+		blastResistance: 0.5
+	},
+	{
+		name:"whiteCandleCake",
+		nameMcd:"white_candle_cake",
+		Name:"Cake with White Candle",
+		blockStates: "redstoneOre",
+		hardness: 0.5,
+		blastResistance: 0.5
+	},
+	{
+		name:"orangeCandleCake",
+		nameMcd:"orange_candle_cake",
+		Name:"Cake with Orange Candle",
+		blockStates: "redstoneOre",
+		hardness: 0.5,
+		blastResistance: 0.5
+	},
+	{
+		name:"magentaCandleCake",
+		nameMcd:"magenta_candle_cake",
+		Name:"Cake with Magenta Candle",
+		blockStates: "redstoneOre",
+		hardness: 0.5,
+		blastResistance: 0.5
+	},
+	{
+		name:"lightBlueCandleCake",
+		nameMcd:"light_blue_candle_cake",
+		Name:"Cake with Light Blue Candle",
+		blockStates: "redstoneOre",
+		hardness: 0.5,
+		blastResistance: 0.5
+	},
+	{
+		name:"yellowCandleCake",
+		nameMcd:"yellow_candle_cake",
+		Name:"Cake with Yellow Candle",
+		blockStates: "redstoneOre",
+		hardness: 0.5,
+		blastResistance: 0.5
+	},
+	{
+		name:"limeCandleCake",
+		nameMcd:"lime_candle_cake",
+		Name:"Cake with Lime Candle",
+		blockStates: "redstoneOre",
+		hardness: 0.5,
+		blastResistance: 0.5
+	},
+	{
+		name:"pinkCandleCake",
+		nameMcd:"pink_candle_cake",
+		Name:"Cake with Pink Candle",
+		blockStates: "redstoneOre",
+		hardness: 0.5,
+		blastResistance: 0.5
+	},
+	{
+		name:"grayCandleCake",
+		nameMcd:"gray_candle_cake",
+		Name:"Cake with Gray Candle",
+		blockStates: "redstoneOre",
+		hardness: 0.5,
+		blastResistance: 0.5
+	},
+	{
+		name:"lightGrayCandleCake",
+		nameMcd:"light_gray_candle_cake",
+		Name:"Cake with Light Gray Candle",
+		blockStates: "redstoneOre",
+		hardness: 0.5,
+		blastResistance: 0.5
+	},
+	{
+		name:"cyanCandleCake",
+		nameMcd:"cyan_candle_cake",
+		Name:"Cake with Cyan Candle",
+		blockStates: "redstoneOre",
+		hardness: 0.5,
+		blastResistance: 0.5
+	},
+	{
+		name:"purpleCandleCake",
+		nameMcd:"purple_candle_cake",
+		Name:"Cake with Purple Candle",
+		blockStates: "redstoneOre",
+		hardness: 0.5,
+		blastResistance: 0.5
+	},
+	{
+		name:"blueCandleCake",
+		nameMcd:"blue_candle_cake",
+		Name:"Cake with Blue Candle",
+		blockStates: "redstoneOre",
+		hardness: 0.5,
+		blastResistance: 0.5
+	},
+	{
+		name:"brownCandleCake",
+		nameMcd:"brown_candle_cake",
+		Name:"Cake with Brown Candle",
+		blockStates: "redstoneOre",
+		hardness: 0.5,
+		blastResistance: 0.5
+	},
+	{
+		name:"greenCandleCake",
+		nameMcd:"green_candle_cake",
+		Name:"Cake with Green Candle",
+		blockStates: "redstoneOre",
+		hardness: 0.5,
+		blastResistance: 0.5
+	},
+	{
+		name:"redCandleCake",
+		nameMcd:"red_candle_cake",
+		Name:"Cake with Red Candle",
+		blockStates: "redstoneOre",
+		hardness: 0.5,
+		blastResistance: 0.5
+	},
+	{
+		name:"blackCandleCake",
+		nameMcd:"black_candle_cake",
+		Name:"Cake with Black Candle",
+		blockStates: "redstoneOre",
+		hardness: 0.5,
+		blastResistance: 0.5
+	},
+	{
+		name:"tuffSlab",
+		nameMcd:"tuff_slab",
+		Name:"Tuff Slab",
+		blockStates: "prismarineSlab",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"tuffStairs",
+		nameMcd:"tuff_stairs",
+		Name:"Tuff Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"tuffWall",
+		nameMcd:"tuff_wall",
+		Name:"Tuff Wall",
+		blockStates: "cobblestoneWall",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"polishedTuff",
+		nameMcd:"polished_tuff",
+		Name:"Polished Tuff",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"polishedTuffSlab",
+		nameMcd:"polished_tuff_slab",
+		Name:"Polished Tuff Slab",
+		blockStates: "prismarineSlab",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"polishedTuffStairs",
+		nameMcd:"polished_tuff_stairs",
+		Name:"Polished Tuff Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"polishedTuffWall",
+		nameMcd:"polished_tuff_wall",
+		Name:"Polished Tuff Wall",
+		blockStates: "cobblestoneWall",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"chiseledTuff",
+		nameMcd:"chiseled_tuff",
+		Name:"Chiseled Tuff",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"tuffBricks",
+		nameMcd:"tuff_bricks",
+		Name:"Tuff Bricks",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"tuffBrickSlab",
+		nameMcd:"tuff_brick_slab",
+		Name:"Tuff Brick Slab",
+		blockStates: "prismarineSlab",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"tuffBrickStairs",
+		nameMcd:"tuff_brick_stairs",
+		Name:"Tuff Brick Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"tuffBrickWall",
+		nameMcd:"tuff_brick_wall",
+		Name:"Tuff Brick Wall",
+		blockStates: "cobblestoneWall",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"chiseledTuffBricks",
+		nameMcd:"chiseled_tuff_bricks",
+		Name:"Chiseled Tuff Bricks",
+		hardness: 1.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"sculkSensor",
+		nameMcd:"sculk_sensor",
+		Name:"Sculk Sensor",
+		blockStates: [{"name":"power","values":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15"]},{"name":"sculk_sensor_phase","values":["inactive","active","cooldown"]},{"name":"waterlogged","values":[false,true]}],
+		lightLevel: 1,
+		hardness: 1.5,
+		blastResistance: 1.5,
+		material: "mineable/hoe"
+	},
+	{
+		name:"calibratedSculkSensor",
+		nameMcd:"calibrated_sculk_sensor",
+		Name:"Calibrated Sculk Sensor",
+		blockStates: [{"name":"facing","values":["north","south","west","east"]},{"name":"power","values":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15"]},{"name":"sculk_sensor_phase","values":["inactive","active","cooldown"]},{"name":"waterlogged","values":[false,true]}],
+		lightLevel: 1,
+		hardness: 1.5,
+		blastResistance: 1.5,
+		material: "mineable/hoe"
+	},
+	{
+		name:"sculk",
+		Name:"Sculk",
+		hardness: 0.2,
+		blastResistance: 0.2,
+		material: "mineable/hoe"
+	},
+	{
+		name:"sculkVein",
+		nameMcd:"sculk_vein",
+		Name:"Sculk Vein",
+		blockStates: "glowLichen",
+		decreaseLight: 1,
+		transparent: true,
+		solid: false,
+		hardness: 0.2,
+		blastResistance: 0.2,
+		material: "mineable/hoe"
+	},
+	{
+		name:"sculkCatalyst",
+		nameMcd:"sculk_catalyst",
+		Name:"Sculk Catalyst",
+		blockStates: [{"name":"bloom","values":[false,true]}],
+		lightLevel: 6,
+		hardness: 3,
+		blastResistance: 3,
+		material: "mineable/hoe"
+	},
+	{
+		name:"sculkShrieker",
+		nameMcd:"sculk_shrieker",
+		Name:"Sculk Shrieker",
+		blockStates: [{"name":"can_summon","values":[false,true]},{"name":"shrieking","values":[false,true]},{"name":"waterlogged","values":[false,true]}],
+		hardness: 3,
+		blastResistance: 3,
+		material: "mineable/hoe"
+	},
+	{
+		name:"oxidizedChiseledCopper",
+		nameMcd:"oxidized_chiseled_copper",
+		Name:"Oxidized Chiseled Copper",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"weatheredChiseledCopper",
+		nameMcd:"weathered_chiseled_copper",
+		Name:"Weathered Chiseled Copper",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"exposedChiseledCopper",
+		nameMcd:"exposed_chiseled_copper",
+		Name:"Exposed Chiseled Copper",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"chiseledCopper",
+		nameMcd:"chiseled_copper",
+		Name:"Chiseled Copper",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"waxedOxidizedChiseledCopper",
+		nameMcd:"waxed_oxidized_chiseled_copper",
+		Name:"Waxed Oxidized Chiseled Copper",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"waxedWeatheredChiseledCopper",
+		nameMcd:"waxed_weathered_chiseled_copper",
+		Name:"Waxed Weathered Chiseled Copper",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"waxedExposedChiseledCopper",
+		nameMcd:"waxed_exposed_chiseled_copper",
+		Name:"Waxed Exposed Chiseled Copper",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"waxedChiseledCopper",
+		nameMcd:"waxed_chiseled_copper",
+		Name:"Waxed Chiseled Copper",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"oxidizedCutCopperStairs",
+		nameMcd:"oxidized_cut_copper_stairs",
+		Name:"Oxidized Cut Copper Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"weatheredCutCopperStairs",
+		nameMcd:"weathered_cut_copper_stairs",
+		Name:"Weathered Cut Copper Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"exposedCutCopperStairs",
+		nameMcd:"exposed_cut_copper_stairs",
+		Name:"Exposed Cut Copper Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"cutCopperStairs",
+		nameMcd:"cut_copper_stairs",
+		Name:"Cut Copper Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"oxidizedCutCopperSlab",
+		nameMcd:"oxidized_cut_copper_slab",
+		Name:"Oxidized Cut Copper Slab",
+		blockStates: "prismarineSlab",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"weatheredCutCopperSlab",
+		nameMcd:"weathered_cut_copper_slab",
+		Name:"Weathered Cut Copper Slab",
+		blockStates: "prismarineSlab",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"exposedCutCopperSlab",
+		nameMcd:"exposed_cut_copper_slab",
+		Name:"Exposed Cut Copper Slab",
+		blockStates: "prismarineSlab",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"cutCopperSlab",
+		nameMcd:"cut_copper_slab",
+		Name:"Cut Copper Slab",
+		blockStates: "prismarineSlab",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"waxedCopperBlock",
+		nameMcd:"waxed_copper_block",
+		Name:"Waxed Block of Copper",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"waxedWeatheredCopper",
+		nameMcd:"waxed_weathered_copper",
+		Name:"Waxed Weathered Copper",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"waxedExposedCopper",
+		nameMcd:"waxed_exposed_copper",
+		Name:"Waxed Exposed Copper",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"waxedOxidizedCopper",
+		nameMcd:"waxed_oxidized_copper",
+		Name:"Waxed Oxidized Copper",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"waxedOxidizedCutCopper",
+		nameMcd:"waxed_oxidized_cut_copper",
+		Name:"Waxed Oxidized Cut Copper",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"waxedWeatheredCutCopper",
+		nameMcd:"waxed_weathered_cut_copper",
+		Name:"Waxed Weathered Cut Copper",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"waxedExposedCutCopper",
+		nameMcd:"waxed_exposed_cut_copper",
+		Name:"Waxed Exposed Cut Copper",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"waxedCutCopper",
+		nameMcd:"waxed_cut_copper",
+		Name:"Waxed Cut Copper",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"waxedOxidizedCutCopperStairs",
+		nameMcd:"waxed_oxidized_cut_copper_stairs",
+		Name:"Waxed Oxidized Cut Copper Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"waxedWeatheredCutCopperStairs",
+		nameMcd:"waxed_weathered_cut_copper_stairs",
+		Name:"Waxed Weathered Cut Copper Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"waxedExposedCutCopperStairs",
+		nameMcd:"waxed_exposed_cut_copper_stairs",
+		Name:"Waxed Exposed Cut Copper Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"waxedCutCopperStairs",
+		nameMcd:"waxed_cut_copper_stairs",
+		Name:"Waxed Cut Copper Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"waxedOxidizedCutCopperSlab",
+		nameMcd:"waxed_oxidized_cut_copper_slab",
+		Name:"Waxed Oxidized Cut Copper Slab",
+		blockStates: "prismarineSlab",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"waxedWeatheredCutCopperSlab",
+		nameMcd:"waxed_weathered_cut_copper_slab",
+		Name:"Waxed Weathered Cut Copper Slab",
+		blockStates: "prismarineSlab",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"waxedExposedCutCopperSlab",
+		nameMcd:"waxed_exposed_cut_copper_slab",
+		Name:"Waxed Exposed Cut Copper Slab",
+		blockStates: "prismarineSlab",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"waxedCutCopperSlab",
+		nameMcd:"waxed_cut_copper_slab",
+		Name:"Waxed Cut Copper Slab",
+		blockStates: "prismarineSlab",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"copperDoor",
+		nameMcd:"copper_door",
+		Name:"Copper Door",
+		copyPropertiesHere:"oakDoor",
+		blockStates: "oakDoor",
+		transparent: true,
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"exposedCopperDoor",
+		nameMcd:"exposed_copper_door",
+		Name:"Exposed Copper Door",
+		copyPropertiesHere:"oakDoor",
+		blockStates: "oakDoor",
+		transparent: true,
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"oxidizedCopperDoor",
+		nameMcd:"oxidized_copper_door",
+		Name:"Oxidized Copper Door",
+		copyPropertiesHere:"oakDoor",
+		blockStates: "oakDoor",
+		transparent: true,
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"weatheredCopperDoor",
+		nameMcd:"weathered_copper_door",
+		Name:"Weathered Copper Door",
+		copyPropertiesHere:"oakDoor",
+		blockStates: "oakDoor",
+		transparent: true,
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"waxedCopperDoor",
+		nameMcd:"waxed_copper_door",
+		Name:"Waxed Copper Door",
+		copyPropertiesHere:"oakDoor",
+		blockStates: "oakDoor",
+		transparent: true,
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"waxedExposedCopperDoor",
+		nameMcd:"waxed_exposed_copper_door",
+		Name:"Waxed Exposed Copper Door",
+		copyPropertiesHere:"oakDoor",
+		blockStates: "oakDoor",
+		transparent: true,
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"waxedOxidizedCopperDoor",
+		nameMcd:"waxed_oxidized_copper_door",
+		Name:"Waxed Oxidized Copper Door",
+		copyPropertiesHere:"oakDoor",
+		blockStates: "oakDoor",
+		transparent: true,
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"waxedWeatheredCopperDoor",
+		nameMcd:"waxed_weathered_copper_door",
+		Name:"Waxed Weathered Copper Door",
+		copyPropertiesHere:"oakDoor",
+		blockStates: "oakDoor",
+		transparent: true,
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"copperTrapdoor",
+		nameMcd:"copper_trapdoor",
+		Name:"Copper Trapdoor",
+		copyPropertiesHere:"oakTrapdoor",
+		blockStates: "oakTrapdoor",
+		transparent: true,
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"exposedCopperTrapdoor",
+		nameMcd:"exposed_copper_trapdoor",
+		Name:"Exposed Copper Trapdoor",
+		copyPropertiesHere:"oakTrapdoor",
+		blockStates: "oakTrapdoor",
+		transparent: true,
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"oxidizedCopperTrapdoor",
+		nameMcd:"oxidized_copper_trapdoor",
+		Name:"Oxidized Copper Trapdoor",
+		copyPropertiesHere:"oakTrapdoor",
+		blockStates: "oakTrapdoor",
+		transparent: true,
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"weatheredCopperTrapdoor",
+		nameMcd:"weathered_copper_trapdoor",
+		Name:"Weathered Copper Trapdoor",
+		copyPropertiesHere:"oakTrapdoor",
+		blockStates: "oakTrapdoor",
+		transparent: true,
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"waxedCopperTrapdoor",
+		nameMcd:"waxed_copper_trapdoor",
+		Name:"Waxed Copper Trapdoor",
+		copyPropertiesHere:"oakTrapdoor",
+		blockStates: "oakTrapdoor",
+		transparent: true,
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"waxedExposedCopperTrapdoor",
+		nameMcd:"waxed_exposed_copper_trapdoor",
+		Name:"Waxed Exposed Copper Trapdoor",
+		copyPropertiesHere:"oakTrapdoor",
+		blockStates: "oakTrapdoor",
+		transparent: true,
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"waxedOxidizedCopperTrapdoor",
+		nameMcd:"waxed_oxidized_copper_trapdoor",
+		Name:"Waxed Oxidized Copper Trapdoor",
+		copyPropertiesHere:"oakTrapdoor",
+		blockStates: "oakTrapdoor",
+		transparent: true,
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"waxedWeatheredCopperTrapdoor",
+		nameMcd:"waxed_weathered_copper_trapdoor",
+		Name:"Waxed Weathered Copper Trapdoor",
+		copyPropertiesHere:"oakTrapdoor",
+		blockStates: "oakTrapdoor",
+		transparent: true,
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"copperGrate",
+		nameMcd:"copper_grate",
+		Name:"Copper Grate",
+		blockStates: "mangroveRoots",
+		transparent: true,
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"exposedCopperGrate",
+		nameMcd:"exposed_copper_grate",
+		Name:"Exposed Copper Grate",
+		blockStates: "mangroveRoots",
+		transparent: true,
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"weatheredCopperGrate",
+		nameMcd:"weathered_copper_grate",
+		Name:"Weathered Copper Grate",
+		blockStates: "mangroveRoots",
+		transparent: true,
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"oxidizedCopperGrate",
+		nameMcd:"oxidized_copper_grate",
+		Name:"Oxidized Copper Grate",
+		blockStates: "mangroveRoots",
+		transparent: true,
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"waxedCopperGrate",
+		nameMcd:"waxed_copper_grate",
+		Name:"Waxed Copper Grate",
+		blockStates: "mangroveRoots",
+		transparent: true,
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"waxedExposedCopperGrate",
+		nameMcd:"waxed_exposed_copper_grate",
+		Name:"Waxed Exposed Copper Grate",
+		blockStates: "mangroveRoots",
+		transparent: true,
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"waxedWeatheredCopperGrate",
+		nameMcd:"waxed_weathered_copper_grate",
+		Name:"Waxed Weathered Copper Grate",
+		blockStates: "mangroveRoots",
+		transparent: true,
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"waxedOxidizedCopperGrate",
+		nameMcd:"waxed_oxidized_copper_grate",
+		Name:"Waxed Oxidized Copper Grate",
+		blockStates: "mangroveRoots",
+		transparent: true,
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"copperBulb",
+		nameMcd:"copper_bulb",
+		Name:"Copper Bulb",
+		blockStates: [{"name":"lit","values":[false,true]},{"name":"powered","values":[false,true]}],
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"exposedCopperBulb",
+		nameMcd:"exposed_copper_bulb",
+		Name:"Exposed Copper Bulb",
+		blockStates: "copperBulb",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"weatheredCopperBulb",
+		nameMcd:"weathered_copper_bulb",
+		Name:"Weathered Copper Bulb",
+		blockStates: "copperBulb",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"oxidizedCopperBulb",
+		nameMcd:"oxidized_copper_bulb",
+		Name:"Oxidized Copper Bulb",
+		blockStates: "copperBulb",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"waxedCopperBulb",
+		nameMcd:"waxed_copper_bulb",
+		Name:"Waxed Copper Bulb",
+		blockStates: "copperBulb",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"waxedExposedCopperBulb",
+		nameMcd:"waxed_exposed_copper_bulb",
+		Name:"Waxed Exposed Copper Bulb",
+		blockStates: "copperBulb",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"waxedWeatheredCopperBulb",
+		nameMcd:"waxed_weathered_copper_bulb",
+		Name:"Waxed Weathered Copper Bulb",
+		blockStates: "copperBulb",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"waxedOxidizedCopperBulb",
+		nameMcd:"waxed_oxidized_copper_bulb",
+		Name:"Waxed Oxidized Copper Bulb",
+		blockStates: "copperBulb",
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"lightningRod",
+		nameMcd:"lightning_rod",
+		Name:"Lightning Rod",
+		blockStates: [{"name":"facing","values":["north","east","south","west","up","down"]},{"name":"powered","values":[false,true]},{"name":"waterlogged","values":[false,true]}],
+		transparent: true,
+		hardness: 3,
+		blastResistance: 6,
+		material: "incorrect_for_wooden_tool",
+		category: "build",
+		harvestToolsNames: "ironOre"
+	},
+	{
+		name:"bigDripleafStem",
+		nameMcd:"big_dripleaf_stem",
+		Name:"Big Dripleaf Stem",
+		blockStates: "ladder",
+		transparent: true,
+		solid: false,
+		hardness: 0.1,
+		blastResistance: 0.1,
+		material: "plant;mineable/axe",
+		category: "nature",
+		liquidBreakable:"drop",
+		onupdate:function(x,y,z,block,world,sx,sy,sz){
+			var top = world.getBlock(x,y+1,z)
+			var isIt = blockData[top].name === "bidDripleaf"
+			if(!isIt){
+				world.setBlock(x,y,z, setBlockState(blockIds.bigDripleaf,blockStateMaps.bigDripleaf.facing,getBlockState(block,this.blockStatesMap.facing)), false,false,false,false)
+			}
+		},
+	},
+	{
+		name:"cobbledDeepslateStairs",
+		nameMcd:"cobbled_deepslate_stairs",
+		Name:"Cobbled Deepslate Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 3.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"cobbledDeepslateSlab",
+		nameMcd:"cobbled_deepslate_slab",
+		Name:"Cobbled Deepslate Slab",
+		blockStates: "prismarineSlab",
+		hardness: 3.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"cobbledDeepslateWall",
+		nameMcd:"cobbled_deepslate_wall",
+		Name:"Cobbled Deepslate Wall",
+		blockStates: "cobblestoneWall",
+		hardness: 3.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"polishedDeepslateStairs",
+		nameMcd:"polished_deepslate_stairs",
+		Name:"Polished Deepslate Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 3.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"polishedDeepslateSlab",
+		nameMcd:"polished_deepslate_slab",
+		Name:"Polished Deepslate Slab",
+		blockStates: "prismarineSlab",
+		hardness: 3.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"polishedDeepslateWall",
+		nameMcd:"polished_deepslate_wall",
+		Name:"Polished Deepslate Wall",
+		blockStates: "cobblestoneWall",
+		hardness: 3.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"deepslateTileStairs",
+		nameMcd:"deepslate_tile_stairs",
+		Name:"Deepslate Tile Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 3.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"deepslateTileSlab",
+		nameMcd:"deepslate_tile_slab",
+		Name:"Deepslate Tile Slab",
+		blockStates: "prismarineSlab",
+		hardness: 3.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"deepslateTileWall",
+		nameMcd:"deepslate_tile_wall",
+		Name:"Deepslate Tile Wall",
+		blockStates: "cobblestoneWall",
+		hardness: 3.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"deepslateBrickStairs",
+		nameMcd:"deepslate_brick_stairs",
+		Name:"Deepslate Brick Stairs",
+		copyPropertiesHere:"oakStairs",
+		blockStates: "oakStairs",
+		hardness: 3.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"deepslateBrickSlab",
+		nameMcd:"deepslate_brick_slab",
+		Name:"Deepslate Brick Slab",
+		blockStates: "prismarineSlab",
+		hardness: 3.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"deepslateBrickWall",
+		nameMcd:"deepslate_brick_wall",
+		Name:"Deepslate Brick Wall",
+		blockStates: "cobblestoneWall",
+		hardness: 3.5,
+		blastResistance: 6,
+		material: "mineable/pickaxe",
+		category: "build",
+		harvestToolsNames: "stone"
+	},
+	{
+		name:"infestedDeepslate",
+		nameMcd:"infested_deepslate",
+		Name:"Infested Deepslate",
+		blockStates: "paleOakWood",
+		hardness: 1.5,
+		blastResistance: 0.75,
+		material: "mineable/pickaxe",
+		category: "build"
+	},
+	{
+		name:"pottedAzaleaBush",
+		nameMcd:"potted_azalea_bush",
+		Name:"Potted Azalea",
+		transparent: true
+	},
+	{
+		name:"pottedFloweringAzaleaBush",
+		nameMcd:"potted_flowering_azalea_bush",
+		Name:"Potted Flowering Azalea",
+		transparent: true
+	},
+	{
+		name:"frogspawn",
+		Name:"Frogspawn",
+		transparent: true,
+		solid: false
+	},
+	{
+		name:"decoratedPot",
+		nameMcd:"decorated_pot",
+		Name:"Decorated Pot",
+		blockStates: [{"name":"cracked","values":[false,true]},{"name":"facing","values":["north","south","west","east"]},{"name":"waterlogged","values":[false,true]}],
+		transparent: true
+	},
+	{
+		name:"crafter",
+		Name:"Crafter",
+		blockStates: [{"name":"crafting","values":[false,true]},{"name":"orientation","values":["down_east","down_north","down_south","down_west","up_east","up_north","up_south","up_west","west_up","east_up","north_up","south_up"]},{"name":"triggered","values":[false,true]}],
+		hardness: 1.5,
+		blastResistance: 3.5,
+		material: "incorrect_for_wooden_tool",
+		category: "build"
+	},
+	{
+		name:"trialSpawner",
+		nameMcd:"trial_spawner",
+		Name:"Trial Spawner",
+		blockStates: [{"name":"ominous","values":[false,true]},{"name":"trial_spawner_state","values":["inactive","waiting_for_players","active","waiting_for_reward_ejection","ejecting_reward","cooldown"]}],
+		decreaseLight: 1,
+		transparent: true,
+		hardness: 50,
+		blastResistance: 50
+	},
+	{
+		name:"vault",
+		Name:"Vault",
+		blockStates: [{"name":"facing","values":["north","south","west","east"]},{"name":"ominous","values":[false,true]},{"name":"vault_state","values":["inactive","active","unlocking","ejecting"]}],
+		lightLevel: 6,
+		decreaseLight: 1,
+		transparent: true,
+		hardness: 50,
+		blastResistance: 50
+	},
+	{
+		name:"heavyCore",
+		nameMcd:"heavy_core",
+		Name:"Heavy Core",
+		blockStates: "mangroveRoots",
+		hardness: 10,
+		blastResistance: 1200,
+		material: "mineable/pickaxe",
+		category: "build"
+	},
+	{
+		name:"paleMossBlock",
+		nameMcd:"pale_moss_block",
+		Name:"Pale Moss Block",
+		hardness: 0.1,
+		blastResistance: 0.1,
+		material: "mineable/hoe"
+	},
+	{
+		name:"paleMossCarpet",
+		nameMcd:"pale_moss_carpet",
+		Name:"Pale Moss Carpet",
+		blockStates: [{"name":"bottom","values":[false,true]},{"name":"east","values":["none","low","tall"]},{"name":"north","values":["none","low","tall"]},{"name":"south","values":["none","low","tall"]},{"name":"west","values":["none","low","tall"]}],
+		hardness: 0.1,
+		blastResistance: 0.1,
+		material: "plant",
+		category: "nature"
+	},
+	{
+		name:"paleHangingMoss",
+		nameMcd:"pale_hanging_moss",
+		Name:"Pale Hanging Moss",
+		blockStates: [{"name":"tip","values":[false,true]}],
+		transparent: true,
+		solid: false,
+		hardness: 0.1,
+		blastResistance: 0.1
+	},
+	{ name:"saddle", Name:"Saddle", item: true, stackSize: 1 },
+	{ name:"chestMinecart", nameMcd:"chest_minecart", Name:"Minecart with Chest", item: true, stackSize: 1 },
+	{ name:"furnaceMinecart", nameMcd:"furnace_minecart", Name:"Minecart with Furnace", item: true, stackSize: 1 },
+	{ name:"tntMinecart", nameMcd:"tnt_minecart", Name:"Minecart with TNT", item: true, stackSize: 1 },
+	{ name:"hopperMinecart", nameMcd:"hopper_minecart", Name:"Minecart with Hopper", item: true, stackSize: 1 },
+	{ name:"carrotOnAStick", nameMcd:"carrot_on_a_stick", Name:"Carrot on a Stick", item: true, stackSize: 1, durability: 25 },
+	{ name:"warpedFungusOnAStick", nameMcd:"warped_fungus_on_a_stick", Name:"Warped Fungus on a Stick", item: true, stackSize: 1, durability: 100 },
+	{ name:"phantomMembrane", nameMcd:"phantom_membrane", Name:"Phantom Membrane", item: true },
+	{ name:"elytra", Name:"Elytra", item: true, stackSize: 1, durability: 432 },
+	{ name:"oakBoat", nameMcd:"oak_boat", Name:"Oak Boat", item: true, stackSize: 1 },
+	{ name:"oakChestBoat", nameMcd:"oak_chest_boat", Name:"Oak Boat with Chest", item: true, stackSize: 1 },
+	{ name:"spruceBoat", nameMcd:"spruce_boat", Name:"Spruce Boat", item: true, stackSize: 1 },
+	{ name:"spruceChestBoat", nameMcd:"spruce_chest_boat", Name:"Spruce Boat with Chest", item: true, stackSize: 1 },
+	{ name:"birchBoat", nameMcd:"birch_boat", Name:"Birch Boat", item: true, stackSize: 1 },
+	{ name:"birchChestBoat", nameMcd:"birch_chest_boat", Name:"Birch Boat with Chest", item: true, stackSize: 1 },
+	{ name:"jungleBoat", nameMcd:"jungle_boat", Name:"Jungle Boat", item: true, stackSize: 1 },
+	{ name:"jungleChestBoat", nameMcd:"jungle_chest_boat", Name:"Jungle Boat with Chest", item: true, stackSize: 1 },
+	{ name:"acaciaBoat", nameMcd:"acacia_boat", Name:"Acacia Boat", item: true, stackSize: 1 },
+	{ name:"acaciaChestBoat", nameMcd:"acacia_chest_boat", Name:"Acacia Boat with Chest", item: true, stackSize: 1 },
+	{ name:"cherryBoat", nameMcd:"cherry_boat", Name:"Cherry Boat", item: true, stackSize: 1 },
+	{ name:"cherryChestBoat", nameMcd:"cherry_chest_boat", Name:"Cherry Boat with Chest", item: true, stackSize: 1 },
+	{ name:"darkOakBoat", nameMcd:"dark_oak_boat", Name:"Dark Oak Boat", item: true, stackSize: 1 },
+	{ name:"darkOakChestBoat", nameMcd:"dark_oak_chest_boat", Name:"Dark Oak Boat with Chest", item: true, stackSize: 1 },
+	{ name:"paleOakBoat", nameMcd:"pale_oak_boat", Name:"Pale Oak Boat", item: true, stackSize: 1 },
+	{ name:"paleOakChestBoat", nameMcd:"pale_oak_chest_boat", Name:"Pale Oak Boat with Chest", item: true, stackSize: 1 },
+	{ name:"mangroveBoat", nameMcd:"mangrove_boat", Name:"Mangrove Boat", item: true, stackSize: 1 },
+	{ name:"mangroveChestBoat", nameMcd:"mangrove_chest_boat", Name:"Mangrove Boat with Chest", item: true, stackSize: 1 },
+	{ name:"bambooRaft", nameMcd:"bamboo_raft", Name:"Bamboo Raft", item: true, stackSize: 1 },
+	{ name:"bambooChestRaft", nameMcd:"bamboo_chest_raft", Name:"Bamboo Raft with Chest", item: true, stackSize: 1 },
+	{ name:"turtleHelmet", nameMcd:"turtle_helmet", Name:"Turtle Shell", item: true, stackSize: 1, durability: 275 },
+	{ name:"turtleScute", nameMcd:"turtle_scute", Name:"Turtle Scute", item: true },
+	{ name:"armadilloScute", nameMcd:"armadillo_scute", Name:"Armadillo Scute", item: true },
+	{ name:"wolfArmor", nameMcd:"wolf_armor", Name:"Wolf Armor", item: true, stackSize: 1, durability: 64 },
+	{ name:"leatherHelmet", nameMcd:"leather_helmet", Name:"Leather Cap", item: true, stackSize: 1, durability: 55 },
+	{ name:"leatherChestplate", nameMcd:"leather_chestplate", Name:"Leather Tunic", item: true, stackSize: 1, durability: 80 },
+	{ name:"leatherLeggings", nameMcd:"leather_leggings", Name:"Leather Pants", item: true, stackSize: 1, durability: 75 },
+	{ name:"leatherBoots", nameMcd:"leather_boots", Name:"Leather Boots", item: true, stackSize: 1, durability: 65 },
+	{ name:"chainmailHelmet", nameMcd:"chainmail_helmet", Name:"Chainmail Helmet", item: true, stackSize: 1, durability: 165 },
+	{ name:"chainmailChestplate", nameMcd:"chainmail_chestplate", Name:"Chainmail Chestplate", item: true, stackSize: 1, durability: 240 },
+	{ name:"chainmailLeggings", nameMcd:"chainmail_leggings", Name:"Chainmail Leggings", item: true, stackSize: 1, durability: 225 },
+	{ name:"chainmailBoots", nameMcd:"chainmail_boots", Name:"Chainmail Boots", item: true, stackSize: 1, durability: 195 },
+	{ name:"ironHelmet", nameMcd:"iron_helmet", Name:"Iron Helmet", item: true, stackSize: 1, durability: 165 },
+	{ name:"ironChestplate", nameMcd:"iron_chestplate", Name:"Iron Chestplate", item: true, stackSize: 1, durability: 240 },
+	{ name:"ironLeggings", nameMcd:"iron_leggings", Name:"Iron Leggings", item: true, stackSize: 1, durability: 225 },
+	{ name:"ironBoots", nameMcd:"iron_boots", Name:"Iron Boots", item: true, stackSize: 1, durability: 195 },
+	{ name:"diamondHelmet", nameMcd:"diamond_helmet", Name:"Diamond Helmet", item: true, stackSize: 1, durability: 363 },
+	{ name:"diamondChestplate", nameMcd:"diamond_chestplate", Name:"Diamond Chestplate", item: true, stackSize: 1, durability: 528 },
+	{ name:"diamondLeggings", nameMcd:"diamond_leggings", Name:"Diamond Leggings", item: true, stackSize: 1, durability: 495 },
+	{ name:"diamondBoots", nameMcd:"diamond_boots", Name:"Diamond Boots", item: true, stackSize: 1, durability: 429 },
+	{ name:"goldenHelmet", nameMcd:"golden_helmet", Name:"Golden Helmet", item: true, stackSize: 1, durability: 77 },
+	{ name:"goldenChestplate", nameMcd:"golden_chestplate", Name:"Golden Chestplate", item: true, stackSize: 1, durability: 112 },
+	{ name:"goldenLeggings", nameMcd:"golden_leggings", Name:"Golden Leggings", item: true, stackSize: 1, durability: 105 },
+	{ name:"goldenBoots", nameMcd:"golden_boots", Name:"Golden Boots", item: true, stackSize: 1, durability: 91 },
+	{ name:"netheriteHelmet", nameMcd:"netherite_helmet", Name:"Netherite Helmet", item: true, stackSize: 1, durability: 407 },
+	{ name:"netheriteChestplate", nameMcd:"netherite_chestplate", Name:"Netherite Chestplate", item: true, stackSize: 1, durability: 592 },
+	{ name:"netheriteLeggings", nameMcd:"netherite_leggings", Name:"Netherite Leggings", item: true, stackSize: 1, durability: 555 },
+	{ name:"netheriteBoots", nameMcd:"netherite_boots", Name:"Netherite Boots", item: true, stackSize: 1, durability: 481 },
+	{ name:"painting", Name:"Painting", item: true },
+	{ name:"enchantedGoldenApple", nameMcd:"enchanted_golden_apple", Name:"Enchanted Golden Apple", item: true, edible: true, food: 4, saturation: 9.6 },
+	{ name:"leather", Name:"Leather", item: true },
+	{ name:"pufferfishBucket", nameMcd:"pufferfish_bucket", Name:"Bucket of Pufferfish", item: true, stackSize: 1 },
+	{ name:"salmonBucket", nameMcd:"salmon_bucket", Name:"Bucket of Salmon", item: true, stackSize: 1 },
+	{ name:"codBucket", nameMcd:"cod_bucket", Name:"Bucket of Cod", item: true, stackSize: 1 },
+	{ name:"tropicalFishBucket", nameMcd:"tropical_fish_bucket", Name:"Bucket of Tropical Fish", item: true, stackSize: 1 },
+	{ name:"axolotlBucket", nameMcd:"axolotl_bucket", Name:"Bucket of Axolotl", item: true, stackSize: 1 },
+	{ name:"tadpoleBucket", nameMcd:"tadpole_bucket", Name:"Bucket of Tadpole", item: true, stackSize: 1 },
+	{ name:"paper", Name:"Paper", item: true },
+	{ name:"book", Name:"Book", item: true },
+	{ name:"slimeBall", nameMcd:"slime_ball", Name:"Slimeball", item: true },
+	{ name:"compass", Name:"Compass", item: true },
+	{ name:"recoveryCompass", nameMcd:"recovery_compass", Name:"Recovery Compass", item: true },
+	{ name:"bundle", Name:"Bundle", item: true, stackSize: 1 },
+	{ name:"whiteBundle", nameMcd:"white_bundle", Name:"White Bundle", item: true, stackSize: 1 },
+	{ name:"orangeBundle", nameMcd:"orange_bundle", Name:"Orange Bundle", item: true, stackSize: 1 },
+	{ name:"magentaBundle", nameMcd:"magenta_bundle", Name:"Magenta Bundle", item: true, stackSize: 1 },
+	{ name:"lightBlueBundle", nameMcd:"light_blue_bundle", Name:"Light Blue Bundle", item: true, stackSize: 1 },
+	{ name:"yellowBundle", nameMcd:"yellow_bundle", Name:"Yellow Bundle", item: true, stackSize: 1 },
+	{ name:"limeBundle", nameMcd:"lime_bundle", Name:"Lime Bundle", item: true, stackSize: 1 },
+	{ name:"pinkBundle", nameMcd:"pink_bundle", Name:"Pink Bundle", item: true, stackSize: 1 },
+	{ name:"grayBundle", nameMcd:"gray_bundle", Name:"Gray Bundle", item: true, stackSize: 1 },
+	{ name:"lightGrayBundle", nameMcd:"light_gray_bundle", Name:"Light Gray Bundle", item: true, stackSize: 1 },
+	{ name:"cyanBundle", nameMcd:"cyan_bundle", Name:"Cyan Bundle", item: true, stackSize: 1 },
+	{ name:"purpleBundle", nameMcd:"purple_bundle", Name:"Purple Bundle", item: true, stackSize: 1 },
+	{ name:"blueBundle", nameMcd:"blue_bundle", Name:"Blue Bundle", item: true, stackSize: 1 },
+	{ name:"brownBundle", nameMcd:"brown_bundle", Name:"Brown Bundle", item: true, stackSize: 1 },
+	{ name:"greenBundle", nameMcd:"green_bundle", Name:"Green Bundle", item: true, stackSize: 1 },
+	{ name:"redBundle", nameMcd:"red_bundle", Name:"Red Bundle", item: true, stackSize: 1 },
+	{ name:"blackBundle", nameMcd:"black_bundle", Name:"Black Bundle", item: true, stackSize: 1 },
+	{ name:"fishingRod", nameMcd:"fishing_rod", Name:"Fishing Rod", item: true, stackSize: 1, durability: 64 },
+	{ name:"clock", Name:"Clock", item: true },
+	{ name:"pufferfish", Name:"Pufferfish", item: true, edible: true, food: 1, saturation: 0.2 },
+	{ name:"filledMap", nameMcd:"filled_map", Name:"Map", item: true },
+	{ name:"driedKelp", nameMcd:"dried_kelp", Name:"Dried Kelp", item: true, edible: true, food: 1, saturation: 0.6 },
+	{ name:"ghastTear", nameMcd:"ghast_tear", Name:"Ghast Tear", item: true },
+	{ name:"glassBottle", nameMcd:"glass_bottle", Name:"Glass Bottle", item: true },
+	{ name:"potion", Name:"Potion", item: true, stackSize: 1 },
+	{ name:"fermentedSpiderEye", nameMcd:"fermented_spider_eye", Name:"Fermented Spider Eye", item: true },
+	{ name:"magmaCream", nameMcd:"magma_cream", Name:"Magma Cream", item: true },
+	{ name:"enderEye", nameMcd:"ender_eye", Name:"Eye of Ender", item: true },
+	{ name:"armadilloSpawnEgg", nameMcd:"armadillo_spawn_egg", Name:"Armadillo Spawn Egg", item: true },
+	{ name:"allaySpawnEgg", nameMcd:"allay_spawn_egg", Name:"Allay Spawn Egg", item: true },
+	{ name:"axolotlSpawnEgg", nameMcd:"axolotl_spawn_egg", Name:"Axolotl Spawn Egg", item: true },
+	{ name:"batSpawnEgg", nameMcd:"bat_spawn_egg", Name:"Bat Spawn Egg", item: true },
+	{ name:"beeSpawnEgg", nameMcd:"bee_spawn_egg", Name:"Bee Spawn Egg", item: true },
+	{ name:"boggedSpawnEgg", nameMcd:"bogged_spawn_egg", Name:"Bogged Spawn Egg", item: true },
+	{ name:"breezeSpawnEgg", nameMcd:"breeze_spawn_egg", Name:"Breeze Spawn Egg", item: true },
+	{ name:"catSpawnEgg", nameMcd:"cat_spawn_egg", Name:"Cat Spawn Egg", item: true },
+	{ name:"camelSpawnEgg", nameMcd:"camel_spawn_egg", Name:"Camel Spawn Egg", item: true },
+	{ name:"codSpawnEgg", nameMcd:"cod_spawn_egg", Name:"Cod Spawn Egg", item: true },
+	{ name:"dolphinSpawnEgg", nameMcd:"dolphin_spawn_egg", Name:"Dolphin Spawn Egg", item: true },
+	{ name:"donkeySpawnEgg", nameMcd:"donkey_spawn_egg", Name:"Donkey Spawn Egg", item: true },
+	{ name:"drownedSpawnEgg", nameMcd:"drowned_spawn_egg", Name:"Drowned Spawn Egg", item: true },
+	{ name:"elderGuardianSpawnEgg", nameMcd:"elder_guardian_spawn_egg", Name:"Elder Guardian Spawn Egg", item: true },
+	{ name:"endermiteSpawnEgg", nameMcd:"endermite_spawn_egg", Name:"Endermite Spawn Egg", item: true },
+	{ name:"evokerSpawnEgg", nameMcd:"evoker_spawn_egg", Name:"Evoker Spawn Egg", item: true },
+	{ name:"foxSpawnEgg", nameMcd:"fox_spawn_egg", Name:"Fox Spawn Egg", item: true },
+	{ name:"frogSpawnEgg", nameMcd:"frog_spawn_egg", Name:"Frog Spawn Egg", item: true },
+	{ name:"ghastSpawnEgg", nameMcd:"ghast_spawn_egg", Name:"Ghast Spawn Egg", item: true },
+	{ name:"glowSquidSpawnEgg", nameMcd:"glow_squid_spawn_egg", Name:"Glow Squid Spawn Egg", item: true },
+	{ name:"goatSpawnEgg", nameMcd:"goat_spawn_egg", Name:"Goat Spawn Egg", item: true },
+	{ name:"guardianSpawnEgg", nameMcd:"guardian_spawn_egg", Name:"Guardian Spawn Egg", item: true },
+	{ name:"hoglinSpawnEgg", nameMcd:"hoglin_spawn_egg", Name:"Hoglin Spawn Egg", item: true },
+	{ name:"horseSpawnEgg", nameMcd:"horse_spawn_egg", Name:"Horse Spawn Egg", item: true },
+	{ name:"huskSpawnEgg", nameMcd:"husk_spawn_egg", Name:"Husk Spawn Egg", item: true },
+	{ name:"ironGolemSpawnEgg", nameMcd:"iron_golem_spawn_egg", Name:"Iron Golem Spawn Egg", item: true },
+	{ name:"llamaSpawnEgg", nameMcd:"llama_spawn_egg", Name:"Llama Spawn Egg", item: true },
+	{ name:"magmaCubeSpawnEgg", nameMcd:"magma_cube_spawn_egg", Name:"Magma Cube Spawn Egg", item: true },
+	{ name:"mooshroomSpawnEgg", nameMcd:"mooshroom_spawn_egg", Name:"Mooshroom Spawn Egg", item: true },
+	{ name:"muleSpawnEgg", nameMcd:"mule_spawn_egg", Name:"Mule Spawn Egg", item: true },
+	{ name:"ocelotSpawnEgg", nameMcd:"ocelot_spawn_egg", Name:"Ocelot Spawn Egg", item: true },
+	{ name:"pandaSpawnEgg", nameMcd:"panda_spawn_egg", Name:"Panda Spawn Egg", item: true },
+	{ name:"parrotSpawnEgg", nameMcd:"parrot_spawn_egg", Name:"Parrot Spawn Egg", item: true },
+	{ name:"phantomSpawnEgg", nameMcd:"phantom_spawn_egg", Name:"Phantom Spawn Egg", item: true },
+	{ name:"piglinSpawnEgg", nameMcd:"piglin_spawn_egg", Name:"Piglin Spawn Egg", item: true },
+	{ name:"piglinBruteSpawnEgg", nameMcd:"piglin_brute_spawn_egg", Name:"Piglin Brute Spawn Egg", item: true },
+	{ name:"pillagerSpawnEgg", nameMcd:"pillager_spawn_egg", Name:"Pillager Spawn Egg", item: true },
+	{ name:"polarBearSpawnEgg", nameMcd:"polar_bear_spawn_egg", Name:"Polar Bear Spawn Egg", item: true },
+	{ name:"pufferfishSpawnEgg", nameMcd:"pufferfish_spawn_egg", Name:"Pufferfish Spawn Egg", item: true },
+	{ name:"rabbitSpawnEgg", nameMcd:"rabbit_spawn_egg", Name:"Rabbit Spawn Egg", item: true },
+	{ name:"ravagerSpawnEgg", nameMcd:"ravager_spawn_egg", Name:"Ravager Spawn Egg", item: true },
+	{ name:"salmonSpawnEgg", nameMcd:"salmon_spawn_egg", Name:"Salmon Spawn Egg", item: true },
+	{ name:"shulkerSpawnEgg", nameMcd:"shulker_spawn_egg", Name:"Shulker Spawn Egg", item: true },
+	{ name:"silverfishSpawnEgg", nameMcd:"silverfish_spawn_egg", Name:"Silverfish Spawn Egg", item: true },
+	{ name:"skeletonHorseSpawnEgg", nameMcd:"skeleton_horse_spawn_egg", Name:"Skeleton Horse Spawn Egg", item: true },
+	{ name:"slimeSpawnEgg", nameMcd:"slime_spawn_egg", Name:"Slime Spawn Egg", item: true },
+	{ name:"snifferSpawnEgg", nameMcd:"sniffer_spawn_egg", Name:"Sniffer Spawn Egg", item: true },
+	{ name:"snowGolemSpawnEgg", nameMcd:"snow_golem_spawn_egg", Name:"Snow Golem Spawn Egg", item: true },
+	{ name:"squidSpawnEgg", nameMcd:"squid_spawn_egg", Name:"Squid Spawn Egg", item: true },
+	{ name:"straySpawnEgg", nameMcd:"stray_spawn_egg", Name:"Stray Spawn Egg", item: true },
+	{ name:"striderSpawnEgg", nameMcd:"strider_spawn_egg", Name:"Strider Spawn Egg", item: true },
+	{ name:"tadpoleSpawnEgg", nameMcd:"tadpole_spawn_egg", Name:"Tadpole Spawn Egg", item: true },
+	{ name:"traderLlamaSpawnEgg", nameMcd:"trader_llama_spawn_egg", Name:"Trader Llama Spawn Egg", item: true },
+	{ name:"tropicalFishSpawnEgg", nameMcd:"tropical_fish_spawn_egg", Name:"Tropical Fish Spawn Egg", item: true },
+	{ name:"turtleSpawnEgg", nameMcd:"turtle_spawn_egg", Name:"Turtle Spawn Egg", item: true },
+	{ name:"vexSpawnEgg", nameMcd:"vex_spawn_egg", Name:"Vex Spawn Egg", item: true },
+	{ name:"villagerSpawnEgg", nameMcd:"villager_spawn_egg", Name:"Villager Spawn Egg", item: true },
+	{ name:"vindicatorSpawnEgg", nameMcd:"vindicator_spawn_egg", Name:"Vindicator Spawn Egg", item: true },
+	{ name:"wanderingTraderSpawnEgg", nameMcd:"wandering_trader_spawn_egg", Name:"Wandering Trader Spawn Egg", item: true },
+	{ name:"wardenSpawnEgg", nameMcd:"warden_spawn_egg", Name:"Warden Spawn Egg", item: true },
+	{ name:"witchSpawnEgg", nameMcd:"witch_spawn_egg", Name:"Witch Spawn Egg", item: true },
+	{ name:"witherSpawnEgg", nameMcd:"wither_spawn_egg", Name:"Wither Spawn Egg", item: true },
+	{ name:"witherSkeletonSpawnEgg", nameMcd:"wither_skeleton_spawn_egg", Name:"Wither Skeleton Spawn Egg", item: true },
+	{ name:"zoglinSpawnEgg", nameMcd:"zoglin_spawn_egg", Name:"Zoglin Spawn Egg", item: true },
+	{ name:"creakingSpawnEgg", nameMcd:"creaking_spawn_egg", Name:"Creaking Spawn Egg", item: true },
+	{ name:"zombieHorseSpawnEgg", nameMcd:"zombie_horse_spawn_egg", Name:"Zombie Horse Spawn Egg", item: true },
+	{ name:"zombieVillagerSpawnEgg", nameMcd:"zombie_villager_spawn_egg", Name:"Zombie Villager Spawn Egg", item: true },
+	{ name:"zombifiedPiglinSpawnEgg", nameMcd:"zombified_piglin_spawn_egg", Name:"Zombified Piglin Spawn Egg", item: true },
+	{ name:"experienceBottle", nameMcd:"experience_bottle", Name:"Bottle o' Enchanting", item: true },
+	{ name:"windCharge", nameMcd:"wind_charge", Name:"Wind Charge", item: true },
+	{ name:"writableBook", nameMcd:"writable_book", Name:"Book and Quill", item: true, stackSize: 1 },
+	{ name:"writtenBook", nameMcd:"written_book", Name:"Written Book", item: true, stackSize: 16 },
+	{ name:"breezeRod", nameMcd:"breeze_rod", Name:"Breeze Rod", item: true },
+	{ name:"mace", Name:"Mace", item: true, stackSize: 1, durability: 500 },
+	{ name:"poisonousPotato", nameMcd:"poisonous_potato", Name:"Poisonous Potato", item: true, edible: true, food: 2, saturation: 1.2 },
+	{ name:"map", Name:"Empty Map", item: true },
+	{ name:"netherStar", nameMcd:"nether_star", Name:"Nether Star", item: true },
+	{ name:"fireworkRocket", nameMcd:"firework_rocket", Name:"Firework Rocket", item: true },
+	{ name:"fireworkStar", nameMcd:"firework_star", Name:"Firework Star", item: true },
+	{ name:"enchantedBook", nameMcd:"enchanted_book", Name:"Enchanted Book", item: true, stackSize: 1 },
+	{ name:"netherBrick", nameMcd:"nether_brick", Name:"Nether Brick", item: true },
+	{ name:"rabbitFoot", nameMcd:"rabbit_foot", Name:"Rabbit's Foot", item: true },
+	{ name:"rabbitHide", nameMcd:"rabbit_hide", Name:"Rabbit Hide", item: true },
+	{ name:"armorStand", nameMcd:"armor_stand", Name:"Armor Stand", item: true, stackSize: 16 },
+	{ name:"ironHorseArmor", nameMcd:"iron_horse_armor", Name:"Iron Horse Armor", item: true, stackSize: 1 },
+	{ name:"goldenHorseArmor", nameMcd:"golden_horse_armor", Name:"Golden Horse Armor", item: true, stackSize: 1 },
+	{ name:"diamondHorseArmor", nameMcd:"diamond_horse_armor", Name:"Diamond Horse Armor", item: true, stackSize: 1 },
+	{ name:"leatherHorseArmor", nameMcd:"leather_horse_armor", Name:"Leather Horse Armor", item: true, stackSize: 1 },
+	{ name:"lead", Name:"Lead", item: true },
+	{ name:"commandBlockMinecart", nameMcd:"command_block_minecart", Name:"Minecart with Command Block", item: true, stackSize: 1 },
+	{ name:"endCrystal", nameMcd:"end_crystal", Name:"End Crystal", item: true },
+	{ name:"chorusFruit", nameMcd:"chorus_fruit", Name:"Chorus Fruit", item: true, edible: true, food: 4, saturation: 2.4 },
+	{ name:"poppedChorusFruit", nameMcd:"popped_chorus_fruit", Name:"Popped Chorus Fruit", item: true },
+	{ name:"dragonBreath", nameMcd:"dragon_breath", Name:"Dragon's Breath", item: true },
+	{ name:"splashPotion", nameMcd:"splash_potion", Name:"Splash Potion", item: true, stackSize: 1 },
+	{ name:"spectralArrow", nameMcd:"spectral_arrow", Name:"Spectral Arrow", item: true },
+	{ name:"tippedArrow", nameMcd:"tipped_arrow", Name:"Tipped Arrow", item: true },
+	{ name:"lingeringPotion", nameMcd:"lingering_potion", Name:"Lingering Potion", item: true, stackSize: 1 },
+	{ name:"shield", Name:"Shield", item: true, stackSize: 1, durability: 336 },
+	{ name:"totemOfUndying", nameMcd:"totem_of_undying", Name:"Totem of Undying", item: true, stackSize: 1 },
+	{ name:"shulkerShell", nameMcd:"shulker_shell", Name:"Shulker Shell", item: true },
+	{ name:"knowledgeBook", nameMcd:"knowledge_book", Name:"Knowledge Book", item: true, stackSize: 1 },
+	{ name:"musicDisc_13", nameMcd:"music_disc_13", Name:"Music Disc", item: true, stackSize: 1 },
+	{ name:"musicDiscCat", nameMcd:"music_disc_cat", Name:"Music Disc", item: true, stackSize: 1 },
+	{ name:"musicDiscBlocks", nameMcd:"music_disc_blocks", Name:"Music Disc", item: true, stackSize: 1 },
+	{ name:"musicDiscChirp", nameMcd:"music_disc_chirp", Name:"Music Disc", item: true, stackSize: 1 },
+	{ name:"musicDiscCreator", nameMcd:"music_disc_creator", Name:"Music Disc", item: true, stackSize: 1 },
+	{ name:"musicDiscCreatorMusicBox", nameMcd:"music_disc_creator_music_box", Name:"Music Disc", item: true, stackSize: 1 },
+	{ name:"musicDiscFar", nameMcd:"music_disc_far", Name:"Music Disc", item: true, stackSize: 1 },
+	{ name:"musicDiscMall", nameMcd:"music_disc_mall", Name:"Music Disc", item: true, stackSize: 1 },
+	{ name:"musicDiscMellohi", nameMcd:"music_disc_mellohi", Name:"Music Disc", item: true, stackSize: 1 },
+	{ name:"musicDiscStal", nameMcd:"music_disc_stal", Name:"Music Disc", item: true, stackSize: 1 },
+	{ name:"musicDiscStrad", nameMcd:"music_disc_strad", Name:"Music Disc", item: true, stackSize: 1 },
+	{ name:"musicDiscWard", nameMcd:"music_disc_ward", Name:"Music Disc", item: true, stackSize: 1 },
+	{ name:"musicDisc_11", nameMcd:"music_disc_11", Name:"Music Disc", item: true, stackSize: 1 },
+	{ name:"musicDiscWait", nameMcd:"music_disc_wait", Name:"Music Disc", item: true, stackSize: 1 },
+	{ name:"musicDiscOtherside", nameMcd:"music_disc_otherside", Name:"Music Disc", item: true, stackSize: 1 },
+	{ name:"musicDiscRelic", nameMcd:"music_disc_relic", Name:"Music Disc", item: true, stackSize: 1 },
+	{ name:"musicDisc_5", nameMcd:"music_disc_5", Name:"Music Disc", item: true, stackSize: 1 },
+	{ name:"musicDiscPigstep", nameMcd:"music_disc_pigstep", Name:"Music Disc", item: true, stackSize: 1 },
+	{ name:"musicDiscPrecipice", nameMcd:"music_disc_precipice", Name:"Music Disc", item: true, stackSize: 1 },
+	{ name:"discFragment_5", nameMcd:"disc_fragment_5", Name:"Disc Fragment", item: true },
+	{ name:"trident", Name:"Trident", item: true, stackSize: 1, durability: 250 },
+	{ name:"nautilusShell", nameMcd:"nautilus_shell", Name:"Nautilus Shell", item: true },
+	{ name:"heartOfTheSea", nameMcd:"heart_of_the_sea", Name:"Heart of the Sea", item: true },
+	{ name:"crossbow", Name:"Crossbow", item: true, stackSize: 1, durability: 465 },
+	{ name:"suspiciousStew", nameMcd:"suspicious_stew", Name:"Suspicious Stew", item: true, stackSize: 1, edible: true, food: 6, saturation: 7.2 },
+	{ name:"flowerBannerPattern", nameMcd:"flower_banner_pattern", Name:"Flower Charge Banner Pattern", item: true, stackSize: 1 },
+	{ name:"creeperBannerPattern", nameMcd:"creeper_banner_pattern", Name:"Creeper Charge Banner Pattern", item: true, stackSize: 1 },
+	{ name:"skullBannerPattern", nameMcd:"skull_banner_pattern", Name:"Skull Charge Banner Pattern", item: true, stackSize: 1 },
+	{ name:"mojangBannerPattern", nameMcd:"mojang_banner_pattern", Name:"Thing Banner Pattern", item: true, stackSize: 1 },
+	{ name:"globeBannerPattern", nameMcd:"globe_banner_pattern", Name:"Globe Banner Pattern", item: true, stackSize: 1 },
+	{ name:"piglinBannerPattern", nameMcd:"piglin_banner_pattern", Name:"Snout Banner Pattern", item: true, stackSize: 1 },
+	{ name:"flowBannerPattern", nameMcd:"flow_banner_pattern", Name:"Flow Banner Pattern", item: true, stackSize: 1 },
+	{ name:"gusterBannerPattern", nameMcd:"guster_banner_pattern", Name:"Guster Banner Pattern", item: true, stackSize: 1 },
+	{ name:"fieldMasonedBannerPattern", nameMcd:"field_masoned_banner_pattern", Name:"Field Masoned Banner Pattern", item: true, stackSize: 1 },
+	{ name:"bordureIndentedBannerPattern", nameMcd:"bordure_indented_banner_pattern", Name:"Bordure Indented Banner Pattern", item: true, stackSize: 1 },
+	{ name:"goatHorn", nameMcd:"goat_horn", Name:"Goat Horn", item: true, stackSize: 1 },
+	{ name:"honeyBottle", nameMcd:"honey_bottle", Name:"Honey Bottle", item: true, stackSize: 16, edible: true, food: 6, saturation: 1.2 },
+	{ name:"echoShard", nameMcd:"echo_shard", Name:"Echo Shard", item: true },
+	{ name:"brush", Name:"Brush", item: true, stackSize: 1, durability: 64 },
+	{ name:"netheriteUpgradeSmithingTemplate", nameMcd:"netherite_upgrade_smithing_template", Name:"Netherite Upgrade", item: true },
+	{ name:"sentryArmorTrimSmithingTemplate", nameMcd:"sentry_armor_trim_smithing_template", Name:"Sentry Armor Trim", item: true },
+	{ name:"duneArmorTrimSmithingTemplate", nameMcd:"dune_armor_trim_smithing_template", Name:"Dune Armor Trim", item: true },
+	{ name:"coastArmorTrimSmithingTemplate", nameMcd:"coast_armor_trim_smithing_template", Name:"Coast Armor Trim", item: true },
+	{ name:"wildArmorTrimSmithingTemplate", nameMcd:"wild_armor_trim_smithing_template", Name:"Wild Armor Trim", item: true },
+	{ name:"wardArmorTrimSmithingTemplate", nameMcd:"ward_armor_trim_smithing_template", Name:"Ward Armor Trim", item: true },
+	{ name:"eyeArmorTrimSmithingTemplate", nameMcd:"eye_armor_trim_smithing_template", Name:"Eye Armor Trim", item: true },
+	{ name:"vexArmorTrimSmithingTemplate", nameMcd:"vex_armor_trim_smithing_template", Name:"Vex Armor Trim", item: true },
+	{ name:"tideArmorTrimSmithingTemplate", nameMcd:"tide_armor_trim_smithing_template", Name:"Tide Armor Trim", item: true },
+	{ name:"snoutArmorTrimSmithingTemplate", nameMcd:"snout_armor_trim_smithing_template", Name:"Snout Armor Trim", item: true },
+	{ name:"ribArmorTrimSmithingTemplate", nameMcd:"rib_armor_trim_smithing_template", Name:"Rib Armor Trim", item: true },
+	{ name:"spireArmorTrimSmithingTemplate", nameMcd:"spire_armor_trim_smithing_template", Name:"Spire Armor Trim", item: true },
+	{ name:"wayfinderArmorTrimSmithingTemplate", nameMcd:"wayfinder_armor_trim_smithing_template", Name:"Wayfinder Armor Trim", item: true },
+	{ name:"shaperArmorTrimSmithingTemplate", nameMcd:"shaper_armor_trim_smithing_template", Name:"Shaper Armor Trim", item: true },
+	{ name:"silenceArmorTrimSmithingTemplate", nameMcd:"silence_armor_trim_smithing_template", Name:"Silence Armor Trim", item: true },
+	{ name:"raiserArmorTrimSmithingTemplate", nameMcd:"raiser_armor_trim_smithing_template", Name:"Raiser Armor Trim", item: true },
+	{ name:"hostArmorTrimSmithingTemplate", nameMcd:"host_armor_trim_smithing_template", Name:"Host Armor Trim", item: true },
+	{ name:"flowArmorTrimSmithingTemplate", nameMcd:"flow_armor_trim_smithing_template", Name:"Flow Armor Trim", item: true },
+	{ name:"boltArmorTrimSmithingTemplate", nameMcd:"bolt_armor_trim_smithing_template", Name:"Bolt Armor Trim", item: true },
+	{ name:"anglerPotterySherd", nameMcd:"angler_pottery_sherd", Name:"Angler Pottery Sherd", item: true },
+	{ name:"archerPotterySherd", nameMcd:"archer_pottery_sherd", Name:"Archer Pottery Sherd", item: true },
+	{ name:"armsUpPotterySherd", nameMcd:"arms_up_pottery_sherd", Name:"Arms Up Pottery Sherd", item: true },
+	{ name:"bladePotterySherd", nameMcd:"blade_pottery_sherd", Name:"Blade Pottery Sherd", item: true },
+	{ name:"brewerPotterySherd", nameMcd:"brewer_pottery_sherd", Name:"Brewer Pottery Sherd", item: true },
+	{ name:"burnPotterySherd", nameMcd:"burn_pottery_sherd", Name:"Burn Pottery Sherd", item: true },
+	{ name:"dangerPotterySherd", nameMcd:"danger_pottery_sherd", Name:"Danger Pottery Sherd", item: true },
+	{ name:"explorerPotterySherd", nameMcd:"explorer_pottery_sherd", Name:"Explorer Pottery Sherd", item: true },
+	{ name:"flowPotterySherd", nameMcd:"flow_pottery_sherd", Name:"Flow Pottery Sherd", item: true },
+	{ name:"friendPotterySherd", nameMcd:"friend_pottery_sherd", Name:"Friend Pottery Sherd", item: true },
+	{ name:"gusterPotterySherd", nameMcd:"guster_pottery_sherd", Name:"Guster Pottery Sherd", item: true },
+	{ name:"heartPotterySherd", nameMcd:"heart_pottery_sherd", Name:"Heart Pottery Sherd", item: true },
+	{ name:"heartbreakPotterySherd", nameMcd:"heartbreak_pottery_sherd", Name:"Heartbreak Pottery Sherd", item: true },
+	{ name:"howlPotterySherd", nameMcd:"howl_pottery_sherd", Name:"Howl Pottery Sherd", item: true },
+	{ name:"minerPotterySherd", nameMcd:"miner_pottery_sherd", Name:"Miner Pottery Sherd", item: true },
+	{ name:"mournerPotterySherd", nameMcd:"mourner_pottery_sherd", Name:"Mourner Pottery Sherd", item: true },
+	{ name:"plentyPotterySherd", nameMcd:"plenty_pottery_sherd", Name:"Plenty Pottery Sherd", item: true },
+	{ name:"prizePotterySherd", nameMcd:"prize_pottery_sherd", Name:"Prize Pottery Sherd", item: true },
+	{ name:"scrapePotterySherd", nameMcd:"scrape_pottery_sherd", Name:"Scrape Pottery Sherd", item: true },
+	{ name:"sheafPotterySherd", nameMcd:"sheaf_pottery_sherd", Name:"Sheaf Pottery Sherd", item: true },
+	{ name:"shelterPotterySherd", nameMcd:"shelter_pottery_sherd", Name:"Shelter Pottery Sherd", item: true },
+	{ name:"skullPotterySherd", nameMcd:"skull_pottery_sherd", Name:"Skull Pottery Sherd", item: true },
+	{ name:"snortPotterySherd", nameMcd:"snort_pottery_sherd", Name:"Snort Pottery Sherd", item: true },
+	{ name:"trialKey", nameMcd:"trial_key", Name:"Trial Key", item: true },
+	{ name:"ominousTrialKey", nameMcd:"ominous_trial_key", Name:"Ominous Trial Key", item: true },
+	{ name:"ominousBottle", nameMcd:"ominous_bottle", Name:"Ominous Bottle", item: true },
 ];
 const BLOCK_COUNT = blockData.length
 console.log(BLOCK_COUNT," blocks on server side")
 win.BLOCK_COUNT = BLOCK_COUNT, win.blockData = blockData
 win.emptyFunc = function(){}
-
+	
 let blockIds = {}
 win.blockIds = blockIds
+let blockStateMaps = {}
+win.blockStateMaps = blockStateMaps
 let generateBlockIds = {
 	grass:true, dirt:true, stone: true, gravel: true,
 	snowBlock: true, snow: true, packedIce:true, ice:true,
@@ -12214,6 +19410,26 @@
 	orangeConcrete:true,glowstone:true//also for testing
 } //blocks that can be naturally generated
 function initBlockData(){
+  blockData.forEach((block, i) => {
+		block.id = i
+    blockIds[block.name] = block.id
+    /*if(block.SW && block.name.includes("SW")){
+      let unSw = block.name.replace("SW",'')
+      if(blockIds[unSw]){
+        block.drop = unSw
+        let obj = blockData[blockIds[unSw]]
+        block.hardness = obj.hardness
+        block.type = obj.type
+        block.burnChance = obj.burnChance
+        block.burnTime = obj.burnTime
+				block.log = obj.log
+				block.harvestTools = obj.harvestTools
+				obj.swId = block.id
+      }
+    }
+		if(generateBlockIds[block.name]) generateBlockIds[block.name] = block.id*/
+  })
+
 	const stoneDigSound = ["stone.dig1", "stone.dig2", "stone.dig3", "stone.dig4"],
 			stoneStepSound = ["stone.step1", "stone.step2","stone.step3","stone.step4","stone.step5","stone.step6"],
 			woodDigSound = ["wood.dig1", "wood.dig2", "wood.dig3", "wood.dig4"],
@@ -12261,32 +19477,17 @@
 	- it stores it in specific bits in a number
 	*/
 	// Set defaults on blockData
-	for (let i = 1; i < BLOCK_COUNT; ++i) {
+	for (let i = 0; i < BLOCK_COUNT; ++i) {
 		const data = blockData[i];
-		data.id = i;
 
-		if ( !("textures" in data) ) {
-			data.textures = new Array(6).fill(data.name);
-		} else if (typeof data.textures === "string") {
-			data.textures = new Array(6).fill(data.textures);
-		} else {
-			const { textures } = data;
-
-			if (textures.length === 3) {
-				textures[3] = textures[2];
-				textures[4] = textures[2];
-				textures[5] = textures[2];
-			} else if (textures.length === 2) {
-				// Top and bottom are the first texture, sides are the second.
-				textures[2] = textures[1];
-				textures[3] = textures[2];
-				textures[4] = textures[2];
-				textures[5] = textures[2];
-				textures[1] = textures[0];
-			}else if(textures.length === 4){
-        textures[4] = textures[5] = textures[3]
-        textures[3] = textures[2]
-      }
+		if(data.copyPropertiesHere){
+			let other = blockData[blockIds[data.copyPropertiesHere]]
+			let arr = ["onupdate","onclick","onpowerupdate","onset","ondelete","ontagsupdate","activate","projectileHit","serveronuse","useAs","grow","tick","onbreak","onplace"]
+			if(other.copyFromProperties) arr.push(...other.copyFromProperties)
+			for(let c=0; c<arr.length; c++){
+				let prop = arr[c]
+				if(other[prop] !== undefined && data[prop] === undefined) data[prop] = other[prop]
+			}
 		}
 
 		data.transparent = data.transparent || false
@@ -12408,33 +19609,45 @@
 		data.pistonPush = data.pistonPush !== undefined ? data.pistonPush : true
 		data.pistonPull = data.pistonPull !== undefined ? data.pistonPull : true
 
-		if(breakTypes[data.type]) data.harvestTools = breakTypes[data.type]
-		if(handBreakable.includes(data.type)) data.harvestTools = true
-	}
+		if(data.harvestToolsNames){
+			if(typeof data.harvestToolsNames === "string"){
+				data.harvestToolsNames = blockData[blockIds[data.harvestToolsNames]].harvestToolsNames
+			}
+			data.harvestTools = []
+			for(let i=0; i<data.harvestToolsNames.length; i++){
+				data.harvestTools.push(blockIds[data.harvestToolsNames[i]])
+			}
+		}else data.harvestTools = true
+
+		if(data.blockStates){
+			if(typeof data.blockStates === "string"){
+				data.blockStates = blockData[blockIds[data.blockStates]].blockStates
+			}
+			const blockStateMinMult = 0x10000
+			let obj = {}, mult = blockStateMinMult //16th bit
+			for(let s=0; s<data.blockStates.length; s++){
+				let bs = data.blockStates[s]
+				bs.minMult = mult
+				mult *= bs.values.length
+				bs.maxMult = mult
+				//let bsids = {}
+				for(let v=0; v<bs.values.length; v++){
+					if(!(bs.values[v] in bs)) bs[bs.values[v]] = v*bs.minMult
+				}
+				//blockStateIds[data.name] = bsids
+				obj[bs.name] = bs
+			}
+			data.blockStatesMap = obj
+			blockStateMaps[data.name] = obj
 
-  blockData.forEach(block => {
-    blockIds[block.name] = block.id
-    if(block.SW && block.name.includes("SW")){
-      let unSw = block.name.replace("SW",'')
-      if(blockIds[unSw]){
-        block.drop = unSw
-        let obj = blockData[blockIds[unSw]]
-        block.hardness = obj.hardness
-        block.type = obj.type
-        block.burnChance = obj.burnChance
-        block.burnTime = obj.burnTime
-				block.log = obj.log
-				block.harvestTools = obj.harvestTools
-				obj.swId = block.id
-      }
-    }
-		if(generateBlockIds[block.name]) generateBlockIds[block.name] = block.id
-  })
-	for(let b in breakTypes){
-		for(let i=0; i<breakTypes[b].length; i++){
-			breakTypes[b][i] = blockIds[breakTypes[b][i]]
+			for(let s=i+blockStateMinMult; s<mult; s+=blockStateMinMult){
+				blockData[s] = Object.create(data)
+			}
+		}else{
+			data.blockStatesMap = {}
 		}
 	}
+	dataLoad.loadNamespace(dataLoad.data, "min"+"ecr"+"aft", {blockData,BLOCK_COUNT,shapes,textures:textures2,blockIds,compareArr,entityData})
 
 	//fill the crafts that have less than 9 items. Ex: "thing" => "thing,air,air..."
 	let arr, arr2 = new Array(9)
@@ -12529,7 +19742,7 @@
 	win.smelts = smelts; win.smeltFuel = smeltFuel
 }
 
-const breakTypes = {
+/*const breakTypes = {
 	//plant: "axe",
 	//wood: "axe",
 	metal1: ["woodenPickaxe","stonePickaxe","ironPickaxe","diamondPickaxe","netheritePickaxe","goldenPickaxe"],
@@ -12544,12 +19757,10 @@
 	//plant2: "hoe",
 	//wool:"air"
 }
-win.breakTypes = breakTypes
 const handBreakable = [
 	"plant","wood","plant2","ground","wool"
-]
-win.handBreakable = handBreakable
-const crafts = {
+]*/
+const crafts = {//todo n: change?
 	"oakLog": {name:"oakPlanks", amount:4, shapeless: true},
 	"acaciaLog": {name:"acaciaPlanks", amount:4, shapeless: true},
 	"birchLog": {name:"birchPlanks", amount:4, shapeless: true},
@@ -13624,6 +20835,15 @@
 	s.newJigsawTries = s.nextJigsawPos.length ? (s.newJigsawTries === undefined ? 1 : s.newJigsawTries) : 0
 }
 
+const blockStateShapes = {//example
+	fern:{
+		"shape=fern": "fern"
+	},
+	redCarpet:{
+		"face=wall": "wallCarpet"
+	}
+}
+
 function objectify(x, y, z, width, height, textureX, textureY, texXFlip,texYFlip,rotateTex,texW,texH,textureName) {
 	return {
 		x: x,
@@ -13638,7 +20858,7 @@
 		rt:rotateTex,
 		tw:texW || width,
 		th:texH || height,
-		t:textureName
+		texture:textureName
 	}
 }
 win.objectify = objectify
@@ -13779,7 +20999,7 @@
 	verts[5].push(customFace(x,h,z+1, x+1,h,z, x+1,0,z, x,0,z+1, 0,4,1,h))
 	return verts
 }
-let shapes = {
+let shapes = {//todo n: remove unused shapes
 	/*
 		[
 			[(-x, -z), (+x, -z), (+x, +z), (-x, +z)], // minX = 0,  minZ = 2,  maxX = 6, maxZ = 8
@@ -17798,7 +25018,7 @@
 	["saveProg",["data","basicString"]],
 	["canSendPos"],
 	["setTags",["x","int"],["y","int"],["z","int"],packetDimension,["data","json"],["lazy","boolean"]],
-	["serverChangeBlock",["x","int"],["y","int"],["z","int"],packetDimension,["place","boolean"],packetFace,["shift","boolean"],["blockMode","uint"],["rotate","uint"],["flip","uint"]],
+	["serverChangeBlock",["x","int"],["y","int"],["z","int"],packetDimension,["place","boolean"],packetFace,["shift","boolean"],["blockMode","uint"],["rotate",...packetFace.slice(1)],["flip","boolean"]],
 	["entityPos",["data","bitArray"]],
 	["entityDelete",["id","basicString"]],
 	["entityPosAll", ["data","array",[null,"bitArray"]]],
@@ -18047,7 +25267,7 @@
 }
 win.bitArrayToPacket = bitArrayToPacket
 
-function initShapes() {
+function initShapes() {//todo n: only do required shapes
 	function mapCoords(rect, face, texWidth,texHeight) {
 		if(rect.custom) return mapCustomCoords(rect, texWidth,texHeight)
 		let x = rect.x
@@ -18089,6 +25309,7 @@
 			tex[5] = th-(tex[5]-ty)+ty
 			tex[7] = th-(tex[7]-ty)+ty
 		}
+		if(rect.texture) tex.texture = rect.texture
 		let pos = null, normal = null
 		switch(face) {
 			case 0: // Bottom
@@ -18364,7 +25585,10 @@
 		}
 	}
 }
+let textures2 = textures
 function initBlockDataShapes(){
+	blockData[0].shape = shapes.none
+	//todo n
 	function makeBlock(tex,shape,Block, base, Name){
 		Block.textures = tex
 		Block.shape = shape
@@ -18610,7 +25834,7 @@
 			}
 		}
 		if(isOn !== shouldBeOn){
-			var t = function(){
+			var t = () => {
 				world.setBlock(x,y,z,target,false,false,false,false)
 				
 				var tblock = world.getBlock(tx,ty,tz)
@@ -18683,7 +25907,7 @@
 		var block = world.getBlock(x,y,z)
 		var tags = {sign:true}
 		var rot = round(player.ry*16/Math.PId)
-		if((block & STAIR) === STAIR) rot = round(rot/4)*4
+		if(!blockData[block].useAsWall) rot = round(rot/4)*4
 		tags.rot = rot
 		world.setTags(x,y,z,tags)
 	}
@@ -18969,135 +26193,39 @@
 			}
 		}
 	}
-
-	const railData = {
-		lastConnectSides: {},
-		isFacing: function(x,y,z,side,setLastConnectSides,world){//are there sides of that rail facing in direction
-			let block = world.getBlock(x,y,z)
-			if(!blockData[block].rail) return false
-			let rot = (block&ROTATION)
-			if((block&isState) === CUBE || (block&isState) === SLAB){
-				if(side === "north" || side === "south"){
-					if(rot === NORTH || rot === SOUTH) return this.lastConnectSides[setLastConnectSides] = true
-				}else{
-					if(rot === EAST || rot === WEST) return this.lastConnectSides[setLastConnectSides] = true
-				}
-			}else{//corner rail
-				if(rot === NORTH){
-					if(side === "south" || side === "west") return this.lastConnectSides[setLastConnectSides] = true
-				}else if(rot === SOUTH){
-					if(side === "north" || side === "east") return this.lastConnectSides[setLastConnectSides] = true
-				}else if(rot === WEST){
-					if(side === "south" || side === "east") return this.lastConnectSides[setLastConnectSides] = true
-				}else if(rot === EAST){
-					if(side === "north" || side === "west") return this.lastConnectSides[setLastConnectSides] = true
-				}
-			}
-			return false
-		},
-		isConnected: function(x,y,z,world){//returns number of sides connected
-			let block = world.getBlock(x,y,z)
-			if(!blockData[block].rail) return
-			let rot = (block&ROTATION)
-			if((block&isState) === CUBE){
-				if(rot === NORTH || rot === SOUTH) return this.isFacing(x,y,z+1,"south","north",world) + this.isFacing(x,y,z-1,"north","south",world)
-				else return this.isFacing(x+1,y,z,"west","east",world) + this.isFacing(x-1,y,z,"east","west",world)
-			}else if((block&isState) === SLAB){
-				if(rot === NORTH) return this.isFacing(x,y+1,z+1,"south","northUp",world) + this.isFacing(x,y,z-1,"north","south",world)
-				else if(rot === SOUTH) return this.isFacing(x,y+1,z-1,"north","southUp",world) + this.isFacing(x,y,z+1,"south","north",world)
-				else if(rot === EAST) return this.isFacing(x+1,y+1,z,"west","eastUp",world) + this.isFacing(x-1,y,z,"east","west",world)
-				else if(rot === WEST) return this.isFacing(x-1,y+1,z,"east","westUp",world) + this.isFacing(x+1,y,z,"west","east",world)
-			}else{//corner rail
-				if(rot === NORTH) return this.isFacing(x,y,z-1,"north","south",world)+this.isFacing(x-1,y,z,"east","west",world)
-				else if(rot === SOUTH) return this.isFacing(x,y,z+1,"south","north",world)+this.isFacing(x+1,y,z,"west","east",world)
-				else if(rot === WEST) return this.isFacing(x,y,z-1,"north","south",world)+this.isFacing(x+1,y,z,"west","east",world)
-				else if(rot === EAST) return this.isFacing(x,y,z+1,"south","north",world)+this.isFacing(x-1,y,z,"east","west",world)
-			}
-		},
-		railonupdate: function(x,y,z,b,world){
-			this.lastConnectSides.north = this.lastConnectSides.south = this.lastConnectSides.east = this.lastConnectSides.west = this.lastConnectSides.northUp = this.lastConnectSides.southUp = this.lastConnectSides.eastUp = this.lastConnectSides.westUp = false
-			if(this.isConnected(x,y,z,world) === 2) return
-			let {north:curConnectNorth, south:curConnectSouth, east:curConnectEast, west:curConnectWest, northUp:curConnectNorthUp, southUp:curConnectSouthUp, eastUp:curConnectEastUp, westUp:curConnectWestUp} = this.lastConnectSides
-			//below: is the other rail available for connecting or already connected to this rail
-			let north = this.isConnected(x,y,z+1,world) < 2 || curConnectNorth,
-				south = this.isConnected(x,y,z-1,world) < 2 || curConnectSouth,
-				east = this.isConnected(x+1,y,z,world) < 2 || curConnectEast,
-				west = this.isConnected(x-1,y,z,world) < 2 || curConnectWest,
-				northUp = this.isConnected(x,y+1,z+1,world) < 2 || curConnectNorthUp,
-				southUp = this.isConnected(x,y+1,z-1,world) < 2 || curConnectSouthUp,
-				eastUp = this.isConnected(x+1,y+1,z,world) < 2 || curConnectEastUp,
-				westUp = this.isConnected(x-1,y+1,z,world) < 2 || curConnectWestUp
-			this.lastConnectSides.north = false
-			north = north || this.isConnected(x,y-1,z+1,world) < 2 || this.lastConnectSides.north
-			this.lastConnectSides.south = false
-			south = south || this.isConnected(x,y-1,z-1,world) < 2 || this.lastConnectSides.south
-			this.lastConnectSides.east = false
-			east = east || this.isConnected(x+1,y-1,z,world) < 2 || this.lastConnectSides.east
-			this.lastConnectSides.west = false
-			west = west || this.isConnected(x-1,y-1,z,world) < 2 || this.lastConnectSides.west
-
-			let target = this.id
-			if(northUp){
-				target |= SLAB | NORTH
-			}else if(eastUp){
-				target |= SLAB | EAST
-			}else if(southUp){
-				target |= SLAB | SOUTH
-			}else if(westUp){
-				target |= SLAB | WEST
-			}else if(this.name === "rail" && north && east){
-				target |= STAIR | SOUTH
-			}else if(this.name === "rail" && east && south){
-				target |= STAIR | WEST
-			}else if(this.name === "rail" && south && west){
-				target |= STAIR | NORTH
-			}else if(this.name === "rail" && west && north){
-				target |= STAIR | EAST
-			}else if(north || south){
-				target |= NORTH
-			}else if(east || west){
-				target |= EAST
-			}else return
-			target |= (b&FLIP)
-			if(b !== target){
-				world.setBlock(x,y,z,target,false,false,false,true)
-			}
-		},
-		onset: function(x,y,z,world){
-			world.updateBlock(x,y+1,z+1,false,false,null,null,null)
-			world.updateBlock(x,y+1,z-1,false,false,null,null,null)
-			world.updateBlock(x+1,y+1,z,false,false,null,null,null)
-			world.updateBlock(x-1,y+1,z,false,false,null,null,null)
-			world.updateBlock(x,y-1,z+1,false,false,null,null,null)
-			world.updateBlock(x,y-1,z-1,false,false,null,null,null)
-			world.updateBlock(x+1,y-1,z,false,false,null,null,null)
-			world.updateBlock(x-1,y-1,z,false,false,null,null,null)
-			if(this.carryRedstone){
-				let power = world.getRedstoneWirePower(x,y,z)
-				let strong = world.getSurroundingBlockPower(x,y,z) === "strong"
-				if(strong) power = 15
-				world.setTagByName(x,y,z,"power",power,false)
-				if(power) world.spreadPower(x,y,z,power)
-			}
-		},
-		ondelete:function(x,y,z,prevTags,prev,world){
-			world.updateBlock(x,y+1,z+1)
-			world.updateBlock(x,y+1,z-1)
-			world.updateBlock(x+1,y+1,z)
-			world.updateBlock(x-1,y+1,z)
-			world.updateBlock(x,y-1,z+1)
-			world.updateBlock(x,y-1,z-1)
-			world.updateBlock(x+1,y-1,z)
-			world.updateBlock(x-1,y-1,z)
-			if(this.carryRedstone){
-				const power = getTagBits(prevTags,"power",this.id)
-				if(power) world.unspreadPower(x,y,z,power)
-			}
-		}
-	}
 	
 	for (let i = 0; i < BLOCK_COUNT; i++) {
 		let baseBlock = blockData[i]
+		if(baseBlock.init){
+			if(typeof baseBlock.init === "string") baseBlock.init = blockData[blockIds[baseBlock.init]].init
+			baseBlock.init()
+		}
+		if(baseBlock.shape) continue//todo n
+
+		if ( !("textures" in baseBlock) ) {
+			baseBlock.textures = new Array(6).fill(baseBlock.name);
+		} else if (typeof baseBlock.textures === "string") {
+			baseBlock.textures = new Array(6).fill(baseBlock.textures);
+		} else {
+			const { textures } = baseBlock;
+
+			if (textures.length === 3) {
+				textures[3] = textures[2];
+				textures[4] = textures[2];
+				textures[5] = textures[2];
+			} else if (textures.length === 2) {
+				// Top and bottom are the first texture, sides are the second.
+				textures[2] = textures[1];
+				textures[3] = textures[2];
+				textures[4] = textures[2];
+				textures[5] = textures[2];
+				textures[1] = textures[0];
+			}else if(textures.length === 4){
+        textures[4] = textures[5] = textures[3]
+        textures[3] = textures[2]
+      }
+		}
+
 		if(baseBlock.item && baseBlock.name !== "bow"){
 			if(baseBlock.spyglass) baseBlock.shape = shapes.spyglass
 			else baseBlock.shape = shapes.item
@@ -19140,7 +26268,7 @@
 		stairBlock.transparent = true
 		stairBlock.drop = d || (i | STAIR)
 		stairBlock.Name += " Stair"
-		crossBlock.shape = shapes.cross
+		crossBlock.shape = shapes.cross//todo n
 		crossBlock.drop = drop
 		tallcrossBlock.shape = shapes.tallCross
 		tallcrossBlock.drop = drop
@@ -19187,9 +26315,6 @@
 		verticalSlabBlock.transparent = true
 		verticalSlabBlock.drop = d || (i | VERTICALSLAB)
 		verticalSlabBlock.Name += " Vertical Slab"
-		if(baseBlock.torch || baseBlock.chain){
-			slabBlock.drop = i
-		}
 		if(baseBlock.door){
 			var onclick = baseBlock.name === "ironDoor" ? emptyFunc : function(x,y,z,world){
 				this.toggle(x,y,z,world)
@@ -19279,7 +26404,7 @@
 			doorBlock.shadow = false
 			doorBlock.dropAmount = 8
 		}
-		if(baseBlock.liquid){
+		if(baseBlock.liquid){//todo n: 2 types of water and lava (flowing, still)
 			Object.assign(baseBlock,liquidData)
 			baseBlock.shape = shapes.liquidLayer8
 			torchBlock.shape = shapes.liquidLayer1
@@ -20114,139 +27239,6 @@
 	}
 }
 
-let CUBE,SLAB,STAIR,CROSS,TALLCROSS,DOOR,TORCH,LANTERN,LANTERNHANG,BEACON,
-		CACTUS,PANE,PORTAL,WALLFLAT,TRAPDOOR,TRAPDOOROPEN,FENCE,WALLPOST,
-		BUTTON,CHAIN,POT,POTCROSS,CORNERSTAIRIN,CORNERSTAIROUT,VERTICALSLAB,
-		//if you change this, change debugStick and server side
-		LAYER1,LAYER2,LAYER3,LAYER4,LAYER5,LAYER6,LAYER7,LAYER8,
-		FLIP,NORTH,SOUTH,EAST,WEST,ROTATION// Mask for the direction bits
-let isCube, isState
-let prevConstVersion = null
-
-function verMoreThan(a,b){
-	a = a.split(".").map(r => parseInt(r))
-	b = b.split(".").map(r => parseInt(r))
-	if(a[0] > b[0]) return true
-	if(a[1] > b[1] && a[0] === b[0]) return true
-	if(a[2] > b[2] && a[1] === b[1]) return true
-}
-function bin(n){
-	return parseInt(n,2)
-}
-function constVersion(v){
-	if(v === prevConstVersion) return
-	prevConstVersion = v
-	isCube = 0xff
-	//let verNum = v.replace(/(Alpha|Beta) /, '')//.replace(/(?<=\..*)\./g, '') //second regex removes the periods after the first
-	//if(verMoreThan(verNum, "1.0.3") || verNum==="1.0.3"){
-CUBE = 0
-LAYER2=SLAB =          0b10000000000000 // 9th bit
-LAYER3=STAIR =        0b100000000000000 // 10th bit
-LAYER4=CROSS =        0b110000000000000
-LAYER5=TALLCROSS =0b1001110000000000000
-LAYER6=LANTERN =    0b10010000000000000
-LAYER7=LANTERNHANG=0b100010000000000000
-BEACON =           0b100110000000000000
-CACTUS =           0b101000000000000000
-POT =              0b101010000000000000
-POTCROSS =         0b101110000000000000
-LAYER1 = TORCH =   0b110000000000000000
-CHAIN =            0b110010000000000000
-LAYER8 = DOOR =   0b1000010000000000000
-PORTAL =          0b1000100000000000000
-WALLFLAT =        0b1000110000000000000
-PANE =           0b10001000000000000000
-TRAPDOOR =        0b1010000000000000000
-TRAPDOOROPEN =   0b10000000000000000000
-FENCE =          0b11000000000000000000
-WALLPOST =       0b11000100000000000000
-//WALL = 0x6400<<5
-//WALLU = 0x6600<<5 //wall withe exteion under another wall
-//FENCQ = 0x4100<<5 //fence (one extension)
-BUTTON =         0b10000100000000000000
-//CARPET    =      0b10000110000000000000
-CORNERSTAIRIN =      0b1000000000000000
-CORNERSTAIROUT =     0b1010000000000000
-VERTICALSLAB =       0b1100000000000000
-FLIP      =               0b10000000000 // 11th bit
-NORTH = 0 // 12th and 13th bits for the 4 directions
-SOUTH =                  0b100000000000
-EAST =                  0b1000000000000
-WEST =                  0b1100000000000
-ROTATION =              0b1100000000000 // Mask for the direction bits
-isCube =                   0b1111111111 // Mask for block id bits
-isState =        0b11111110000000000000
-	/*}else if(verMoreThan(verNum, "1.0.0") || verNum === "1.0.0"){
-CUBE = 0
-LAYER2 = SLAB = 0x100 // 9th bit
-LAYER3 = STAIR = 0x200 // 10th bit
-LAYER4 = CROSS = 0x300
-FLIP = 0x400 // 11th bit
-LAYER5 = TALLCROSS = 0x700
-LAYER6 = LANTERN = 0x900
-LAYER7 = LANTERNHANG=0x1100
-BEACON = 0x1300
-CACTUS = 0x1400
-POT = 0x1500
-POTCROSS = 0x1700
-LAYER1 = TORCH = 0x1800
-CHAIN = 0x1900
-LAYER8 = DOOR = 0x2100
-PORTAL = 0x2200
-WALLFLAT = 0x2300
-PANE = 0x4400
-TRAPDOOR = 0x2800
-TRAPDOOROPEN=0x4000
-FENCE = 0x6000
-WALLPOST = 0x6200
-//WALL = 0x6400
-//WALLU = 0x6600 //wall withe exteion under another wall
-//FENCQ = 0x4100 //fence (one extension)
-BUTTON = 0x4200
-CARPET    = 0x4300
-FLIP      = 0x400 // 11th bit
-NORTH = 0 // 12th and 13th bits for the 4 directions
-SOUTH = 0x800
-EAST = 0x1000
-WEST = 0x1800
-ROTATION = 0x1800 // Mask for the direction bits
-	}else{
-		CUBE      = 0
-		LAYER2 = SLAB      = 0x100 // 9th bit
-		LAYER3 = STAIR     = 0x200 // 10th bit
-		LAYER4 = CROSS     = 0x2000
-		LAYER5 = TALLCROSS = 0x2200
-		LAYER8 = DOOR      = 0x2400
-		LAYER1 = TORCH     = 0x2600
-		LAYER6 = LANTERN   = 0x2800
-		LAYER7 = LANTERNHANG=0x3000
-		BEACON    = 0x4200
-		CACTUS    = 0x4400
-		PANE      = 0x4600
-		PORTAL    = 0x5000
-		WALLFLAT  = 0x4800
-		TRAPDOOR  = 0x5200
-		TRAPDOOROPEN=0x5400
-		FENCE     = 0x6000
-		WALLPOST  = 0x6200
-		//WALL      = 0x6400
-		//WALLU     = 0x6600 //wall withe exteion under another wall
-		//FENCQ     = 0x6800 //fence (one extension)
-		BUTTON    = 0x7000
-		CHAIN     = 0x7200
-		POT       = 0x8000
-		POTCROSS  = 0x8200
-		CARPET    = 0x8400
-		FLIP      = 0x400 // 11th bit
-		NORTH     = 0 // 12th and 13th bits for the 4 directions
-		SOUTH     = 0x800
-		EAST      = 0x1000
-		WEST      = 0x1800
-		ROTATION  = 0x1800 // Mask for the direction bits
-	}*/
-}
-constVersion(version)
-
 {//Commands
 let copiedBlocks
 function fillBlocks(x,y,z,x2,y2,z2, blockID,world){
@@ -21198,7 +28190,9 @@
 		this.vely += (this.vely * drag - this.vely)
 	}
 	collided(x, y, z, vx, vy, vz, block) {
-		let verts = blockData[block].shape.verts
+		let shape = blockData[block].shape
+    if(shape.hitbox) shape = shape.hitbox
+		let verts = shape.verts
 		let px = this.x - this.width / 2 - x
 		let py = this.y - this.height / 2 - y
 		let pz = this.z - this.depth / 2 - z
@@ -21544,6 +28538,7 @@
 		this.y = y
 		this.z = z
 	}
+	serverUpdate(){}
 	update() {
 		this.updateVelocity(now)
 		this.move(now)
@@ -21617,6 +28612,7 @@
 		}
 	}
 }
+win.serverEntity = Entity
 
 const
 	pW = 0.3,
@@ -22406,877 +29402,23 @@
 		if(this.connection) this.connection.send({type:"damage",x,y,z,lastHealth:prevHealth,velx,vely,velz})
   }
 }
-entities[entities.length] = class Item extends Entity {
-	static name2 = "Item"
-	constructor(x, y, z, velx, vely, velz, blockID, autoSetVel, amount, durability = null, name = null, from) {
-		super(x, y, z, 0, 0, velx, vely, velz, 0.25, 0.25, 0.25, null, null, 0, 300000/*1500000*/)
-		this.block = blockID
-		this.from = from || undefined
-		this.durability = durability
-		this.name = name
-		this.amount = amount || 1
-		this.gravityStength = -0.07
-		this.noHitbox = true
-		this.canFloat = true
-		this.cullFace = true
-		
-		if(autoSetVel){
-			this.velx = (Math.random()-0.5) * 0.2
-			this.vely = Math.random() * 0.2
-			this.velz = (Math.random()-0.5) * 0.2
-		}
-	}
-	goCloserToPlayer(e){
-		let xDist = this.x - e.x
-		let yDist = this.y - (e.y - e.height/2)
-		let zDist = this.z - e.z
-		var hRange = 1.425
-		let comeCloser = xDist > -hRange && xDist < hRange && yDist > -0.75 && yDist < 2.3 && zDist > -hRange && zDist < hRange
-		if(comeCloser){
-			this.moveTowards(e.x, Math.min(Math.max(this.y, e.y - e.height*0.5),e.y+e.height*0.5), e.z, hRange,2.3,hRange, 3)
-		}
-		/*if(pickup){
-			var dist = dist3(this.x, this.y, this.z, p.x, p.y, p.z)
-			var dist2 = dist3(this.x, this.y, this.z, p.x, p.y-1, p.z)
-			pickup = ((1 >= dist) && (dist >= -1)) || ((1 >= dist2) && (dist2 >= -1))
-		}*/
-		let w = e.width*0.5
-		return xDist > -w && xDist < w && yDist > 0 && yDist < e.height && zDist > -w && zDist < w
-	}
-	update() {
-		this.updateVelocity(now)
-		this.move(now)
-		
-		if(this.amount <= 0){
-			return this.canDespawn = true
-		}
-		this.yaw += 0.05;
-		if(this.yaw > Math.PId){
-			this.yaw -= Math.PId
-			this.previousYaw -= Math.PId
-		}
-		
-		let pickup
-		if(now - this.spawn > 1000){
-			for(var P of this.world.world.players){
-				if(!P.hidden && !P.die && P.dimension === this.dimension){
-					if(this.goCloserToPlayer(P)) pickup = P
-				}
-			}
-		}
-		
-		let d = 3/4
-		var stackSize = blockData[this.block].stackSize
-		var c = false
-		this.world.getEntitiesNear(this.x,this.y,this.z, 1, nearEntityArray)
-		for(var e of nearEntityArray){
-			if(e.type === "Item" && e !== this && e.block === this.block && (!e.name && !this.name || e.name === this.name) && e.amount + this.amount <= stackSize){
-				var xDist = this.x - e.x
-				var yDist = this.y - e.y
-				var zDist = this.z - e.z
-				let stack = xDist > -d && xDist < d && yDist > -d && yDist < d && zDist > -d && zDist < d
-				if(stack){
-					this.amount += e.amount
-					e.amount = 0
-					this.velx = (this.velx+e.velx)/2
-					this.vely = (this.vely+e.vely)/2
-					this.velz = (this.velz+e.velz)/2
-					this.x = (this.x+e.x)/2
-					this.y = (this.y+e.y)/2
-					this.z = (this.z+e.z)/2
-					c = true
-				}
-			}
-		}
-		//if(c) this.world.sendAll({type:"entEvent",event:"itemAmount",data:this.amount,id:this.id})
-		if(c) this.world.sendEntityPos(this)
-		
-		if(pickup){
-			let pickuped = false
-			while(this.amount > 0 && newInvItem(pickup, this.block, this.durability, this.name)){
-				this.amount--
-				pickuped = true
-			}
-			if(pickuped){
-				if(blockData[this.block].log){
-					pickup.addAchievment("Getting Wood")
-				}else if(this.block === blockIds.diamond){
-					pickup.addAchievment("DIAMONDS!")
-				}else if(this.block === blockIds.ancientDebris){
-					pickup.addAchievment("Hidden In The Depths")
-				}else if(this.block === blockIds.diamond && this.from !== p.id){
-					//that achivement
-					let from = getPlayerById(this.from)
-					if(from) from.addAchievment("Diamonds to you!")
-				}else if(this.block === blockIds.tomatoSeeds){
-					pickup.addAchievment("Time to plant tomatoes!")
-				}
-				pickup.addDiscovery(this.block)
-				let pitch = rand(0.6, 1.5)
-				this.world.playSound(this.x,this.y,this.z,"random.plop",1,pitch)
-				this.world.sendEntityPos(this)//send({type:"entEvent",event:"itemAmount",data:this.amount,id:this.id})
-			}
-		}
-		if (now - this.spawn > this.despawns) {
-			this.canDespawn = true
-		}
-		if(!this.amount){
-			this.canDespawn = true
-		}
-		if(this.insideBlock && blockData[this.insideBlock].itemOnTop || this.standingOn && blockData[this.standingOn].itemOnTop){
-			var inside = this.insideBlock && blockData[this.insideBlock].itemOnTop
-			var block = inside ? this.insideBlock : this.standingOn
-			var y = inside ? round(this.y) : ceil(this.y-this.height/2)-1
-			var amount = blockData[block].itemOnTop(round(this.x),y,round(this.z),this)
-			if(amount){
-				this.amount = amount
-				this.willUpdateShape = true
-				//this.world.sendAll({type:"entEvent",event:"itemAmount",data:this.amount,id:this.id})
-				this.world.sendEntityPos(this)
-			}else if(amount === 0) this.canDespawn = true
-		}
-	}
-}
-let BlockEntity = entities[entities.length] = class BlockEntity extends Entity{
-	static name2 = "BlockEntity"
-	constructor(blockID, x,y,z, solidOnGround){
-		super(x, y, z, 0, 0, 0, 0, 0, 1, 1, 1, null, null, null, 1500000)
-		this.block = blockID
-		this.solidOnGround = solidOnGround
-		this.lastY = y
-		this.noHitbox = true
-		this.cullFace = true
-	}
-	changeBlock(blockID){
-		if(this.block === blockID) return
-		this.block = blockID
-	}
-	update() {
-		this.updateVelocity(now)
-		this.move(now)
-		if (now - this.spawn > this.despawns) {
-			this.canDespawn = true
-		}
-		
-		if(this.onGround && this.solidOnGround){
-			var x = round(this.x), y = round(this.y), z = round(this.z)
-			var b = this.world.getBlock(x, y, z, this.dimension)
-			if(b && !blockData[b].liquid){
-				// non cube block breaks falling blocks
-				this.world.addItems(x,y,z, 0,0,0, this.block)
-			}else{
-				this.world.setBlock(x,y,z, this.block,false,false,false,false,this.dimension)
-				this.world.blockSound(this.block, "land", x,y,z)
-			}
-			this.canDespawn = true
-		}
-		
-		if(blockData[this.block].name === "anvil" || blockData[this.block].name === "pointedDripstone"){
-			var ent = entCollided(this)
-			var d
-			if(blockData[this.block].name === "pointedDripstone") d = min(max((this.lastY - this.y - 2) * 2, 0), 40)
-			else if(blockData[this.block].name === "anvil") d = min(max((this.lastY - this.y - 1) * 2, 0), 40)
-			if(entPlayerCollided){
-				var reason
-				if(blockData[this.block].name === "pointedDripstone") reason = ent.username+" got poked to death by a falling pointed dripstone"
-				else if(blockData[this.block].name === "anvil") reason = ent.username+" got hit by an anvil and stuff"
-				ent.damage(d,reason,false,null,this.previousX,this.previousY,this.previousZ)
-			}else if(ent && ent.damage){
-				ent.damage(d)
-			}
-			if(blockData[this.block].name === "pointedDripstone" && this.onGround){
-				var b = blockIds.pointedDripstone
-				this.world.addItems(this.x,this.y,this.z,0,0,0,b,true)
-				this.world.blockParticles(b,this.x,this.y,this.z,30, "break")
-				this.canDespawn = true
-			}
-		}
-	}
-}
-
-let PrimedTNT = entities[entities.length] = class PrimedTNT extends BlockEntity{
-	static name2 = "PrimedTNT"
-	constructor(x,y,z, timerStart, tntBlockId = blockIds.tnt){
-		super(tntBlockId, x,y,z)
-		this.velx = (Math.random() * 0.1) - 0.05
-		this.vely = Math.random() * 0.1
-		this.velz = (Math.random() * 0.1) - 0.05
-		
-		this.timerStart = timerStart || this.spawn
-		this.lastCollidedY = this.timerStart
-		this.timeLimit = 80
-		
-		this.tntBlockId = tntBlockId
-	}
-	explode(){
-		var x = round(this.x), y = round(this.y), z = round(this.z)
-		this.world.explode(x,y,z,4, this.liquid || !this.world.world.settings.tntExplode, this.dimension)
-	}
-	update() {
-		this.updateVelocity(now)
-		this.move(now)
-		
-		if(this.onGround){
-			this.lastCollidedY = this.y
-		}
-		var h = this.y - this.lastCollidedY
-		if(h > 19.75){
-			this.lastCollidedY = this.y
-			this.timerStart -= 1000
-		}
-		
-		if((now - this.spawn) / tickTime >= this.timeLimit){
-			this.canDespawn = true
-			this.explode()
-		}
-	}
-}
-entities[entities.length] = class PrimedSuperTNT extends PrimedTNT{
-	static name2 = "PrimedSuperTNT"
-	constructor(x,y,z, timerStart){
-		super(x,y,z, timerStart, blockIds.tnt | SLAB)
-	}
-	explode(){
-		var x = round(this.x), y = round(this.y), z = round(this.z)
-		this.world.explode(x,y,z,8, blockData[this.world.getBlock(x,y,z)].liquid || !this.world.world.settings.tntExplode, this.dimension)
-	}
-}
-entities[entities.length] = class PrimedUltraTNT extends PrimedTNT{
-	static name2 = "PrimedUltraTNT"
-	constructor(x,y,z, timerStart){
-		super(x,y,z, timerStart, blockIds.tnt | STAIR)
-	}
-	explode(){
-		var x = round(this.x), y = round(this.y), z = round(this.z)
-		this.world.explode(x,y,z,24, blockData[this.world.getBlock(x,y,z)].liquid || !this.world.world.settings.tntExplode, this.dimension)
-	}
-}
-entities[entities.length] = class PrimedUnTNT extends PrimedTNT{
-	static name2 = "PrimedUnTNT"
-	constructor(x,y,z, timerStart){
-		super(x,y,z, timerStart, blockIds.untnt)
-	}
-	explode(){
-		var x = round(this.x), y = round(this.y), z = round(this.z)
-		this.world.explode(x,y,z,5, blockData[this.world.getBlock(x,y,z)].liquid || !this.world.world.settings.tntExplode || "original", this.dimension)
-	}
-}
-entities[entities.length] = class MovingBlock extends BlockEntity{
-	static name2 = "MovingBlock"
-	noRemoteDelete = true
-	constructor(block,x,y,z,mx,my,mz,despawns, solidWhenDone = false, tags = null){
-		super(block, x,y,z)
-		this.sx = x //s stands for start
-		this.sy = y
-		this.sz = z
-		this.mx = mx //m stands for end
-		this.my = my
-		this.mz = mz
-		this.despawns = despawns //also tells how much time for it to move
-		this.solidWhenDone = solidWhenDone
-		this.tags = tags
-		this.canStandOn = true
-		this.endAs = null
-	}
-	update() {
-		if (this.lastUpdate - this.spawn >= this.despawns) {
-			this.canDespawn = true
-			if(this.solidWhenDone){
-				this.x = this.mx
-				this.y = this.my
-				this.z = this.mz
-				this.world.setBlock(round(this.x),round(this.y),round(this.z),this.endAs || this.block, false,false,false,false, this.dimension)
-				if(this.tags) this.world.setTags(round(this.x),round(this.y),round(this.z), this.tags)
-			}
-		}
-		
-		this.previousX = this.x
-		this.previousY = this.y
-		this.previousZ = this.z
-		this.lastUpdate = now
-		
-		var prog = min((now - this.spawn) / this.despawns, 1)
-		this.x = lerp(prog, this.sx, this.mx)
-		this.y = lerp(prog, this.sy, this.my)
-		this.z = lerp(prog, this.sz, this.mz)
-		
-		this.velx = this.x - this.previousX
-		this.vely = this.y - this.previousY
-		this.velz = this.z - this.previousZ
-	}
-}
-entities[entities.length] = class BlockDisplay extends BlockEntity{
-	static name2 = "BlockDisplay"
-	constructor(block,x,y,z,w,h,d){
-		super(block, x,y,z, w,h,d)
-		this.width = w
-		this.height = h
-		this.depth = d
-	}
-	update() {}
-}
-entities[entities.length] = class EnderPearl extends BlockEntity{
-	static name2 = "EnderPearl"
-	constructor(x,y,z,velx,vely,velz,from){
-		super(blockIds.enderPearl, x,y,z)
-		this.velx = velx
-		this.vely = vely
-		this.velz = velz
-		this.from = from
-		this.facesPlayer = true
-		
-		this.gravityStength = -0.04
-	}
-	update() {
-		this.updateVelocity(now)
-		this.move(now)
-		if (now - this.spawn > this.despawns) {
-			this.canDespawn = true
-		}
-		if(this.hasCollided){
-			if(this.from){
-				let p = getPlayerById(this.from,this.world)
-				if(p){
-					p.tp(this.x,this.y+1,this.z,this.dimension)
-					this.canDespawn = true
-				}
-			}else this.canDespawn = true
-		}
-		
-		this.canFacePlayer = true
-	}
-}
-
-entities[entities.length] = class Snowball extends BlockEntity{
-	static name2 = "Snowball"
-	constructor(x,y,z,velx,vely,velz,from){
-		super(blockIds.snowball, x,y,z)
-		this.velx = velx
-		this.vely = vely
-		this.velz = velz
-		this.from = from
-		this.facesPlayer = true
-		
-		this.gravityStength = -0.04
-	}
-	update() {
-		this.updateVelocity(now)
-		this.move(now)
-		if(now - this.spawn > 250){
-			var collided = entCollided(this)
-			let from = getEntityOrPlayer(this.from,this.world)
-			from = from && (from.username || from.name)
-			if(collided && collided !== this){
-				if(entPlayerCollided){
-					collided.damage(1,from+" killed "+collided.username+" with snowballs.",false,null,this.previousX,this.previousY,this.previousZ)
-				}else{
-					if(collided.damage) collided.onhit(1,false, 0,0, this.from)
-				}
-				this.canDespawn = true
-			}
-		}
-		if (now - this.spawn > this.despawns || this.hasCollided) {
-			this.canDespawn = true
-		}
-		if(this.canDespawn) this.world.blockParticles(this.block,this.x,this.y,this.z,30, "break")
-		
-		this.canFacePlayer = true
-	}
-}
-entities[entities.length] = class SmallFireball extends BlockEntity{
-	static name2 = "SmallFireball"
-	constructor(x,y,z,velx,vely,velz,from){
-		super(blockIds.fireCharge, x,y,z)
-		this.width = this.height = this.depth = 0.3125
-		this.velx = velx
-		this.vely = vely
-		this.velz = velz
-		this.from = from
-		this.facesPlayer = true
-		
-		this.gravityStength = -0.07
-	}
-	update() {
-		this.updateVelocity(now)
-		this.move(now)
-		if(now - this.spawn > 250){
-			var collided = entCollided(this)
-			let from = getEntityOrPlayer(this.from,this.world)
-			from = from && (from.username || from.name)
-			if(collided && collided !== this){
-				if(entPlayerCollided){
-					collided.burnTimer += 8
-					collided.damage(5,collided.username+" was shot by fireballs from "+from+".",false,null,this.previousX,this.previousY,this.previousZ)
-				}else{
-					if(collided.damage) collided.onhit(5,false, 0,0, this.from), collided.burnTimer += 8
-				}
-				this.canDespawn = true
-			}
-		}
-		if (now - this.spawn > this.despawns || this.hasCollided) {
-			this.canDespawn = true
-			if(this.hasCollided) this.world.setBlock(round(this.x),round(this.y),round(this.z),blockIds.fire,false,false,false,false,this.dimension)
-		}
-		if(this.canDespawn) this.world.blockParticles(this.block,this.x,this.y,this.z,30, "break")
-		
-		this.canFacePlayer = true
-	}
-}
-
-entities[entities.length] = class Egg extends BlockEntity{
-	static name2 = "Egg"
-	constructor(x,y,z,velx,vely,velz,from){
-		super(blockIds.egg, x,y,z)
-		this.velx = velx
-		this.vely = vely
-		this.velz = velz
-		this.from = from
-		this.facesPlayer = true
-		
-		this.gravityStength = -0.07
-	}
-	update() {
-		this.updateVelocity(now)
-		this.move(now)
-		var collided = entCollided(this)
-		let from = getEntityOrPlayer(this.from,this.world)
-		from = from && (from.username || from.name)
-		if(collided && collided !== this){
-			if(entPlayerCollided) collided.damage(1,from+" killed "+collided.username+" with eggs.",false,null,this.previousX,this.previousY,this.previousZ)
-			else if(collided.damage) collided.onhit(1,false, 0,0, this.from)
-			this.canDespawn = true
-		}
-		if (now - this.spawn > this.despawns || this.hasCollided) {
-			this.canDespawn = true
-		}
-		if(this.canDespawn){
-			this.world.blockParticles(this.block,this.x,this.y,this.z,30, "break")
-			if(rand() > 0.9) this.world.addEntity(new entities[entityIds.Chicken](this.x,this.y,this.z))
-		}
-		
-		this.canFacePlayer = true
-	}
-}
-entities[entities.length] = class SlingshotShot extends BlockEntity{
-	static name2 = "SlingshotShot"
-	constructor(x,y,z,velx,vely,velz){
-		super(blockIds.ironNugget, x,y,z)
-		this.velx = velx
-		this.vely = vely
-		this.velz = velz
-		this.despawns = 10000
-		this.facesPlayer = true
-		this.gravityStength = -0.02
-	}
-	update() {
-		this.updateVelocity(now)
-		this.move(now)
-		if (now - this.spawn > this.despawns && this.onGround) {
-			this.canDespawn = true
-			//world.addEntity(new Item(this.x,this.y,this.z,0,0,0,blockIds.ironNugget))
-		}
-		
-		var collided = entCollided(this)
-		if(collided){
-			if(entPlayerCollided) collided.damage(5,collided.username+" got killed by a slingshot.",false,null,this.previousX,this.previousY,this.previousZ)
-			else if(collided.damage) collided.damage(5)
-			this.canDespawn = true
-		}
-		
-		this.canFacePlayer = true
-	}
-	move(now) {
-		let pminX = floor(this.x - this.width / 2)
-		let pmaxX = ceil(this.x + this.width / 2)
-		let pminY = floor(this.y - this.height / 2)
-		let pmaxY = ceil(this.y + this.height / 2)
-		let pminZ = floor(this.z - this.depth / 2)
-		let pmaxZ = ceil(this.z + this.depth / 2)
-		let block = null
-
-		this.liquid = false
-		for (let x = pminX; x <= pmaxX; x++) {
-			for (let y = pminY; y <= pmaxY; y++) {
-				for (let z = pminZ; z <= pmaxZ; z++) {
-					let block = this.world.getBlock(x, y, z, this.dimension)
-					if (block && blockData[block].solid) {
-						this.contacts.add(x, y, z, block)
-					}
-					if(x === round(this.x) && z === round(this.z) && blockData[block].liquid){
-						this.liquid = true
-					}
-				}
-			}
-		}
-
-		this.previousX = this.x
-		this.previousY = this.y
-		this.previousZ = this.z
-
-		var xBounce, yBounce, zBounce, pvelx = this.velx, pvely = this.vely, pvelz = this.velz
-		
-		this.canStepX = false
-		this.canStepY = false
-		this.onGround = false
-		this.hasCollided = false
-		//Check collisions in the Y direction
-		this.y += this.vely
-		for (let i = 0; i < this.contacts.size; i++) {
-			block = this.contacts.array[i]
-			if (this.collided(block[0], block[1], block[2], null, this.vely, null, block[3])) {
-				this.y = this.previousY
-				this.vely = 0
-				this.hasCollided = true
-				yBounce = true
-				break
-			}
-		}
-
-		if (this.y === this.previousY) {
-			this.canStepX = true
-			this.canStepZ = true
-		}
-
-		//Check collisions in the X direction
-		this.x += this.velx
-		for (let i = 0; i < this.contacts.size; i++) {
-			block = this.contacts.array[i]
-			if (this.collided(block[0], block[1], block[2], this.velx, null, null, block[3])) {
-				if (this.canStepX && !this.world.getBlock(block[0], block[1] + 1, block[2], this.dimension) && !this.world.getBlock(block[0], block[1] + 2, block[2], this.dimension)) {
-					continue
-				}
-				this.x = this.previousX
-				this.velx = 0
-				this.hasCollided = true
-				xBounce = true
-				break
-			}
-		}
-
-		//Check collisions in the Z direction
-		this.z += this.velz
-		for (let i = 0; i < this.contacts.size; i++) {
-			block = this.contacts.array[i]
-			if (this.collided(block[0], block[1], block[2], null, null, this.velz, block[3])) {
-				if (this.canStepZ && !this.world.getBlock(block[0], block[1] + 1, block[2], this.dimension) && !this.world.getBlock(block[0], block[1] + 2, block[2]), this.dimension) {
-					continue
-				}
-				this.z = this.previousZ
-				this.velz = 0
-				this.hasCollided = true
-				zBounce = true
-				break
-			}
-		}
-		
-		if(this.onGround){
-			this.hasCollided = true
-		}
-		
-		if(xBounce) this.velx = -pvelx
-		if(yBounce) this.vely = -pvely
-		if(zBounce) this.velz = -pvelz
-
-		this.updateChunk()
-
-		this.lastUpdate = now
-		this.contacts.clear()
-	}
-}
-
-entities[entities.length] = class Arrow extends Entity{
-	static name2 = "Arrow"
-	constructor(x,y,z,dx,dy,dz, from){
-		super(x, y, z, 0, 0, dx, dy, dz, 0.25, 0.25, 0.25, null, null, null, 60000)
-		this.direction = new PVector(dx,dy,dz)
-		this.stopStart = this.spawn
-		this.hasStopped = false
-		this.noHitbox = true
-		this.from = from
-	}
-	updateVelocity(now) {
-		this.vely += -0.005
-		let drag = this.liquid ? 0.7 : 0.99
-		if(blockData[this.standingOn].slide) drag = blockData[this.standingOn].slide
-		this.velz += (this.velz * drag - this.velz)
-		this.velx += (this.velx * drag - this.velx)
-		this.vely += (this.vely * drag - this.vely)
-	}
-	update(){
-		let pvelx = this.velx
-		let pvely = this.vely
-		let pvelz = this.velz
-		this.updateVelocity(now)
-		this.move(now)
-		if(this.hasCollided){
-			this.x = this.previousX
-			this.y = this.previousY
-			this.z = this.previousZ
-			this.velx = pvelx
-			this.vely = pvely
-			this.velz = pvelz
-		}
-		if(this.hasCollided && !this.hasStopped){
-			this.hasStopped = true
-			this.stopStart = now
-			this.direction.x = this.velx
-			this.direction.y = this.vely
-			this.direction.z = this.velz
-			this.direction.normalize()
-			var x = round(this.x+this.direction.x)
-			var y = round(this.y+this.direction.y)
-			var z = round(this.z+this.direction.z)
-			var block = this.world.getBlock(x,y,z,this.dimension)
-			if(block && blockData[block].projectileHit){
-				blockData[block].projectileHit(x,y,z,this)
-			}
-		}
-		if (now - this.stopStart > this.despawns) {
-			this.canDespawn = true
-		}
-		if(!this.hasCollided){
-			let collided = entCollided(this)
-			let from = getEntityOrPlayer(this.from,this.world)
-			from = from && (from.username || from.name)
-			let d = dist3(this.velx,this.vely,this.velz,0,0,0)*4
-			if(collided && collided !== this){
-				this.canDespawn = true
-				if(entPlayerCollided) collided.damage(d,collided.username+" got killed by an arrow"+(from ? " from "+from+"." : "."),false,null,this.previousX,this.previousY,this.previousZ,null, this.velx/2, undefined,this.velz/2)
-				else if(collided.onhit) collided.onhit(d,false, this.velx/2,this.velz/2, this.from)
-				else this.canDespawn = false
-			}
-		}else{
-			let collided = entCollided(this)
-			if(entPlayerCollided && !collided.spectator && newInvItem(collided,blockIds.arrow)) this.canDespawn = true
-		}
-		
-		this.yaw = Math.PId - (atan2(this.velz, this.velx) + Math.PI2 + Math.PI)
-		var adjacent = sqrt(this.velx*this.velx+this.velz*this.velz)
-		this.pitch = Math.PId - atan2(this.vely, adjacent)
-	}
-}
-entities[entities.length] = class ExperienceOrb extends Entity{
-	static name2 = "ExperienceOrb"
-	constructor(x,y,z,value){
-		super(x, y, z, 0, 0, 0, 0, 0, 0.5, 0.5, 0.5, null, null, null, 300000)
-		this.amount = value
-		this.noHitbox = true
-		this.facesPlayer = true
-	}
-	goToPlayer(e){
-		var dist = dist3(this.x,this.y,this.z,e.x,e.y-e.height*0.5,e.z)
-		if(dist < 7.25){
-			////var speed = (7.25 - dist) / 10
-			//var aDist = abs(dist)
-			//var xd = this.x - p.x, zd = this.z - p.z;
-			//var x = xd/*/abs(zd)*/; this.velx = (x-(Math.sign(x)*7.25)) / 150//; this.velx = -this.velx
-			//if(this.onGround) {var y = this.y - (p.y-p.bottomH); this.vely = (y-(Math.sign(y)*7.25)) / 40/*; this.vely = -this.vely*/}
-			//var z = zd/*/abs(xd)*/; this.velz = (z-(Math.sign(z)*7.25)) / 150//; this.velx = -this.velx
-			this.moveTowards(e.x, e.y-e.height*0.5, e.z, 7.25,7.25,7.25, 5, true)
-		}
-		return dist < 0.5
-	}
-	update(){
-		let pickup
-		for(let p of this.world.world.players){
-			if(!p.hidden && !p.die && p.dimension === this.dimension){
-				if(this.goToPlayer(p)) pickup = p
-			}
-		}
-		
-		this.updateVelocity(now)
-		this.move(now)
-		if(pickup){
-			if(now - pickup.lastXP >= 100){
-				pickup.addXP(this.amount)
-				this.canDespawn = true
-			}
-		}
-		if (now - this.spawn > this.despawns) {
-			this.canDespawn = true
-		}
-	}
-}
-entities[entities.length] = class Minecart extends Entity{
-	static name2 = "Minecart"
-	pushes = true
-	constructor(x,y,z){
-		super(x, y, z, 0, 0, 0, 0, 0, 0.98, 1, 0.98, null, null, 0, Infinity)
-		this.heightOnDiagonal = 1-this.width
-		this.defaultHeight = this.height
-		this.health = 6
-		this.prevOnTrack = false
-		this.rideOffsetY = -6/16
-		this.canRide = true
-	}
-	onclick(holding,p){
-		p.riding = this.id
-		p.connection.send({type:"sit",riding:p.riding})
-		return true
-	}
-	updateVelocity(now) {
-		this.standingOn = this.world.getBlock(round(this.x), floor(this.y-this.height/2), round(this.z), this.dimension)
-		if(this.prevLiquid !== this.liquid){
-			this.prevLiquid = this.liquid
-			if(this.liquid && this.wet){
-				let pitch = (1/abs(this.y-this.previousY)*0.05+Math.random()*0.2)/((this.width+this.depth)*0.25/*0.25=average&correct width*/)
-				if(isFinite(pitch)) this.world.playSound(this.x,this.y-this.height/2,this.z,"liquid.splash",1,pitch)
-				this.world.sendAll({
-          type:"particles", particleType:"SplashParticle",
-          x:this.x, y:this.y-this.height/2, z:this.z, dimension:this.dimension, amount: 10
-        })
-			}
-		}
-		this.vely += this.gravityStength
-		let drag = this.liquid ? 0.7 : 0.95
-		let yDrag = this.liquid ? 0.7 : 0.95
-		if(blockData[this.standingOn].slide) drag = blockData[this.standingOn].slide
-		this.velz += (this.velz * drag - this.velz)
-		this.velx += (this.velx * drag - this.velx)
-		this.vely += (this.vely * yDrag - this.vely)
-	}
-	update() {
-		let railX = round(this.x), railY = round(this.y), railZ = round(this.z)
-		let onBlock = this.world.getBlock(railX,railY,railZ,this.dimension)
-		if(!blockData[onBlock].rail){
-			let under = this.world.getBlock(railX,railY-1,railZ,this.dimension)//to allow diagonals
-			if(blockData[under].rail) onBlock = under, railY--
-		}
 
-		this.updateVelocity(now)
-		for(let P of this.world.world.players){
-			if(!P.hidden && !P.die && P.dimension === this.dimension && P.riding !== this.id) this.pushByMob(P)
-		}
-		this.world.getEntitiesNear(this.x,this.y,this.z, 16, nearEntityArray)
-		for(let ent of nearEntityArray){
-			if(ent.pushes && ent !== this && ent.dimension === this.dimension && ent.riding !== this.id) this.pushByMob(ent)
-		}
-		let {velx, vely, velz} = this
-		let speed = sqrt(velx*velx+velz*velz+vely*vely)*2
-		if(speed>1){
-			this.velx /= speed, this.vely /= speed, this.velz /= speed
-		}
-		this.move(now)
-
-		this.height = this.defaultHeight
-		this.pitch = 0
-		this.offsetY = 0
-		if(onBlock && blockData[onBlock].rail){
-			let rot = onBlock&ROTATION
-			let {prevOnTrack} = this
-			if((onBlock & isState) === CUBE){
-				let velMag = sqrt(velx*velx+velz*velz)
-				if(rot === NORTH || rot === SOUTH) this.velz = prevOnTrack ? velMag*Math.sign(velz) : velz, this.velx = 0, this.x = railX, this.yaw = round(this.yaw/Math.PI)*Math.PI
-				else if(rot === EAST || rot === WEST) this.velx = prevOnTrack ? velMag*Math.sign(velx) : velx, this.velz = 0, this.z = railZ, this.yaw = round((this.yaw-Math.PI2)/Math.PI)*Math.PI+Math.PI2
-				this.vely = 0, this.y = railY
-				this.prevOnTrack = true
-			}else if((onBlock & isState) === STAIR){//corner rail
-				let originX, originZ
-				if(rot === NORTH) originX = railX-0.5, originZ = railZ-0.5
-				else if(rot === WEST) originX = railX+0.5, originZ = railZ-0.5
-				else if(rot === SOUTH) originX = railX+0.5, originZ = railZ+0.5
-				else if(rot === EAST) originX = railX-0.5, originZ = railZ+0.5
-				let dx = this.x-originX, dz = this.z-originZ
-				let mag = sqrt(dx*dx+dz*dz)*2
-				dx /= mag, dz /= mag
-				this.x = originX+dx
-				this.z = originZ+dz
-				let targetYaw = atan2(dx,dz)+Math.PI2
-				this.yaw = round((this.yaw-targetYaw)/Math.PI)*Math.PI+targetYaw
-				//below: calculate new velocity
-				let velMag = sqrt(velx*velx+velz*velz)
-				let prevDir = velx*dz + velz*-dx//more accurate if use previous dx and dz
-				let s = dz*2, c = -dx*2
-				if(prevOnTrack){
-					prevDir = Math.sign(prevDir)
-					this.velx = velMag*s*prevDir
-					this.velz = velMag*c*prevDir
-				}else{
-					this.velx = prevDir*s
-					this.velz = prevDir*c
-				}
-				this.vely = 0, this.y = railY
-				//this.world.blockParticles(4,this.x+Math.sign(velMag)*sin(this.yaw),7,this.z+Math.sign(velMag)*cos(this.yaw),1,'','')
-				/*//stop velocity in certain direction
-				let dot = this.velx*dx + this.velz*dz
-				this.velx = this.velx - dx * dot
-				this.velz = this.velz - dz * dot*/
-				this.prevOnTrack = true
-			}else if((onBlock & isState) === SLAB){//raised
-				let diagonal = sqrt(0.5)
-				let originX = railX, originY = railY, originZ = railZ, dx = 0, dy = diagonal, dz = 0
-				if(rot === NORTH) originZ -= 0.5, dz = diagonal, this.yaw = round(this.yaw/Math.PI)*Math.PI
-				else if(rot === SOUTH) originZ += 0.5, dz = -diagonal, this.yaw = round(this.yaw/Math.PI)*Math.PI
-				else if(rot === EAST) originX -= 0.5, dx = diagonal, this.yaw = round((this.yaw-Math.PI2)/Math.PI)*Math.PI+Math.PI2
-				else if(rot === WEST) originX += 0.5, dx = -diagonal, this.yaw = round((this.yaw-Math.PI2)/Math.PI)*Math.PI+Math.PI2
-				let dot = (this.x-originX)*dx + (this.z-originZ)*dz + (this.y-originY)*dy
-				this.x = originX+dx*dot
-				this.y = originY+dy*dot
-				this.z = originZ+dz*dot
-				let velMag = sqrt(velx*velx+velz*velz+vely*vely)
-				let prevDir = velx*dx + velz*dz + vely*dy//more accurate if use previous dx and dz
-				if(prevOnTrack){
-					prevDir = Math.sign(prevDir)
-					this.velx = velMag*dx*prevDir
-					this.velz = velMag*dz*prevDir
-					this.vely = velMag*dy*prevDir
-				}else{
-					this.velx = prevDir*dx
-					this.velz = prevDir*dz
-					this.vely = prevDir*dy
-				}
-				this.prevOnTrack = true
-				this.height = this.heightOnDiagonal//to allow fitting
-				this.pitch = -Math.PI4*Math.sign(sin(this.yaw)*dx+cos(this.yaw)*dz)
-				this.offsetY = 0.25
-			}else this.prevOnTrack = false
-			if(this.yaw > Math.PId) this.yaw -= Math.PId, this.previousYaw -= Math.PId
-			if(this.yaw < 0) this.yaw += Math.PId, this.previousYaw += Math.PId
-			if(blockData[onBlock].name === "poweredRail"){
-				let velMag = sqrt(velx*velx+velz*velz+vely*vely)
-				if(onBlock&FLIP){
-					if(velMag > 0.01 && velMag<8){
-						let extraSpeed = (8-velMag)*0.06
-						this.velx += this.velx/velMag*extraSpeed
-						this.velz += this.velz/velMag*extraSpeed
-						this.vely += this.vely/velMag*extraSpeed
-						if((onBlock&isState) === CUBE){
-							if(rot === NORTH || rot === SOUTH){
-								if(blockData[this.world.getBlock(railX,railY,railZ+1)].solid) this.velz = min(this.velz,-0.1)
-								else if(blockData[this.world.getBlock(railX,railY,railZ-1)].solid) this.velz = max(this.velz,0.1)
-							}else if(rot === EAST || rot === WEST){
-								if(blockData[this.world.getBlock(railX+1,railY,railZ)].solid) this.velx = min(this.velx,-0.1)
-								else if(blockData[this.world.getBlock(railX-1,railY,railZ)].solid) this.velx = max(this.velx,0.1)
-							}
-						}
-					}
-				}else{
-					this.velx *= 0.65
-					this.velz *= 0.65
-					this.vely *= 0.65
-				}
-			}
-		}else this.prevOnTrack = false
-		
-		if(this.harmEffect > 0){
-			this.harmEffect--
-		}
-		if(this.health <= 0){
-			this.canDespawn = true
-			this.world.addItems(this.x,this.y,this.z,0,0,0,blockIds.minecart,true,1,null,null,this.id)
-		}
-	}
-	onhit(damage,remote, vx,vz, from){
-		this.health -= damage
-		if(this.harmEffect>0) this.harmEffect += 7-floor(this.health)
-		else this.harmEffect = 7-floor(this.health)
-		if(!remote) this.world.sendEntityPos(this)
-	}
-}
 class Mob extends Entity{
 	static mob = true
-	mob = true
-	pushes = true
+	static{
+		this.prototype.mob = true
+		this.prototype.pushes = true
+		this.prototype.minFollowDist = 0
+		this.prototype.maxFollowDist = 0
+		this.prototype.detectionDist = 0
+		this.prototype.attackStrength = 0
+		this.prototype.maxAttackCooldown = 0
+		this.prototype.canClimb = false
+		this.prototype.canFly = false
+		this.prototype.attacks = null
+		this.prototype.attracts = null
+		this.prototype.despawns = 300000
+	}
 	constructor(){
 		super(...arguments)
 		/*this.moveTime = 0
@@ -23284,7 +29426,7 @@
 		this.spin = 0
 		this.dirx = 0
 		this.dirz = 0*/
-		this.health = 0
+		this.health = this.health || 0
 		this.lastDamage = 0
 		this.lastY = this.y
 		this.path = null
@@ -23303,18 +29445,10 @@
 		this.spinTargetPitch = 0
 		this.die = false
 		this.lastStepSound = 0
-		this.hostile = false
-		this.minFollowDist = 0
-		this.maxFollowDist = 0
-		this.detectionDist = 0
+		this.hostile = this.hostile || false
 		this.target = null, this.targetEnt = null
-		this.attackStrength = 0
-		this.attackCooldown = 0, this.maxAttackCooldown = 0
+		this.attackCooldown = 0
 		this.holding = this.prevHolding = 0
-		this.canClimb = false
-		this.canFly = false
-		this.attacks = null
-		this.attracts = null
 		this.attractEnt = null
 		this.attractedBy = null
 		this.sitting = false
@@ -23803,6 +29937,10 @@
 		}
 		if(this.panick > 0) this.panick--
 	}
+	update(){
+		this.mobUpdate(now)
+		if(this.additionalUpdate) this.additionalUpdate()
+	}
 	updateAlways(){
 		let canDespawn = true
 		for(let p of this.world.world.players){
@@ -23863,602 +30001,2511 @@
 		this.effects[name] = {level, time, showParticles}
 	}
 }
-entities[entities.length] = class Cow extends Mob{
-	static name2 = "Cow"
-	drop = [blockIds.rawBeef]
-	dropAmount = [1,3]
-	saySound = ["cow.say1","cow.say2","cow.say3","cow.say4"]
-	stepSound = ["cow.step1","cow.step2","cow.step3","cow.step4"]
-	hurtSound = ["cow.hurt1","cow.hurt2","cow.hurt3"]
-	defaultName = "Cow"
-	constructor(x,y,z){
-		super(x, y, z, 0, 0, 0, 0, 0, 1, 21/16, 1, null,null, null, 300000)
-		var pix = 1/16
-		this.offsetY = pix*9.5
-		
-		this.addPart("frontRightLeg",null,null,pix*-4,pix*-8,pix*7,1,1,1,0,0)
-		this.addPart("frontLeftLeg",null,null,pix*4,pix*-8,pix*7,1,1,1,0,0)
-		this.addPart("backRightLeg",null,null,pix*-4,pix*-8,pix*-6,1,1,1,0,0)
-		this.addPart("backLeftLeg",null,null,pix*4,pix*-8,pix*-6,1,1,1,0,0)
-		this.addPart("head",null,null,0,0,pix*9,1,1,1,0,0)
-		
-		this.health = 10
-		this.attracts = [blockIds.wheat]
-	}
-	update(){
-		this.mobUpdate(now)
-	}
-	onclick(holding){
-		if(holding && holding.id === blockIds.bucket) holding.id = blockIds.milkBucket
-	}
-}
-entities[entities.length] = class Pig extends Mob{
-	static name2 = "Pig"
-	drop = [blockIds.rawPorkchop]
-	dropAmount = [1,3]
-	saySound = ["pig.say1","pig.say2","pig.say3"]
-	stepSound = ["pig.step1","pig.step2","pig.step3","pig.step4","pig.step5"]
-	deathSound = "pig.death"
-	defaultName = "Pig"
-	constructor(x,y,z){
-		super(x, y, z, 0, 0, 0, 0, 0, 1, 1, 1, null,null, null, 300000)
-		var pix = 1/16
-		this.offsetY = pix*6
-		this.addPart("frontRightLeg",null,null,pix*-3,pix*-8,pix*5,1,1,1,0,0)
-		this.addPart("frontLeftLeg",null,null,pix*3,pix*-8,pix*5,1,1,1,0,0)
-		this.addPart("backRightLeg",null,null,pix*-3,pix*-8,pix*-7,1,1,1,0,0)
-		this.addPart("backLeftLeg",null,null,pix*3,pix*-8,pix*-7,1,1,1,0,0)
-		this.addPart("head",null,null,0,pix*-2,pix*10,1,1,1,0,0)
-		
-		this.health = 10
-		this.attracts = [blockIds.carrot, blockIds.potato]
-	}
-	update(){
-		this.mobUpdate(now)
-	}
-}
-entities[entities.length] = class Creeper extends Mob{
-	static name2 = "Creeper"
-	drop = [blockIds.gunpowder]
-	dropAmount = [0,2]
-	experience = 5
-	hurtSound = ["creeper.say1","creeper.say2","creeper.say3","creeper.say4"]
-	deathSound = "creeper.death"
-	defaultName = "Creeper"
-	constructor(x,y,z){
-		super(x, y, z, 0, 0, 0, 0, 0, 0.5, 26/16, 0.5, null,null, null, 300000)
-		var pix = 1/16
-		this.offsetY = pix*-1
-		this.addPart("frontRightLeg",null,null,pix*-2,pix*-6,pix*4,1,1,1,0,0)
-		this.addPart("frontLeftLeg",null,null,pix*2,pix*-6,pix*4,1,1,1,0,0)
-		this.addPart("backRightLeg",null,null,pix*-2,pix*-6,pix*-4,1,1,1,0,0)
-		this.addPart("backLeftLeg",null,null,pix*2,pix*-6,pix*-4,1,1,1,0,0)
-		this.addPart("head",null,null,0,pix*10,0,1,1,1,0,0)
-		
-		this.health = 10
-		this.hostile = true
-		this.minFollowDist = 3
-		this.maxFollowDist = this.detectionDist = 16
-		this.timerStart = 0
-		this.explodeAmount = 0
-		this.timeLimit = 30
-	}
-	explode(){
-		var x = round(this.x), y = round(this.y), z = round(this.z)
-		this.world.explode(x,y,z,3, this.liquid || !this.world.world.settings.tntExplode, this.dimension)
-	}
-	update(){
-		this.mobUpdate(now)
+win.serverMob = Mob
 
-		let d = this.targetEnt && max(abs(this.targetEnt.x-this.x),abs(this.targetEnt.y-this.y),abs(this.targetEnt.z-this.z))
-		if(this.targetEnt && d<=this.minFollowDist){
-			if(!this.explodeAmount){
-				this.timerStart = now
-				this.world.playSound(this.x,this.y,this.z, "random.fuse")
-			}
-			this.explodeAmount++
-			if(this.explodeAmount > 20) this.explodeAmount = 20
-		}else if(this.explodeAmount) this.explodeAmount--
-		this.shader = 0, this.extraSize = 0
-		if(this.explodeAmount>0){
-			var i = Math.floor((now - this.timerStart) / 125)
-			if(!(i%2)){
-				this.shader = 1
-			}
-			if((now - this.timerStart) / tickTime >= this.timeLimit - 10){
-				//get bigger
-				this.extraSize = min(-((this.timeLimit - 10) - ((now - this.timerStart) / tickTime)) / 40,0.25)
-				this.shader = 1
+const entityData = [//todo n: do after initialize blockIds
+	{
+		name:"Item",
+		nameMcd:"item",
+		Name:"Item",
+		type: "other",
+		width: 0.25,
+		height: 0.25,
+		depth: 0.25,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","item"],
+		class: ({Entity}) => class Item extends Entity {
+			constructor(x, y, z, velx, vely, velz, blockID, autoSetVel, amount, durability = null, name = null, from) {
+				super(x, y, z, 0, 0, velx, vely, velz, 0.25, 0.25, 0.25, null, null, 0, 300000/*1500000*/)
+				this.block = blockID
+				this.from = from || undefined
+				this.durability = durability
+				this.name = name
+				this.amount = amount || 1
+				this.gravityStength = -0.07
+				this.noHitbox = true
+				this.canFloat = true
+				this.cullFace = true
+				
+				if(autoSetVel){
+					this.velx = (Math.random()-0.5) * 0.2
+					this.vely = Math.random() * 0.2
+					this.velz = (Math.random()-0.5) * 0.2
+				}
+			}
+			goCloserToPlayer(e){
+				let xDist = this.x - e.x
+				let yDist = this.y - (e.y - e.height/2)
+				let zDist = this.z - e.z
+				var hRange = 1.425
+				let comeCloser = xDist > -hRange && xDist < hRange && yDist > -0.75 && yDist < 2.3 && zDist > -hRange && zDist < hRange
+				if(comeCloser){
+					this.moveTowards(e.x, Math.min(Math.max(this.y, e.y - e.height*0.5),e.y+e.height*0.5), e.z, hRange,2.3,hRange, 3)
+				}
+				/*if(pickup){
+					var dist = dist3(this.x, this.y, this.z, p.x, p.y, p.z)
+					var dist2 = dist3(this.x, this.y, this.z, p.x, p.y-1, p.z)
+					pickup = ((1 >= dist) && (dist >= -1)) || ((1 >= dist2) && (dist2 >= -1))
+				}*/
+				let w = e.width*0.5
+				return xDist > -w && xDist < w && yDist > 0 && yDist < e.height && zDist > -w && zDist < w
 			}
-			if((now - this.timerStart) / tickTime >= this.timeLimit){
-				this.canDespawn = true
-				this.explode()
+			serverUpdate(){
+				if(this.amount <= 0){
+					return this.canDespawn = true
+				}
+				
+				let pickup
+				if(now - this.spawn > 1000){
+					for(var P of this.world.world.players){
+						if(!P.hidden && !P.die && P.dimension === this.dimension){
+							if(this.goCloserToPlayer(P)) pickup = P
+						}
+					}
+				}
+				
+				let d = 3/4
+				var stackSize = blockData[this.block].stackSize
+				var c = false
+				this.world.getEntitiesNear(this.x,this.y,this.z, 1, nearEntityArray)
+				for(var e of nearEntityArray){
+					if(e.type === "Item" && e !== this && e.block === this.block && (!e.name && !this.name || e.name === this.name) && e.amount + this.amount <= stackSize){
+						var xDist = this.x - e.x
+						var yDist = this.y - e.y
+						var zDist = this.z - e.z
+						let stack = xDist > -d && xDist < d && yDist > -d && yDist < d && zDist > -d && zDist < d
+						if(stack){
+							this.amount += e.amount
+							e.amount = 0
+							this.velx = (this.velx+e.velx)/2
+							this.vely = (this.vely+e.vely)/2
+							this.velz = (this.velz+e.velz)/2
+							this.x = (this.x+e.x)/2
+							this.y = (this.y+e.y)/2
+							this.z = (this.z+e.z)/2
+							c = true
+						}
+					}
+				}
+				//if(c) this.world.sendAll({type:"entEvent",event:"itemAmount",data:this.amount,id:this.id})
+				if(c) this.world.sendEntityPos(this)
+				
+				if(pickup){
+					let pickuped = false
+					while(this.amount > 0 && newInvItem(pickup, this.block, this.durability, this.name)){
+						this.amount--
+						pickuped = true
+					}
+					if(pickuped){
+						if(blockData[this.block].log){
+							pickup.addAchievment("Getting Wood")
+						}else if(this.block === blockIds.diamond){
+							pickup.addAchievment("DIAMONDS!")
+						}else if(this.block === blockIds.ancientDebris){
+							pickup.addAchievment("Hidden In The Depths")
+						}else if(this.block === blockIds.diamond && this.from !== p.id){
+							//that achivement
+							let from = getPlayerById(this.from)
+							if(from) from.addAchievment("Diamonds to you!")
+						}else if(this.block === blockIds.tomatoSeeds){
+							pickup.addAchievment("Time to plant tomatoes!")
+						}
+						pickup.addDiscovery(this.block)
+						let pitch = rand(0.6, 1.5)
+						this.world.playSound(this.x,this.y,this.z,"random.plop",1,pitch)
+						this.world.sendEntityPos(this)//send({type:"entEvent",event:"itemAmount",data:this.amount,id:this.id})
+					}
+				}
+				if(!this.amount){
+					this.canDespawn = true
+				}
+				if(this.insideBlock && blockData[this.insideBlock].itemOnTop || this.standingOn && blockData[this.standingOn].itemOnTop){
+					var inside = this.insideBlock && blockData[this.insideBlock].itemOnTop
+					var block = inside ? this.insideBlock : this.standingOn
+					var y = inside ? round(this.y) : ceil(this.y-this.height/2)-1
+					var amount = blockData[block].itemOnTop(round(this.x),y,round(this.z),this)
+					if(amount){
+						this.amount = amount
+						this.willUpdateShape = true
+						//this.world.sendAll({type:"entEvent",event:"itemAmount",data:this.amount,id:this.id})
+						this.world.sendEntityPos(this)
+					}else if(amount === 0) this.canDespawn = true
+				}
+			}
+			update() {
+				super.update()
+				this.yaw += 0.05;
+				if(this.yaw > Math.PId){
+					this.yaw -= Math.PId
+					this.previousYaw -= Math.PId
+				}
 			}
 		}
-	}
-	onclick(block){
-		if(!block || block.id !== blockIds.flintAndSteel) return
-		this.explodeAmount = 100
-		this.timerStart = now
-		this.world.sendEntityPos(this)
-		//this.world.sendAllInChunk({type:"entEvent",event:"creeperForceExplode",id:this.id},this.chunkX,this.chunkZ,this.chunkDimension)
-	}
-}
-entities[entities.length] = class Sheep extends Mob{
-	static name2 = "Sheep"
-	drop = [blockIds.rawMutton]
-	dropAmount = [1,2]
-	saySound = ["sheep.say1","sheep.say2","sheep.say3"]
-	hurtSound = ["sheep.say1","sheep.say2","sheep.say3"]
-	stepSound = ["sheep.step1","sheep.step2","sheep.step3","sheep.step4","sheep.step5"]
-	defaultName = "Sheep"
-	constructor(x,y,z, color, wool){
-		super(x, y, z, 0, 0, 0, 0, 0, 1, 1, 1, null,null, 0, 300000, "vao")
-		var pix = 1/16
-		this.offsetY = pix*7
-		this.addPart("frontRightLeg",null,null,pix*-3,pix*-3,pix*5,1,1,1,0,0)
-		this.addPart("frontLeftLeg",null,null,pix*3,pix*-3,pix*5,1,1,1,0,0)
-		this.addPart("backRightLeg",null,null,pix*-3,pix*-3,pix*-7,1,1,1,0,0)
-		this.addPart("backLeftLeg",null,null,pix*3,pix*-3,pix*-7,1,1,1,0,0)
-		this.addPart("head",null,null,0,pix*4,pix*10,1,1,1,0,0)
-		this.health = 10
-		this.fur = true
-		this.eating = 0
-		this.color = color
-		this.wool = wool
-		if(!color){
-			let r = rand(100), dye
-			if(r > 50) dye = "white"
-			else if(r > 35) dye = "lightGray"
-			else if(r > 20) dye = "gray"
-			else if(r > 5) dye = "black"
-			else if(r > 1) dye = "brown"
-			else dye = "pink"
-			this.color = colors.dye[dye].slice()
-			this.wool = dye+"Wool"
-		}
-		this.attracts = [blockIds.wheat]
-	}
-	ondie(){
-		this.world.addItems(this.x,this.y,this.z,0,0,0,blockIds[this.wool],true,round(rand(1,2)))
-	}
-	onclick(holding){
-		let data = blockData[holding ? holding.id : 0]
-		if(data.dye){
-			this.color = colors.dye[data.dye].slice()
-			this.wool = data.dye+"Wool"
-			//if(multiplayer) send({type:"entEvent",event:"sheepColor",data:{color:this.color,wool:this.wool},id:this.id})
-			this.world.sendEntityPos(this)
-		}else if(data.shears){
-			if(!this.fur) return
-			this.fur = false
-			this.world.addItems(this.x,this.y,this.z,0,0,0,blockIds[this.wool],true,round(rand(1,3)))
-			//this.world.sendAllInChunk({type:"entEvent",event:"sheepFur",data:false,id:this.id},this.chunkX,this.chunkZ,this.chunkDimension)
-			this.world.sendEntityPos(this)
-			this.world.playSound(this.x,this.y,this.z, "sheep.shear")
+	},
+	{
+		name:"BlockEntity",
+		blockEntity:true,
+		class: ({Entity}) => class BlockEntity extends Entity{
+			constructor(blockID, x,y,z, solidOnGround){
+				super(x, y, z, 0, 0, 0, 0, 0, 1, 1, 1, null, null, null, Infinity)
+				this.block = blockID
+				this.solidOnGround = solidOnGround
+				this.lastY = y
+				this.noHitbox = true
+				this.cullFace = true
+			}
+			changeBlock(blockID){
+				if(this.block === blockID) return
+				this.block = blockID
+			}
+			serverUpdate(){
+				if(this.onGround && this.solidOnGround){
+					var x = round(this.x), y = round(this.y), z = round(this.z)
+					var b = this.world.getBlock(x, y, z, this.dimension)
+					if(b && !blockData[b].liquid){
+						// non cube block breaks falling blocks
+						this.world.addItems(x,y,z, 0,0,0, this.block)
+					}else{
+						this.world.setBlock(x,y,z, this.block,false,false,false,false,this.dimension)
+						this.world.blockSound(this.block, "land", x,y,z)
+					}
+					this.canDespawn = true
+				}
+				
+				if(blockData[this.block].name === "anvil" || blockData[this.block].name === "pointedDripstone"){
+					var ent = entCollided(this)
+					var d
+					if(blockData[this.block].name === "pointedDripstone") d = min(max((this.lastY - this.y - 2) * 2, 0), 40)
+					else if(blockData[this.block].name === "anvil") d = min(max((this.lastY - this.y - 1) * 2, 0), 40)
+					if(entPlayerCollided){
+						var reason
+						if(blockData[this.block].name === "pointedDripstone") reason = ent.username+" got poked to death by a falling pointed dripstone"
+						else if(blockData[this.block].name === "anvil") reason = ent.username+" got hit by an anvil and stuff"
+						ent.damage(d,reason,false,null,this.previousX,this.previousY,this.previousZ)
+					}else if(ent && ent.damage){
+						ent.damage(d)
+					}
+					if(blockData[this.block].name === "pointedDripstone" && this.onGround){
+						var b = blockIds.pointedDripstone
+						this.world.addItems(this.x,this.y,this.z,0,0,0,b,true)
+						this.world.blockParticles(b,this.x,this.y,this.z,30, "break")
+						this.canDespawn = true
+					}
+				}
+			}
 		}
-	}
-	additionalAI(now){
-		if(!this.eating && this.standingOn === blockIds.grass && rand() > 0.999){
-			this.eating = 1
-			//this.world.sendAllInChunk({type:"entEvent",event:"sheepEat",id:this.id},this.chunkX,this.chunkZ,this.chunkDimension)
-			this.world.sendEntityPos(this)
+	},
+	{
+		name:"PrimedTNT",
+		nameMcd:"tnt",
+		Name:"Primed TNT",
+		type: "other",
+		width: 0.98,
+		height: 0.98,
+		depth: 0.98,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","fuse","block_state"],
+		class: ({BlockEntity}) => class PrimedTNT extends BlockEntity{
+			constructor(x,y,z, timerStart, tntBlockId = blockIds.tnt){
+				super(tntBlockId, x,y,z)
+				this.velx = (Math.random() * 0.1) - 0.05
+				this.vely = Math.random() * 0.1
+				this.velz = (Math.random() * 0.1) - 0.05
+				
+				this.timerStart = timerStart || this.spawn
+				this.lastCollidedY = this.timerStart
+				this.timeLimit = 80
+				
+				this.tntBlockId = tntBlockId
+			}
+			explode(){
+				var x = round(this.x), y = round(this.y), z = round(this.z)
+				this.world.explode(x,y,z,4, this.liquid || !this.world.world.settings.tntExplode, this.dimension)
+			}
+			serverUpdate(){
+				if(this.onGround){
+					this.lastCollidedY = this.y
+				}
+				var h = this.y - this.lastCollidedY
+				if(h > 19.75){
+					this.lastCollidedY = this.y
+					this.timerStart -= 1000
+				}
+				
+				if((now - this.spawn) / tickTime >= this.timeLimit){
+					this.canDespawn = true
+					this.explode()
+				}
+			}
 		}
-		if(this.eating && this.standingOn !== blockIds.grass) this.eating = 0
-		if(this.eating && ++this.eating > 40){
-			this.eating = 0
-			this.world.setBlock(round(this.x),floor(this.y-this.height/2),round(this.z),blockIds.dirt,false,false,false,false,this.dimension)
-			this.fur = true
-			//this.world.sendAllInChunk({type:"entEvent",event:"sheepFur",data:true,id:this.id},this.chunkX,this.chunkZ,this.chunkDimension)
-			this.world.sendEntityPos(this)
-			this.world.blockParticles(this.standingOn,round(this.x),floor(this.y-this.height/2)+0.5,round(this.z),30, "break")
+	},
+	{//todo n: shape
+		name:"PrimedSuperTNT",
+		class: ({PrimedTNT}) => class extends PrimedTNT{
+			constructor(x,y,z, timerStart){
+				super(x,y,z, timerStart, blockIds.tnt | SLAB)
+			}
+			explode(){
+				var x = round(this.x), y = round(this.y), z = round(this.z)
+				this.world.explode(x,y,z,8, blockData[this.world.getBlock(x,y,z)].liquid || !this.world.world.settings.tntExplode, this.dimension)
+			}
 		}
-	}
-	update(){
-		this.mobUpdate(now)
-	}
-}
-entities[entities.length] = class Chicken extends Mob{
-	static name2 = "Chicken"
-	drop = [blockIds.rawChicken,blockIds.feather]
-	saySound = ["chicken.say1","chicken.say2","chicken.say3"]
-	stepSound = ["chicken.step1","chicken.step2"]
-	hurtSound = ["chicken.hurt1","chicken.hurt2"]
-	defaultName = "Chicken"
-	constructor(x,y,z){
-		var pix = 1/16
-		super(x, y, z, 0, 0, 0, 0, 0, 0.5, pix*11, 0.5, null,null, null, 300000)
-		this.offsetY = pix*2.5
-		this.addPart("leftWing",null,null,pix*3.5,pix*3,0,1,1,1,0,0)
-		this.addPart("rightWing",null,null,pix*-3.5,pix*3,0,1,1,1,0,0)
-		this.addPart("rightLeg",null,null,pix*-1.5,pix*-3,0,1,1,1,0,0)
-		this.addPart("leftLeg",null,null,pix*1.5,pix*-3,0,1,1,1,0,0)
-		this.addPart("head",null,null,0,pix*4,pix*4.5,1,1,1,0,0)
-		
-		this.health = 4
-		this.attracts = [blockIds.beetrootSeeds, blockIds.tomatoSeeds, blockIds.pumpkinSeeds, blockIds.melonSeeds, blockIds.wheatSeeds]
-	}
-	additionalAI(){
-		if(rand() > 0.9998){
-			this.world.addItems(this.x,this.y,this.z,0,0,0,blockIds.egg,true)
-			this.world.playSound(this.x,this.y,this.z, "chicken.plop")
+	},
+	{
+		name:"PrimedUltraTNT",
+		class: ({PrimedTNT}) => class extends PrimedTNT{
+			constructor(x,y,z, timerStart){
+				super(x,y,z, timerStart, blockIds.tnt | STAIR)
+			}
+			explode(){
+				var x = round(this.x), y = round(this.y), z = round(this.z)
+				this.world.explode(x,y,z,24, blockData[this.world.getBlock(x,y,z)].liquid || !this.world.world.settings.tntExplode, this.dimension)
+			}
 		}
-	}
-	update(){
-		this.mobUpdate(now)
-
-		if(this.vely < 0){
-			this.vely *= 0.5
-			this.lastY = this.y
+	},
+	{
+		name:"PrimedUnTNT",
+		class: ({PrimedTNT}) => class extends PrimedTNT{
+			constructor(x,y,z, timerStart){
+				super(x,y,z, timerStart, blockIds.untnt)
+			}
+			explode(){
+				var x = round(this.x), y = round(this.y), z = round(this.z)
+				this.world.explode(x,y,z,5, blockData[this.world.getBlock(x,y,z)].liquid || !this.world.world.settings.tntExplode || "original", this.dimension)
+			}
 		}
-	}
-}
-entities[entities.length] = class Zombie extends Mob{
-	static name2 = "Zombie"
-	drop = [blockIds.rottenFlesh]
-	dropAmount = [0,3]
-	experience = 5
-	saySound = ["zombie.say1","zombie.say2","zombie.say3"]
-	stepSound = ["zombie.step1","zombie.step2","zombie.step3","zombie.step4","zombie.step5"]
-	hurtSound = ["zombie.hurt1","zombie.hurt2"]
-	deathSound = "zombie.death"
-	defaultName = "Zombie"
-	constructor(x,y,z){
-		super(x, y, z, 0, 0, 0, 0, 0, 1, 2, 1, null,null, null, 300000)
-		var pix = 1/16
-		this.offsetY = pix*2
-		this.addPart("rightLeg",null,null,pix*-2,pix*-6,0,1,1,1,0,0)
-		this.addPart("leftLeg",null,null,pix*2,pix*-6,0,1,1,1,0,0)
-		this.addPart("rightArm",null,null,pix*-6,pix*6,pix*0,1,1,1,0,0)
-		this.addPart("leftArm",null,null,pix*6,pix*6,pix*0,1,1,1,0,0)
-		this.addPart("head",null,null,0,pix*10,0,1,1,1,0,0)
-		
-		this.health = 20
-		this.hostile = true
-		this.minFollowDist = 1
-		this.maxFollowDist = 35
-		this.detectionDist = 17.5
-		this.attackStrength = 3
-		this.maxAttackCooldown = 20
-	}
-	killMessage(username){return username+" died from some small punches from a Zombie."}
-	update(){
-		this.mobUpdate(now)
-		if(!this.liquid && this.world.getLight(round(this.x), round(this.y), round(this.z), 0)*this.world.world.skyLight > 11){
-			this.burnTimer += 0.2
+	},
+	{
+		name:"MovingBlock",
+		class: ({BlockEntity}) => class MovingBlock extends BlockEntity{
+			noRemoteDelete = true
+			constructor(block,x,y,z,mx,my,mz,despawns, solidWhenDone = false, tags = null){
+				super(block, x,y,z)
+				this.sx = x //s stands for start
+				this.sy = y
+				this.sz = z
+				this.mx = mx //m stands for end
+				this.my = my
+				this.mz = mz
+				this.despawns = despawns //also tells how much time for it to move
+				this.solidWhenDone = solidWhenDone
+				this.tags = tags
+				this.canStandOn = true
+				this.endAs = null
+			}
+			serverUpdate(){
+				if (this.lastUpdate - this.spawn >= this.despawns) {
+					this.canDespawn = true
+					if(this.solidWhenDone){
+						this.x = this.mx
+						this.y = this.my
+						this.z = this.mz
+						this.world.setBlock(round(this.x),round(this.y),round(this.z),this.endAs || this.block, false,false,false,false, this.dimension)
+						if(this.tags) this.world.setTags(round(this.x),round(this.y),round(this.z), this.tags)
+					}
+				}
+			}
+			update() {
+				this.previousX = this.x
+				this.previousY = this.y
+				this.previousZ = this.z
+				this.lastUpdate = now
+				
+				var prog = min((now - this.spawn) / this.despawns, 1)
+				this.x = lerp(prog, this.sx, this.mx)
+				this.y = lerp(prog, this.sy, this.my)
+				this.z = lerp(prog, this.sz, this.mz)
+				
+				this.velx = this.x - this.previousX
+				this.vely = this.y - this.previousY
+				this.velz = this.z - this.previousZ
+			}
 		}
-	}
-}
-entities[entities.length] = class Skeleton extends Mob{
-	static name2 = "Skeleton"
-	drop = [blockIds.bone,blockIds.arrow]
-	dropAmount = [1,2]
-	experience = 5
-	saySound = ["skeleton.say1","skeleton.say2","skeleton.say3"]
-	stepSound = ["skeleton.step1","skeleton.step2","skeleton.step3","skeleton.step4"]
-	hurtSound = ["skeleton.hurt1","skeleton.hurt2","skeleton.hurt3","skeleton.hurt4"]
-	deathSound = "skeleton.death"
-	defaultName = "Skeleton"
-	constructor(x,y,z){
-		super(x, y, z, 0, 0, 0, 0, 0, 0.75, 2, 0.75, null,null, null, 300000)
-		var pix = 1/16
-		this.offsetY = pix*2
-		this.addPart("rightLeg",null,null,pix*-2,pix*-6,0,1,1,1,0,0)
-		this.addPart("leftLeg",null,null,pix*2,pix*-6,0,1,1,1,0,0)
-		this.addPart("rightArm",null,null,pix*-5,pix*6,pix*0,1,1,1,0,0)
-		this.addPart("leftArm",null,null,pix*5,pix*6,pix*0,1,1,1,0,0)
-		this.addPart("head",null,null,0,pix*10,0,1,1,1,0,0)
-		this.addPart("holding",null,null,0,0,0,1,1,1,0,0,undefined,"rightArm") //changed later
-		
-		this.health = 20
-		this.hostile = true
-		this.minFollowDist = 8
-		this.maxFollowDist = this.detectionDist = 16
-		this.holding = blockIds.bow, this.maxAttackCooldown = 20
-	}
-	additionalAI(){
-		if(blockData[this.holding].name === "bow" && this.targetEnt && this.attackCooldown <= 0){
-			let vx = this.targetEnt.x - this.x, vy = this.targetEnt.y - this.y, vz = this.targetEnt.z - this.z
-			let mag = sqrt(vx*vx+vy*vy+vz*vz)
-			vx /= mag, vy /= mag, vz /= mag
-			this.world.addEntity(new entities[entityIds.Arrow](this.x+vx,this.y+vy,this.z+vz,vx,vy,vz,this.id),false,this.dimension)
-			this.attackCooldown = this.maxAttackCooldown
-			this.world.sendEntityPos(this)
-			//this.world.sendAllInChunk({type:"entEvent",event:"mobAttack",id:this.id},this.chunkX,this.chunkZ,this.chunkDimension)
+	},
+	{
+		name:"EnderPearl",
+		nameMcd:"ender_pearl",
+		Name:"Thrown Ender Pearl",
+		type: "projectile",
+		width: 0.25,
+		height: 0.25,
+		depth: 0.25,
+		rotSwapOrder:true,
+		metadata: "egg",
+		class: ({BlockEntity}) => class extends BlockEntity{
+			constructor(x,y,z,velx,vely,velz,from){
+				super(blockIds.enderPearl, x,y,z)
+				this.velx = velx
+				this.vely = vely
+				this.velz = velz
+				this.from = from
+				this.facesPlayer = true
+				
+				this.gravityStength = -0.04
+			}
+			serverUpdate(){
+				if(this.hasCollided){
+					if(this.from){
+						let p = getPlayerById(this.from,this.world)
+						if(p){
+							p.tp(this.x,this.y+1,this.z,this.dimension)
+							this.canDespawn = true
+						}
+					}else this.canDespawn = true
+				}
+			}
 		}
-	}
-	update(){
-		this.mobUpdate(now)
-		if(!this.liquid && this.world.getLight(round(this.x), round(this.y), round(this.z), 0)*this.world.world.skyLight > 11){
-			this.burnTimer += 0.2
+	},
+	{
+		name:"Snowball",
+		nameMcd:"snowball",
+		Name:"Snowball",
+		type: "projectile",
+		width: 0.25,
+		height: 0.25,
+		depth: 0.25,
+		rotSwapOrder:true,
+		metadata: "egg",
+		class: ({BlockEntity}) => class extends BlockEntity{
+			constructor(x,y,z,velx,vely,velz,from){
+				super(blockIds.snowball, x,y,z)
+				this.velx = velx
+				this.vely = vely
+				this.velz = velz
+				this.from = from
+				this.facesPlayer = true
+				
+				this.gravityStength = -0.04
+			}
+			serverUpdate() {
+				if(now - this.spawn > 250){
+					var collided = entCollided(this)
+					let from = getEntityOrPlayer(this.from,this.world)
+					from = from && (from.username || from.name)
+					if(collided && collided !== this){
+						if(entPlayerCollided){
+							collided.damage(1,from+" killed "+collided.username+" with snowballs.",false,null,this.previousX,this.previousY,this.previousZ)
+						}else{
+							if(collided.onhit) collided.onhit(1,false, 0,0, this.from)
+						}
+						this.canDespawn = true
+					}
+				}
+				if (this.hasCollided) {
+					this.canDespawn = true
+				}
+				if(this.canDespawn) this.world.blockParticles(this.block,this.x,this.y,this.z,30, "break")
+			}
 		}
-	}
-}
-entities[entities.length] = class Spider extends Mob{
-	static name2 = "Spider"
-	saySound = ["spider.say1","spider.say2","spider.say3","spider.say4"]
-	stepSound = ["spider.step1","spider.step2","spider.step3","spider.step4"]
-	deathSound = "spider.death"
-	drop = [blockIds.string,blockIds.spiderEye]
-	dropAmount = [0,2]
-	experience = 5
-	constructor(x,y,z,cave){
-		let s = cave ? 0.7 : 1
-		super(x, y, z, 0, 0, 0, 0, 0, s, s, s, null,null, null, 300000)
-		var pix = 1/16
-		this.offsetY = pix*2
-		let legRot = Math.PI/8
-		this.addPart("rightLeg0",null,null,pix*-3,0,0,1,1,1,0,0,legRot)
-		this.addPart("rightLeg1",null,null,pix*-3,0,0,1,1,1,0,0,legRot)
-		this.addPart("rightLeg2",null,null,pix*-3,0,0,1,1,1,0,0,legRot)
-		this.addPart("rightLeg3",null,null,pix*-3,0,0,1,1,1,0,0,legRot)
-		this.addPart("leftLeg0",null,null,pix*3,0,0,1,1,1,0,0,-legRot)
-		this.addPart("leftLeg1",null,null,pix*3,0,0,1,1,1,0,0,-legRot)
-		this.addPart("leftLeg2",null,null,pix*3,0,0,1,1,1,0,0,-legRot)
-		this.addPart("leftLeg3",null,null,pix*3,0,0,1,1,1,0,0,-legRot)
-		this.addPart("head",null,null,0,0,pix*7,1,1,1,0,0)
-		
-		this.fur = !!cave
-		this.defaultName = cave ? "Cave Spider" : "Spider"
-		this.health = 16
-		this.canClimb = true
-		this.hostile = true
-		this.minFollowDist = 1.5
-		this.maxFollowDist = 16
-		this.detectionDist = -1
-		this.attackStrength = 2
-		this.maxAttackCooldown = 20
-	}
-	killMessage(username){return username+" died from a tiny little spider."}
-	update(){
-		this.mobUpdate(now)
-
-		if(this.prevWalking !== this.walking){
-			this.prevWalking = this.walking
-			this.walkStart = now
+	},
+	{
+		name:"Egg",
+		nameMcd:"egg",
+		Name:"Thrown Egg",
+		type: "projectile",
+		width: 0.25,
+		height: 0.25,
+		depth: 0.25,
+		rotSwapOrder:true,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","item_stack"],
+		class: ({BlockEntity}) => class extends BlockEntity{
+			constructor(x,y,z,velx,vely,velz,from){
+				super(blockIds.egg, x,y,z)
+				this.velx = velx
+				this.vely = vely
+				this.velz = velz
+				this.from = from
+				this.facesPlayer = true
+				
+				this.gravityStength = -0.07
+			}
+			serverUpdate() {
+				var collided = entCollided(this)
+				let from = getEntityOrPlayer(this.from,this.world)
+				from = from && (from.username || from.name)
+				if(collided && collided !== this){
+					if(entPlayerCollided) collided.damage(1,from+" killed "+collided.username+" with eggs.",false,null,this.previousX,this.previousY,this.previousZ)
+					else if(collided.onhit) collided.onhit(1,false, 0,0, this.from)
+					this.canDespawn = true
+				}
+				if (this.hasCollided) {
+					this.canDespawn = true
+				}
+				if(this.canDespawn){
+					this.world.blockParticles(this.block,this.x,this.y,this.z,30, "break")
+					if(rand() > 0.9) this.world.addEntity(new entities[entityIds.Chicken](this.x,this.y,this.z))
+				}
+			}
 		}
-	}
-}
-entities[entities.length] = class Wolf extends Mob{
-	static name2 = "Wolf"
-	defaultName = "Wolf"
-	constructor(x,y,z){
-		super(x, y, z, 0, 0, 0, 0, 0, 0.6, 0.8, 0.6, null,null, null, Infinity, "vao")
-		var pix = 1/16
-		this.addPart("head",null,null,0,0,pix*10,1,1,1,0,0)
-		this.addPart("frontRightLeg",null,null,pix*-1.5,pix*-3,pix*5,1,1,1,0,0)
-		this.addPart("frontLeftLeg",null,null,pix*1.5,pix*-3,pix*5,1,1,1,0,0)
-		this.addPart("backRightLeg",null,null,pix*-1.5,pix*-3,pix*-6,1,1,1,0,0)
-		this.addPart("backLeftLeg",null,null,pix*1.5,pix*-3,pix*-6,1,1,1,0,0)
-		this.addPart("tail",null,null,0,0,pix*-8,1,1,1,Math.PI2,0)
-		this.addPart("collar",null,null,0,0,pix*6.1,1,1,1,0,0)
-		
-		this.health = 8
-		this.hostile = true
-		this.minFollowDist = 1.5
-		this.maxFollowDist = 16
-		this.detectionDist = 16
-		this.attackStrength = 4
-		this.maxAttackCooldown = 20
-		this.attacks = ["Sheep","Rabbit","Fox","Skeleton"]
-		this.attracts = [blockIds.bone]
-		this.wetStuff = 0
-		this.tame = false
-		this.color = colors.dye.red.slice()
-	}
-	feed(id,from){
-		if(id === blockIds.bone){
-			if(this.tame){
-				let prev = this.health
-				this.health++
-				if(this.health > 20) this.health = 20
-				this.world.sendEntityPos(this)
-			}else{
-				if(rand(3) > 1){
-					this.world.sendAllInChunk({
-						type:"particles",particleType:"smokeCube",
-						x:this.x,y:this.y,z:this.z,dimension:this.dimension,amount:10
-					},this.chunkX,this.chunkZ,this.chunkDimension)
+	},
+	{
+		name:"SlingshotShot",
+		rotSwapOrder:true,
+		class: ({BlockEntity}) => class extends BlockEntity{
+			constructor(x,y,z,velx,vely,velz){
+				super(blockIds.ironNugget, x,y,z)
+				this.velx = velx
+				this.vely = vely
+				this.velz = velz
+				this.despawns = 10000
+				this.facesPlayer = true
+				this.gravityStength = -0.02
+			}
+			serverUpdate() {
+				if (now - this.spawn > this.despawns && this.onGround) {
+					this.canDespawn = true
+					//world.addEntity(new Item(this.x,this.y,this.z,0,0,0,blockIds.ironNugget))
+				}
+				
+				var collided = entCollided(this)
+				if(collided){
+					if(entPlayerCollided) collided.damage(5,collided.username+" got killed by a slingshot.",false,null,this.previousX,this.previousY,this.previousZ)
+					else if(collided.onhit) collided.damage(5)
+					this.canDespawn = true
+				}
+			}
+			move(now) {
+				let pminX = floor(this.x - this.width / 2)
+				let pmaxX = ceil(this.x + this.width / 2)
+				let pminY = floor(this.y - this.height / 2)
+				let pmaxY = ceil(this.y + this.height / 2)
+				let pminZ = floor(this.z - this.depth / 2)
+				let pmaxZ = ceil(this.z + this.depth / 2)
+				let block = null
+		
+				this.liquid = false
+				for (let x = pminX; x <= pmaxX; x++) {
+					for (let y = pminY; y <= pmaxY; y++) {
+						for (let z = pminZ; z <= pmaxZ; z++) {
+							let block = this.world.getBlock(x, y, z, this.dimension)
+							if (block && blockData[block].solid) {
+								this.contacts.add(x, y, z, block)
+							}
+							if(x === round(this.x) && z === round(this.z) && blockData[block].liquid){
+								this.liquid = true
+							}
+						}
+					}
+				}
+		
+				this.previousX = this.x
+				this.previousY = this.y
+				this.previousZ = this.z
+		
+				var xBounce, yBounce, zBounce, pvelx = this.velx, pvely = this.vely, pvelz = this.velz
+				
+				this.canStepX = false
+				this.canStepY = false
+				this.onGround = false
+				this.hasCollided = false
+				//Check collisions in the Y direction
+				this.y += this.vely
+				for (let i = 0; i < this.contacts.size; i++) {
+					block = this.contacts.array[i]
+					if (this.collided(block[0], block[1], block[2], null, this.vely, null, block[3])) {
+						this.y = this.previousY
+						this.vely = 0
+						this.hasCollided = true
+						yBounce = true
+						break
+					}
+				}
+		
+				if (this.y === this.previousY) {
+					this.canStepX = true
+					this.canStepZ = true
+				}
+		
+				//Check collisions in the X direction
+				this.x += this.velx
+				for (let i = 0; i < this.contacts.size; i++) {
+					block = this.contacts.array[i]
+					if (this.collided(block[0], block[1], block[2], this.velx, null, null, block[3])) {
+						if (this.canStepX && !this.world.getBlock(block[0], block[1] + 1, block[2], this.dimension) && !this.world.getBlock(block[0], block[1] + 2, block[2], this.dimension)) {
+							continue
+						}
+						this.x = this.previousX
+						this.velx = 0
+						this.hasCollided = true
+						xBounce = true
+						break
+					}
+				}
+		
+				//Check collisions in the Z direction
+				this.z += this.velz
+				for (let i = 0; i < this.contacts.size; i++) {
+					block = this.contacts.array[i]
+					if (this.collided(block[0], block[1], block[2], null, null, this.velz, block[3])) {
+						if (this.canStepZ && !this.world.getBlock(block[0], block[1] + 1, block[2], this.dimension) && !this.world.getBlock(block[0], block[1] + 2, block[2]), this.dimension) {
+							continue
+						}
+						this.z = this.previousZ
+						this.velz = 0
+						this.hasCollided = true
+						zBounce = true
+						break
+					}
+				}
+				
+				if(this.onGround){
+					this.hasCollided = true
+				}
+				
+				if(xBounce) this.velx = -pvelx
+				if(yBounce) this.vely = -pvely
+				if(zBounce) this.velz = -pvelz
+		
+				this.updateChunk()
+		
+				this.lastUpdate = now
+				this.contacts.clear()
+			}
+		}
+	},
+	{
+		name:"Arrow",
+		nameMcd:"arrow",
+		Name:"Arrow",
+		type: "projectile",
+		width: 0.5,
+		height: 0.5,
+		depth: 0.5,
+		rotSwapOrder:true,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","flags","pierce_level","effect_color"],
+		class: ({Entity}) => class Arrow extends Entity{
+			constructor(x,y,z,dx=0,dy=0,dz=0, from){
+				super(x, y, z, 0, 0, dx, dy, dz, 0.25, 0.25, 0.25, null, null, null, 60000)
+				this.direction = new PVector(dx,dy,dz)
+				this.stopStart = this.spawn
+				this.hasStopped = false
+				this.noHitbox = true
+				this.from = from
+			}
+			updateVelocity(now) {
+				this.vely += -0.005
+				let drag = this.liquid ? 0.7 : 0.99
+				if(blockData[this.standingOn].slide) drag = blockData[this.standingOn].slide
+				this.velz += (this.velz * drag - this.velz)
+				this.velx += (this.velx * drag - this.velx)
+				this.vely += (this.vely * drag - this.vely)
+			}
+			serverUpdate(){
+				if(this.hasCollided && !this.hasStopped){
+					this.hasStopped = true
+					this.stopStart = now
+					this.direction.x = this.velx
+					this.direction.y = this.vely
+					this.direction.z = this.velz
+					this.direction.normalize()
+					var x = round(this.x+this.direction.x)
+					var y = round(this.y+this.direction.y)
+					var z = round(this.z+this.direction.z)
+					var block = this.world.getBlock(x,y,z,this.dimension)
+					if(block && blockData[block].projectileHit){
+						blockData[block].projectileHit(x,y,z,this)
+					}
+				}
+				if (now - this.stopStart > this.despawns) {
+					this.canDespawn = true
+				}
+				if(!this.hasCollided){
+					let collided = entCollided(this)
+					let from = getEntityOrPlayer(this.from,this.world)
+					from = from && (from.username || from.name)
+					let d = dist3(this.velx,this.vely,this.velz,0,0,0)*4
+					if(collided && collided !== this){
+						this.canDespawn = true
+						if(entPlayerCollided) collided.damage(d,collided.username+" got killed by an arrow"+(from ? " from "+from+"." : "."),false,null,this.previousX,this.previousY,this.previousZ,null, this.velx/2, undefined,this.velz/2)
+						else if(collided.onhit) collided.onhit(d,false, this.velx/2,this.velz/2, this.from)
+						else this.canDespawn = false
+					}
 				}else{
-					this.world.sendAllInChunk({
-						type:"particles",particleType:"hearts",
-						x:this.x,y:this.y,z:this.z,dimension:this.dimension,amount:10
-					},this.chunkX,this.chunkZ,this.chunkDimension)
-					this.world.addEntity(new entities[entityIds.ExperienceOrb](this.x,this.y,this.z, rand(1,7)),false,this.dimension)
-					this.tame = true
-					this.health *= 20/8
-					let owner = getPlayerById(from,this.world)
-					this.owner = owner.username
-					this.world.sendEntityPos(this)
+					let collided = entCollided(this)
+					if(entPlayerCollided && !collided.spectator && newInvItem(collided,blockIds.arrow)) this.canDespawn = true
+				}
+			}
+			update(){
+				let pvelx = this.velx
+				let pvely = this.vely
+				let pvelz = this.velz
+				super.update()
+				if(this.hasCollided){
+					this.x = this.previousX
+					this.y = this.previousY
+					this.z = this.previousZ
+					this.velx = pvelx
+					this.vely = pvely
+					this.velz = pvelz
 				}
+				
+				this.yaw = Math.PId - (atan2(this.velz, this.velx) + Math.PI2 + Math.PI)
+				var adjacent = sqrt(this.velx*this.velx+this.velz*this.velz)
+				this.pitch = Math.PId - atan2(this.vely, adjacent)
 			}
 		}
-	}
-	onclick(holding,p){
-		let data = blockData[holding ? holding.id : 0]
-		if(data.dye){
-			this.color = colors.dye[data.dye].slice()
-			//if(multiplayer) send({type:"entEvent",event:"wolfCollarColor",data:this.color,id:this.id})
-			//this.updateShape()
-			this.world.sendEntityPos(this)
-		}else if(holding && holding.id === blockIds.bone){
-			holding.amount--
-			this.feed(holding.id,p.id)
-		}else if(this.tame){
-			this.sitting = !this.sitting
-			this.world.sendEntityPos(this)
-			//if(multiplayer) send({type:"entEvent",event:"sit",id:this.id, data:this.sitting})
+	},
+	null,//unused, sign
+	{
+		name:"itemFrame",
+		nameMcd:"item_frame",
+		Name:"Item Frame",
+		type: "other",
+		width: 0.5,
+		height: 0.5,
+		depth: 0.5,
+		metadata: "glowItemFrame",
+		class: ({Entity}) => class itemFrame extends Entity{
+			constructor(x,y,z){
+				super(x, y, z, 0, 0, 0, 0, 0, 1, 1, 1, null, null, null, Infinity)
+				this.block = 0
+				this.amount = 0
+			}
+			rot(dir){
+				this.yaw = -dir*Math.PI/2
+			}
+			update(){}
+			onclick(holdObj,p){
+				var prev = this.block
+				if(!prev && p.holding) this.block = p.holding
+				else{
+					var rot = this.amount
+					rot++
+					if(rot >= 8) rot = 0
+					this.amount = rot
+				}
+			}
+			onhit(){this.canDespawn=true}
 		}
-	}
-	killMessage(username){return username+" got bited by a wolf."}
-	additionalAI(){
-		let owner = this.owner && getPlayerByUsername(this.owner,this.world)
-		if(!owner || owner.die || owner.hidden) return
-		let d = max(abs(this.x-owner.x),abs(this.y-owner.y),abs(this.z-owner.z))
-		if(d > 16 && !this.sitting){
-			this.target = null
-			let x = round(this.x), y = round(this.y), z = round(this.z)
-			let closest = Infinity, cx, cy, cz
-			for(let x2=-5;x2<5;x2++) for(let z2=-5;z2<5;z2++) for(let y2=-5;y2<5;y2++){
-				if(!blockData[this.world.getBlock(owner.x+x2,owner.y+y2,owner.z+z2)].solid){
-					let dist = max(abs(x2),abs(y2),abs(z2))
-					if(dist < closest && blockData[this.world.getBlock(owner.x+x2,owner.y+y2-1,owner.z+z2)].solid) closest = dist, cx = x2, cy = y2, cz = z2
-				}
-			}
-			if(isFinite(closest)){
-				this.x = owner.x+cx
-				this.y = owner.y+cy
-				this.z = owner.z+cz
-				this.path = null
-				this.lastY = this.y
-				//this.world.sendAll({type:"entEvent",event:"tp",id:this.id, data:{x:this.x,y:this.y,z:this.z}})
-				this.world.sendEntityPos(this)
+	},
+	{
+		name:"ExperienceOrb",
+		nameMcd:"experience_orb",
+		Name:"Experience Orb",
+		type: "other",
+		width: 0.5,
+		height: 0.5,
+		depth: 0.5,
+		rotSwapOrder:true,
+		metadata: "breezeWindCharge",
+		class: ({Entity}) => class ExperienceOrb extends Entity{
+			constructor(x,y,z,value){
+				super(x, y, z, 0, 0, 0, 0, 0, 0.5, 0.5, 0.5, null, null, null, 300000)
+				this.amount = value
+				this.noHitbox = true
+				this.facesPlayer = true
 			}
-		}else if(d > 8 && !this.sitting){
-			if(now-this.lastPathFind>1000){
-				this.lastPathFind = now
-				let path = this.findPath(round(this.x),round(this.y-this.height/2),round(this.z),round(owner.x),round(owner.y),round(owner.z))
-				if(path){
-					path.splice(0,3)
-					this.path = path
+			goToPlayer(e){
+				var dist = dist3(this.x,this.y,this.z,e.x,e.y-e.height*0.5,e.z)
+				if(dist < 7.25){
+					////var speed = (7.25 - dist) / 10
+					//var aDist = abs(dist)
+					//var xd = this.x - p.x, zd = this.z - p.z;
+					//var x = xd/*/abs(zd)*/; this.velx = (x-(Math.sign(x)*7.25)) / 150//; this.velx = -this.velx
+					//if(this.onGround) {var y = this.y - (p.y-p.bottomH); this.vely = (y-(Math.sign(y)*7.25)) / 40/*; this.vely = -this.vely*/}
+					//var z = zd/*/abs(xd)*/; this.velz = (z-(Math.sign(z)*7.25)) / 150//; this.velx = -this.velx
+					this.moveTowards(e.x, e.y-e.height*0.5, e.z, 7.25,7.25,7.25, 5, true)
+				}
+				return dist < 0.5
+			}
+			serverUpdate(){
+				let pickup
+				for(let p of this.world.world.players){
+					if(!p.hidden && !p.die && p.dimension === this.dimension){
+						if(this.goToPlayer(p)) pickup = p
+					}
+				}
+				if(pickup){
+					if(now - pickup.lastXP >= 100){
+						pickup.addXP(this.amount)
+						this.canDespawn = true
+					}
 				}
 			}
 		}
-		if(owner && !owner.die && !owner.hidden){
-			if(owner.attackedById && this.target !== owner.attackedById){
-				this.target = owner.attackedById
+	},
+	{
+		name:"cow",
+		Name: "Cow",
+		type:"animal",
+		metadata: "chicken",
+		drop: [blockIds.rawBeef],
+		dropAmount: [1,3],
+		saySound: ["cow.say1","cow.say2","cow.say3","cow.say4"],
+		stepSound: ["cow.step1","cow.step2","cow.step3","cow.step4"],
+		hurtSound: ["cow.hurt1","cow.hurt2","cow.hurt3"],
+		width:0.9, height:1.4, depth:0.9,
+		health: 10,
+		attracts: [blockIds.wheat],
+		onclick(holding){
+			if(holding && holding.id === blockIds.bucket) holding.id = blockIds.milkBucket
+		}
+	},
+	{
+		name:"pig",
+		Name: "Pig",
+		type: "animal",
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","baby","saddle","boost_time"],
+		drop: [blockIds.rawPorkchop],
+		dropAmount: [1,3],
+		saySound: ["pig.say1","pig.say2","pig.say3"],
+		stepSound: ["pig.step1","pig.step2","pig.step3","pig.step4","pig.step5"],
+		deathSound: "pig.death",
+		width:0.9, height:0.9, depth:0.9,
+		health: 10,
+		attracts: [blockIds.carrot, blockIds.potato],
+	},
+	{
+		name:"creeper",
+		Name: "Creeper",
+		type: "hostile",
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","swell_dir","is_powered","is_ignited"],
+		drop: [blockIds.gunpowder],
+		dropAmount: [0,2],
+		experience: 5,
+		hurtSound: ["creeper.say1","creeper.say2","creeper.say3","creeper.say4"],
+		deathSound: "creeper.death",
+		width:0.6, height:1.7, depth:0.6,
+		health: 10,
+		hostile: true,
+		minFollowDist: 3,
+		maxFollowDist: 16,
+		detectionDist: 16,
+		onspawn(){
+			this.timerStart = 0
+			this.explodeAmount = 0
+			this.timeLimit = 30
+		},
+		explode(){
+			var x = round(this.x), y = round(this.y), z = round(this.z)
+			this.world.explode(x,y,z,3, this.liquid || !this.world.world.settings.tntExplode, this.dimension)
+		},
+		additionalUpdate(){
+			let d = this.targetEnt && max(abs(this.targetEnt.x-this.x),abs(this.targetEnt.y-this.y),abs(this.targetEnt.z-this.z))
+			if(this.targetEnt && d<=this.minFollowDist){
+				if(!this.explodeAmount){
+					this.timerStart = now
+					this.world.playSound(this.x,this.y,this.z, "random.fuse")
+				}
+				this.explodeAmount++
+				if(this.explodeAmount > 20) this.explodeAmount = 20
+			}else if(this.explodeAmount) this.explodeAmount--
+			this.shader = 0, this.extraSize = 0
+			if(this.explodeAmount>0){
+				var i = Math.floor((now - this.timerStart) / 125)
+				if(!(i%2)){
+					this.shader = 1
+				}
+				if((now - this.timerStart) / tickTime >= this.timeLimit - 10){
+					//get bigger
+					this.extraSize = min(-((this.timeLimit - 10) - ((now - this.timerStart) / tickTime)) / 40,0.25)
+					this.shader = 1
+				}
+				if((now - this.timerStart) / tickTime >= this.timeLimit){
+					this.canDespawn = true
+					this.explode()
+				}
+			}
+		},
+		onclick(block){
+			if(!block || block.id !== blockIds.flintAndSteel) return
+			this.explodeAmount = 100
+			this.timerStart = now
+			this.world.sendEntityPos(this)
+			//this.world.sendAllInChunk({type:"entEvent",event:"creeperForceExplode",id:this.id},this.chunkX,this.chunkZ,this.chunkDimension)
+		}
+	},
+	{
+		name:"sheep",
+		Name: "Sheep",
+		type: "animal",
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","baby","wool"],
+		drop: [blockIds.rawMutton],
+		dropAmount: [1,2],
+		saySound: ["sheep.say1","sheep.say2","sheep.say3"],
+		hurtSound: ["sheep.say1","sheep.say2","sheep.say3"],
+		stepSound: ["sheep.step1","sheep.step2","sheep.step3","sheep.step4","sheep.step5"],
+		width:0.9, height:1.3, depth:0.9,
+		attracts: [blockIds.wheat],
+		health: 10,
+		onspawn(){
+			this.fur = true
+			this.eating = 0
+			if(!this.color){
+				let r = rand(100), dye
+				if(r > 50) dye = "white"
+				else if(r > 35) dye = "lightGray"
+				else if(r > 20) dye = "gray"
+				else if(r > 5) dye = "black"
+				else if(r > 1) dye = "brown"
+				else dye = "pink"
+				this.color = colors.dye[dye].slice()
+				this.wool = dye+"Wool"
+			}
+		},
+		ondie(){
+			this.world.addItems(this.x,this.y,this.z,0,0,0,blockIds[this.wool],true,round(rand(1,2)))
+		},
+		onclick(holding){
+			let data = blockData[holding ? holding.id : 0]
+			if(data.dye){
+				this.color = colors.dye[data.dye].slice()
+				this.wool = data.dye+"Wool"
+				//if(multiplayer) send({type:"entEvent",event:"sheepColor",data:{color:this.color,wool:this.wool},id:this.id})
+				this.world.sendEntityPos(this)
+			}else if(data.shears){
+				if(!this.fur) return
+				this.fur = false
+				this.world.addItems(this.x,this.y,this.z,0,0,0,blockIds[this.wool],true,round(rand(1,3)))
+				//this.world.sendAllInChunk({type:"entEvent",event:"sheepFur",data:false,id:this.id},this.chunkX,this.chunkZ,this.chunkDimension)
+				this.world.sendEntityPos(this)
+				this.world.playSound(this.x,this.y,this.z, "sheep.shear")
+			}
+		},
+		additionalAI(now){
+			if(!this.eating && this.standingOn === blockIds.grass && rand() > 0.999){
+				this.eating = 1
+				//this.world.sendAllInChunk({type:"entEvent",event:"sheepEat",id:this.id},this.chunkX,this.chunkZ,this.chunkDimension)
+				this.world.sendEntityPos(this)
+			}
+			if(this.eating && this.standingOn !== blockIds.grass) this.eating = 0
+			if(this.eating && ++this.eating > 40){
+				this.eating = 0
+				this.world.setBlock(round(this.x),floor(this.y-this.height/2),round(this.z),blockIds.dirt,false,false,false,false,this.dimension)
+				this.fur = true
+				//this.world.sendAllInChunk({type:"entEvent",event:"sheepFur",data:true,id:this.id},this.chunkX,this.chunkZ,this.chunkDimension)
 				this.world.sendEntityPos(this)
-				//send({type:"entEvent",event:"wolfTarget",id:this.id, data:this.target})
+				this.world.blockParticles(this.standingOn,round(this.x),floor(this.y-this.height/2)+0.5,round(this.z),30, "break")
 			}
 		}
-	}
-	update(){
-		this.mobUpdate(now)
-		let pix = 1 / 16
-		if(!this.target && !this.tame){
-			this.world.getEntitiesNear(this.x,this.y,this.z, 16, nearEntityArray)
-			let cd = Infinity, ctarget
-			for(let i of nearEntityArray){
-				if(i.dimension === this.dimension && i.type === this.type && i.target){
-					let d = max(abs(i.x-this.x),abs(i.y-this.y),abs(i.z-this.z))
-					if(d < 16 && d < cd) cd = d, ctarget = i.target
-				}
-			}
-			if(ctarget) this.target = ctarget
+	},
+	{
+		name:"chicken",
+		Name: "Chicken",
+		type: "animal",
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","baby"],
+		drop: [blockIds.rawChicken,blockIds.feather],
+		saySound: ["chicken.say1","chicken.say2","chicken.say3"],
+		stepSound: ["chicken.step1","chicken.step2"],
+		hurtSound: ["chicken.hurt1","chicken.hurt2"],
+		width:0.4, height:0.7, depth:0.4,
+		health: 4,
+		attracts: [blockIds.beetrootSeeds, blockIds.tomatoSeeds, blockIds.pumpkinSeeds, blockIds.melonSeeds, blockIds.wheatSeeds],
+		additionalAI(){
+			if(rand() > 0.9998){
+				this.world.addItems(this.x,this.y,this.z,0,0,0,blockIds.egg,true)
+				this.world.playSound(this.x,this.y,this.z, "chicken.plop")
+			}
+		},
+		additionalUpdate(){
+			if(this.vely < 0){
+				this.vely *= 0.5
+				this.lastY = this.y
+			}
 		}
-	}
-}
-entities[entities.length] = class Blaze extends Mob{
-	static name2 = "Blaze"
-	drop = [blockIds.blazeRod]
-	dropAmount = [0,1]
-	experience = 10
-	saySound = ["blaze.breathe1","blaze.breathe2","blaze.breathe3","blaze.breathe4"]
-	hurtSound = ["blaze.hit1","blaze.hit2","blaze.hit3","blaze.hit4"]
-	deathSound = "blaze.death"
-	defaultName = "Blaze"
-	constructor(x,y,z){
-		var pix = 1/16
-		super(x, y, z, 0, 0, 0, 0, 0, 1, pix*22, 1, null,null, null, 300000)
-		this.addPart("head",null,null,0,pix*10,0,1,1,1,0,0)
-		
-		this.health = 20
-		this.hostile = true
-		this.minFollowDist = 1
-		this.maxFollowDist = 48
-		this.detectionDist = 48
-		this.attackStrength = 6
-		this.maxAttackCooldown = 200
-		this.canFly = true
-	}
-	killMessage(username){return username+" got killed by blaze."}
-	additionalAI(){
-		if(this.targetEnt){
-			if(this.attackCooldown <= 0){
-				this.attackCooldown = this.maxAttackCooldown
-				//this.world.sendAll({type:"entEvent",event:"mobAttack",id:this.id})
-				this.world.sendEntityPos(this)
+	},
+	{
+		name:"zombie",
+		Name: "Zombie",
+		type: "hostile",
+		metadata: "drowned",
+		drop: [blockIds.rottenFlesh],
+		dropAmount: [0,3],
+		experience: 5,
+		saySound: ["zombie.say1","zombie.say2","zombie.say3"],
+		stepSound: ["zombie.step1","zombie.step2","zombie.step3","zombie.step4","zombie.step5"],
+		hurtSound: ["zombie.hurt1","zombie.hurt2"],
+		deathSound: "zombie.death",
+		width:0.6, height:1.95, depth:0.6,
+		health: 20,
+		hostile: true,
+		minFollowDist: 1,
+		maxFollowDist: 35,
+		detectionDist: 17.5,
+		attackStrength: 3,
+		maxAttackCooldown: 20,
+		killMessage(username){return username+" died from some small punches from a Zombie."},
+		additionalUpdate(){
+			if(!this.liquid && this.world.getLight(round(this.x), round(this.y), round(this.z), 0)*this.world.world.skyLight > 11){
+				this.burnTimer += 0.2
 			}
-			if(this.attackCooldown === 20 || this.attackCooldown === 11 || this.attackCooldown === 2){
+		}
+	},
+	{
+		name:"skeleton",
+		Name: "Skeleton",
+		type: "hostile",
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","stray_conversion"],
+		drop: [blockIds.bone,blockIds.arrow],
+		dropAmount: [1,2],
+		experience: 5,
+		saySound: ["skeleton.say1","skeleton.say2","skeleton.say3"],
+		stepSound: ["skeleton.step1","skeleton.step2","skeleton.step3","skeleton.step4"],
+		hurtSound: ["skeleton.hurt1","skeleton.hurt2","skeleton.hurt3","skeleton.hurt4"],
+		deathSound: "skeleton.death",
+		width:0.6, height:1.99, depth:0.6,
+		health: 20,
+		hostile: true,
+		minFollowDist: 8,
+		maxFollowDist: 16,
+		detectionDist: 16,
+		maxAttackCooldown: 20,
+		onspawn(){
+			this.holding = blockIds.bow
+		},
+		additionalAI(){
+			if(blockData[this.holding].name === "bow" && this.targetEnt && this.attackCooldown <= 0){
 				let vx = this.targetEnt.x - this.x, vy = this.targetEnt.y - this.y, vz = this.targetEnt.z - this.z
 				let mag = sqrt(vx*vx+vy*vy+vz*vz)
 				vx /= mag, vy /= mag, vz /= mag
-				this.world.addEntity(new entities[entityIds.SmallFireball](this.x+vx,this.y+vy,this.z+vz,vx,vy,vz,this.id),false,this.dimension)
+				this.world.addEntity(new entities[entityIds.Arrow](this.x+vx,this.y+vy,this.z+vz,vx,vy,vz,this.id),false,this.dimension)
+				this.attackCooldown = this.maxAttackCooldown
+				this.world.sendEntityPos(this)
+				//this.world.sendAllInChunk({type:"entEvent",event:"mobAttack",id:this.id},this.chunkX,this.chunkZ,this.chunkDimension)
+			}
+		},
+		additionalUpdate(){
+			if(!this.liquid && this.world.getLight(round(this.x), round(this.y), round(this.z), 0)*this.world.world.skyLight > 11){
+				this.burnTimer += 0.2
 			}
 		}
-	}
-	update(){
-		this.mobUpdate(now)
-		if(this.burnTimer) this.burnTimer = 0
-
-		if(this.targetEnt && this.attackCooldown > 0 && this.attackCooldown < 100) this.burning = true
-	}
-}
-entities[entities.length] = class Enderman extends Mob{
-	static name2 = "Enderman"
-	defaultName = "Enderman"
-	constructor(x,y,z){
-		super(x, y, z, 0, 0, 0, 0, 0, 0.75, 3, 0.75, null,null, null, 300000)
-		let pix = 1/16
-		this.offsetY = pix*13
-		this.addPart("rightLeg",null,null,pix*-2,pix*-6,0,1,1,1,0,0)
-		this.addPart("leftLeg",null,null,pix*2,pix*-6,0,1,1,1,0,0)
-		this.addPart("rightArm",null,null,pix*-4,pix*6,pix*0,1,1,1,0,0)
-		this.addPart("leftArm",null,null,pix*4,pix*6,pix*0,1,1,1,0,0)
-		this.addPart("head",null,null,0,pix*10,0,1,1,1,0,0)
-		
-		this.health = 40
-		this.hostile = true
-		this.minFollowDist = 1
-		this.maxFollowDist = 16
-		this.detectionDist = 16
-		this.attackStrength = 7
-		this.maxAttackCooldown = 20
-	}
-	killMessage(username){return username+" died from Enderman."}
-	update(){
-		this.mobUpdate(now)
-		if(this.wet){
-			if(now - this.lastBlockDamage > 1000){
-				this.lastBlockDamage = now
-				this.damage(1)
+	},
+	{
+		name:"spider",
+		type: "hostile",
+		metadata: "bat",//todo n: cave seperate
+		saySound: ["spider.say1","spider.say2","spider.say3","spider.say4"],
+		stepSound: ["spider.step1","spider.step2","spider.step3","spider.step4"],
+		deathSound: "spider.death",
+		drop: [blockIds.string,blockIds.spiderEye],
+		dropAmount: [0,2],
+		experience: 5,
+		width:1.4, height:0.9, depth:1.4,
+		health: 16,
+		canClimb: true,
+		hostile: true,
+		minFollowDist: 1.5,
+		maxFollowDist: 16,
+		detectionDist: -1,
+		attackStrength: 2,
+		maxAttackCooldown: 20,
+		onspawn(){
+			this.fur = !!this.cave
+			this.Name = this.cave ? "Cave Spider" : "Spider"
+			if(this.cave){
+				this.width = this.height = this.depth = 0.7
+			}
+		},
+		killMessage(username){return username+" died from a tiny little spider."},
+		additionalUpdate(){
+			if(this.prevWalking !== this.walking){
+				this.prevWalking = this.walking
+				this.walkStart = now
+			}
+		}
+	},
+	{
+		name:"enderDragon",
+		nameMcd:"ender_dragon",
+		Name:"Ender Dragon",
+		type: "mob",
+		width: 16,
+		height: 8,
+		depth: 16,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","phase"]
+	},
+	null,null,null,null,null,null,null,null,null,null,null,null,null,
+	{
+		name:"TextDisplay",
+		nameMcd:"text_display",
+		Name:"Text Display",
+		type: "other",
+		width: 0,
+		height: 0,
+		depth: 0,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","transformation_interpolation_start_delta_ticks","transformation_interpolation_duration","pos_rot_interpolation_duration","translation","scale","left_rotation","right_rotation","billboard_render_constraints","brightness_override","view_range","shadow_radius","shadow_strength","width","height","glow_color_override","text","line_width","background_color","text_opacity","style_flags"],
+		class: ({Entity}) => class TextDisplay extends Entity{
+			constructor(x,y,z,text,size,color,background,glow) {
+				size = size || 1/2
+				super(x, y, z, 0, 0, 0, 0, 0, size, size, size, null,null, 0, 0)
+				this.gravityStength = 0
+				this.setText(text)
+				this.color = color || [1,1,1]
+				this.background = background || [0,0,0,0]
+				this.glow = glow || false
+				this.size = size
+			}
+			setText(t){this.text = t}
+			update(){}
+		}
+	},
+	{
+		name:"wolf",
+		Name: "Wolf",
+		type: "animal",
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","baby","flags","owneruuid","interested","collar_color","remaining_anger_time","variant"],
+		width:0.6, height:0.85, depth:0.6,
+		health: 8,
+		hostile: true,
+		minFollowDist: 1.5,
+		maxFollowDist: 16,
+		detectionDist: 16,
+		attackStrength: 4,
+		maxAttackCooldown: 20,
+		attacks: ["Sheep","Rabbit","Fox","Skeleton"],
+		attracts: [blockIds.bone],
+		onspawn(){
+			this.wetStuff = 0
+			this.tame = false
+			this.color = colors.dye.red.slice()
+		},
+		feed(id,from){
+			if(id === blockIds.bone){
+				if(this.tame){
+					let prev = this.health
+					this.health++
+					if(this.health > 20) this.health = 20
+					this.world.sendEntityPos(this)
+				}else{
+					if(rand(3) > 1){
+						this.world.sendAllInChunk({
+							type:"particles",particleType:"smokeCube",
+							x:this.x,y:this.y,z:this.z,dimension:this.dimension,amount:10
+						},this.chunkX,this.chunkZ,this.chunkDimension)
+					}else{
+						this.world.sendAllInChunk({
+							type:"particles",particleType:"hearts",
+							x:this.x,y:this.y,z:this.z,dimension:this.dimension,amount:10
+						},this.chunkX,this.chunkZ,this.chunkDimension)
+						this.world.addEntity(new entities[entityIds.ExperienceOrb](this.x,this.y,this.z, rand(1,7)),false,this.dimension)
+						this.tame = true
+						this.health *= 20/8
+						let owner = getPlayerById(from,this.world)
+						this.owner = owner.username
+						this.world.sendEntityPos(this)
+					}
+				}
 			}
+		},
+		onclick(holding,p){
+			let data = blockData[holding ? holding.id : 0]
+			if(data.dye){
+				this.color = colors.dye[data.dye].slice()
+				//if(multiplayer) send({type:"entEvent",event:"wolfCollarColor",data:this.color,id:this.id})
+				//this.updateShape()
+				this.world.sendEntityPos(this)
+			}else if(holding && holding.id === blockIds.bone){
+				holding.amount--
+				this.feed(holding.id,p.id)
+			}else if(this.tame){
+				this.sitting = !this.sitting
+				this.world.sendEntityPos(this)
+				//if(multiplayer) send({type:"entEvent",event:"sit",id:this.id, data:this.sitting})
+			}
+		},
+		killMessage(username){return username+" got bited by a wolf."},
+		additionalAI(){
+			let owner = this.owner && getPlayerByUsername(this.owner,this.world)
+			if(!owner || owner.die || owner.hidden) return
+			let d = max(abs(this.x-owner.x),abs(this.y-owner.y),abs(this.z-owner.z))
+			if(d > 16 && !this.sitting){
+				this.target = null
+				let x = round(this.x), y = round(this.y), z = round(this.z)
+				let closest = Infinity, cx, cy, cz
+				for(let x2=-5;x2<5;x2++) for(let z2=-5;z2<5;z2++) for(let y2=-5;y2<5;y2++){
+					if(!blockData[this.world.getBlock(owner.x+x2,owner.y+y2,owner.z+z2)].solid){
+						let dist = max(abs(x2),abs(y2),abs(z2))
+						if(dist < closest && blockData[this.world.getBlock(owner.x+x2,owner.y+y2-1,owner.z+z2)].solid) closest = dist, cx = x2, cy = y2, cz = z2
+					}
+				}
+				if(isFinite(closest)){
+					this.x = owner.x+cx
+					this.y = owner.y+cy
+					this.z = owner.z+cz
+					this.path = null
+					this.lastY = this.y
+					//this.world.sendAll({type:"entEvent",event:"tp",id:this.id, data:{x:this.x,y:this.y,z:this.z}})
+					this.world.sendEntityPos(this)
+				}
+			}else if(d > 8 && !this.sitting){
+				if(now-this.lastPathFind>1000){
+					this.lastPathFind = now
+					let path = this.findPath(round(this.x),round(this.y-this.height/2),round(this.z),round(owner.x),round(owner.y),round(owner.z))
+					if(path){
+						path.splice(0,3)
+						this.path = path
+					}
+				}
+			}
+			if(owner && !owner.die && !owner.hidden){
+				if(owner.attackedById && this.target !== owner.attackedById){
+					this.target = owner.attackedById
+					this.world.sendEntityPos(this)
+					//send({type:"entEvent",event:"wolfTarget",id:this.id, data:this.target})
+				}
+			}
+		},
+		additionalUpdate(){
+			let pix = 1 / 16
+			if(!this.target && !this.tame){
+				this.world.getEntitiesNear(this.x,this.y,this.z, 16, nearEntityArray)
+				let cd = Infinity, ctarget
+				for(let i of nearEntityArray){
+					if(i.dimension === this.dimension && i.type === this.type && i.target){
+						let d = max(abs(i.x-this.x),abs(i.y-this.y),abs(i.z-this.z))
+						if(d < 16 && d < cd) cd = d, ctarget = i.target
+					}
+				}
+				if(ctarget) this.target = ctarget
+			}
+		}
+	},
+	null,
+	{
+		name:"blaze",
+		Name: "Blaze",
+		type: "hostile",
+		metadata: "bat",
+		drop: [blockIds.blazeRod],
+		dropAmount: [0,1],
+		experience: 10,
+		saySound: ["blaze.breathe1","blaze.breathe2","blaze.breathe3","blaze.breathe4"],
+		hurtSound: ["blaze.hit1","blaze.hit2","blaze.hit3","blaze.hit4"],
+		deathSound: "blaze.death",
+		width:0.6, height:1.8, depth:0.6,
+		health: 20,
+		hostile: true,
+		minFollowDist: 1,
+		maxFollowDist: 48,
+		detectionDist: 48,
+		attackStrength: 6,
+		maxAttackCooldown: 200,
+		canFly: true,
+		killMessage(username){return username+" got killed by blaze."},
+		additionalAI(){
+			if(this.targetEnt){
+				if(this.attackCooldown <= 0){
+					this.attackCooldown = this.maxAttackCooldown
+					//this.world.sendAll({type:"entEvent",event:"mobAttack",id:this.id})
+					this.world.sendEntityPos(this)
+				}
+				if(this.attackCooldown === 20 || this.attackCooldown === 11 || this.attackCooldown === 2){
+					let vx = this.targetEnt.x - this.x, vy = this.targetEnt.y - this.y, vz = this.targetEnt.z - this.z
+					let mag = sqrt(vx*vx+vy*vy+vz*vz)
+					vx /= mag, vy /= mag, vz /= mag
+					this.world.addEntity(new entities[entityIds.SmallFireball](this.x+vx,this.y+vy,this.z+vz,vx,vy,vz,this.id),false,this.dimension)
+				}
+			}
+		},
+		additionalUpdate(){
+			if(this.burnTimer) this.burnTimer = 0
+			if(this.targetEnt && this.attackCooldown > 0 && this.attackCooldown < 100) this.burning = true
 		}
+	},
+	{
+		name:"SmallFireball",
+		nameMcd:"small_fireball",
+		Name:"Small Fireball",
+		type: "projectile",
+		width: 0.3125,
+		height: 0.3125,
+		depth: 0.3125,
+		metadata: "egg",
+		class: ({BlockEntity}) => class extends BlockEntity{
+			constructor(x,y,z,velx,vely,velz,from){
+				super(blockIds.fireCharge, x,y,z)
+				this.width = this.height = this.depth = 0.3125
+				this.velx = velx
+				this.vely = vely
+				this.velz = velz
+				this.from = from
+				this.facesPlayer = true
+				
+				this.gravityStength = -0.07
+			}
+			serverUpdate() {
+				if(now - this.spawn > 250){
+					var collided = entCollided(this)
+					let from = getEntityOrPlayer(this.from,this.world)
+					from = from && (from.username || from.name)
+					if(collided && collided !== this){
+						if(entPlayerCollided){
+							collided.burnTimer += 8
+							collided.damage(5,collided.username+" was shot by fireballs from "+from+".",false,null,this.previousX,this.previousY,this.previousZ)
+						}else{
+							if(collided.onhit) collided.onhit(5,false, 0,0, this.from), collided.burnTimer += 8
+						}
+						this.canDespawn = true
+					}
+				}
+				if (now - this.spawn > this.despawns || this.hasCollided) {
+					this.canDespawn = true
+					if(this.hasCollided) this.world.setBlock(round(this.x),round(this.y),round(this.z),blockIds.fire,false,false,false,false,this.dimension)
+				}
+				if(this.canDespawn) this.world.blockParticles(this.block,this.x,this.y,this.z,30, "break")
+			}
+		}
+	},
+	{
+		name:"BlockDisplay",
+		nameMcd:"block_display",
+		Name:"Block Display",
+		type: "other",
+		width: 0,
+		height: 0,
+		depth: 0,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","transformation_interpolation_start_delta_ticks","transformation_interpolation_duration","pos_rot_interpolation_duration","translation","scale","left_rotation","right_rotation","billboard_render_constraints","brightness_override","view_range","shadow_radius","shadow_strength","width","height","glow_color_override","block_state"],
+		class: ({BlockEntity}) => class extends BlockEntity{
+			constructor(block,x,y,z,w,h,d){
+				super(block, x,y,z, w,h,d)
+				this.width = w
+				this.height = h
+				this.depth = d
+			}
+			update() {}
+		}
+	},
+	null,
+	{
+		name:"enderman",
+		Name: "Enderman",
+		type: "hostile",
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","carry_state","creepy","stared_at"],
+		width:0.6, height:2.9, depth:0.6,
+		health: 40,
+		hostile: true,
+		minFollowDist: 1,
+		maxFollowDist: 16,
+		detectionDist: 16,
+		attackStrength: 7,
+		maxAttackCooldown: 20,
+		killMessage(username){return username+" died from Enderman."},
+		additionalUpdate(){
+			if(this.wet){
+				if(now - this.lastBlockDamage > 1000){
+					this.lastBlockDamage = now
+					this.damage(1)
+				}
+			}
+		}
+	},
+	{
+		name:"minecart",
+		Name:"Minecart",
+		type: "other",
+		width: 0.98,
+		height: 0.7,
+		depth: 0.98,
+		metadata: "chestMinecart",
+		class: ({Entity}) => class Minecart extends Entity{
+			pushes = true
+			constructor(x,y,z){
+				super(x, y, z, 0, 0, 0, 0, 0, 0.98, 1, 0.98, null, null, 0, Infinity)
+				this.heightOnDiagonal = 1-this.width
+				this.defaultHeight = this.height
+				this.health = 6
+				this.prevOnTrack = false
+				this.rideOffsetY = -6/16
+				this.canRide = true
+			}
+			onclick(holding,p){
+				p.riding = this.id
+				p.connection.send({type:"sit",riding:p.riding})
+				return true
+			}
+			updateVelocity(now) {
+				this.standingOn = this.world.getBlock(round(this.x), floor(this.y-this.height/2), round(this.z), this.dimension)
+				if(this.prevLiquid !== this.liquid){
+					this.prevLiquid = this.liquid
+					if(this.liquid && this.wet){
+						let pitch = (1/abs(this.y-this.previousY)*0.05+Math.random()*0.2)/((this.width+this.depth)*0.25/*0.25=average&correct width*/)
+						if(isFinite(pitch)) this.world.playSound(this.x,this.y-this.height/2,this.z,"liquid.splash",1,pitch)
+						this.world.sendAll({
+							type:"particles", particleType:"SplashParticle",
+							x:this.x, y:this.y-this.height/2, z:this.z, dimension:this.dimension, amount: 10
+						})
+					}
+				}
+				this.vely += this.gravityStength
+				let drag = this.liquid ? 0.7 : 0.95
+				let yDrag = this.liquid ? 0.7 : 0.95
+				if(blockData[this.standingOn].slide) drag = blockData[this.standingOn].slide
+				this.velz += (this.velz * drag - this.velz)
+				this.velx += (this.velx * drag - this.velx)
+				this.vely += (this.vely * yDrag - this.vely)
+			}
+			update() {//todo n: use new blockstate
+				let railX = round(this.x), railY = round(this.y), railZ = round(this.z)
+				let onBlock = this.world.getBlock(railX,railY,railZ,this.dimension)
+				if(!blockData[onBlock].rail){
+					let under = this.world.getBlock(railX,railY-1,railZ,this.dimension)//to allow diagonals
+					if(blockData[under].rail) onBlock = under, railY--
+				}
+		
+				this.updateVelocity(now)
+				for(let P of this.world.world.players){
+					if(!P.hidden && !P.die && P.dimension === this.dimension && P.riding !== this.id) this.pushByMob(P)
+				}
+				this.world.getEntitiesNear(this.x,this.y,this.z, 16, nearEntityArray)
+				for(let ent of nearEntityArray){
+					if(ent.pushes && ent !== this && ent.dimension === this.dimension && ent.riding !== this.id) this.pushByMob(ent)
+				}
+				let {velx, vely, velz} = this
+				let speed = sqrt(velx*velx+velz*velz+vely*vely)*2
+				if(speed>1){
+					this.velx /= speed, this.vely /= speed, this.velz /= speed
+				}
+				this.move(now)
+		
+				this.height = this.defaultHeight
+				this.pitch = 0
+				this.offsetY = 0
+				if(onBlock && blockData[onBlock].rail){
+					let rot = onBlock&ROTATION
+					let {prevOnTrack} = this
+					if((onBlock & isState) === CUBE){
+						let velMag = sqrt(velx*velx+velz*velz)
+						if(rot === NORTH || rot === SOUTH) this.velz = prevOnTrack ? velMag*Math.sign(velz) : velz, this.velx = 0, this.x = railX, this.yaw = round(this.yaw/Math.PI)*Math.PI
+						else if(rot === EAST || rot === WEST) this.velx = prevOnTrack ? velMag*Math.sign(velx) : velx, this.velz = 0, this.z = railZ, this.yaw = round((this.yaw-Math.PI2)/Math.PI)*Math.PI+Math.PI2
+						this.vely = 0, this.y = railY
+						this.prevOnTrack = true
+					}else if((onBlock & isState) === STAIR){//corner rail
+						let originX, originZ
+						if(rot === NORTH) originX = railX-0.5, originZ = railZ-0.5
+						else if(rot === WEST) originX = railX+0.5, originZ = railZ-0.5
+						else if(rot === SOUTH) originX = railX+0.5, originZ = railZ+0.5
+						else if(rot === EAST) originX = railX-0.5, originZ = railZ+0.5
+						let dx = this.x-originX, dz = this.z-originZ
+						let mag = sqrt(dx*dx+dz*dz)*2
+						dx /= mag, dz /= mag
+						this.x = originX+dx
+						this.z = originZ+dz
+						let targetYaw = atan2(dx,dz)+Math.PI2
+						this.yaw = round((this.yaw-targetYaw)/Math.PI)*Math.PI+targetYaw
+						//below: calculate new velocity
+						let velMag = sqrt(velx*velx+velz*velz)
+						let prevDir = velx*dz + velz*-dx//more accurate if use previous dx and dz
+						let s = dz*2, c = -dx*2
+						if(prevOnTrack){
+							prevDir = Math.sign(prevDir)
+							this.velx = velMag*s*prevDir
+							this.velz = velMag*c*prevDir
+						}else{
+							this.velx = prevDir*s
+							this.velz = prevDir*c
+						}
+						this.vely = 0, this.y = railY
+						//this.world.blockParticles(4,this.x+Math.sign(velMag)*sin(this.yaw),7,this.z+Math.sign(velMag)*cos(this.yaw),1,'','')
+						/*//stop velocity in certain direction
+						let dot = this.velx*dx + this.velz*dz
+						this.velx = this.velx - dx * dot
+						this.velz = this.velz - dz * dot*/
+						this.prevOnTrack = true
+					}else if((onBlock & isState) === SLAB){//raised
+						let diagonal = sqrt(0.5)
+						let originX = railX, originY = railY, originZ = railZ, dx = 0, dy = diagonal, dz = 0
+						if(rot === NORTH) originZ -= 0.5, dz = diagonal, this.yaw = round(this.yaw/Math.PI)*Math.PI
+						else if(rot === SOUTH) originZ += 0.5, dz = -diagonal, this.yaw = round(this.yaw/Math.PI)*Math.PI
+						else if(rot === EAST) originX -= 0.5, dx = diagonal, this.yaw = round((this.yaw-Math.PI2)/Math.PI)*Math.PI+Math.PI2
+						else if(rot === WEST) originX += 0.5, dx = -diagonal, this.yaw = round((this.yaw-Math.PI2)/Math.PI)*Math.PI+Math.PI2
+						let dot = (this.x-originX)*dx + (this.z-originZ)*dz + (this.y-originY)*dy
+						this.x = originX+dx*dot
+						this.y = originY+dy*dot
+						this.z = originZ+dz*dot
+						let velMag = sqrt(velx*velx+velz*velz+vely*vely)
+						let prevDir = velx*dx + velz*dz + vely*dy//more accurate if use previous dx and dz
+						if(prevOnTrack){
+							prevDir = Math.sign(prevDir)
+							this.velx = velMag*dx*prevDir
+							this.velz = velMag*dz*prevDir
+							this.vely = velMag*dy*prevDir
+						}else{
+							this.velx = prevDir*dx
+							this.velz = prevDir*dz
+							this.vely = prevDir*dy
+						}
+						this.prevOnTrack = true
+						this.height = this.heightOnDiagonal//to allow fitting
+						this.pitch = -Math.PI4*Math.sign(sin(this.yaw)*dx+cos(this.yaw)*dz)
+						this.offsetY = 0.25
+					}else this.prevOnTrack = false
+					if(this.yaw > Math.PId) this.yaw -= Math.PId, this.previousYaw -= Math.PId
+					if(this.yaw < 0) this.yaw += Math.PId, this.previousYaw += Math.PId
+					if(blockData[onBlock].name === "poweredRail"){
+						let velMag = sqrt(velx*velx+velz*velz+vely*vely)
+						if(onBlock&FLIP){
+							if(velMag > 0.01 && velMag<8){
+								let extraSpeed = (8-velMag)*0.06
+								this.velx += this.velx/velMag*extraSpeed
+								this.velz += this.velz/velMag*extraSpeed
+								this.vely += this.vely/velMag*extraSpeed
+								if((onBlock&isState) === CUBE){
+									if(rot === NORTH || rot === SOUTH){
+										if(blockData[this.world.getBlock(railX,railY,railZ+1)].solid) this.velz = min(this.velz,-0.1)
+										else if(blockData[this.world.getBlock(railX,railY,railZ-1)].solid) this.velz = max(this.velz,0.1)
+									}else if(rot === EAST || rot === WEST){
+										if(blockData[this.world.getBlock(railX+1,railY,railZ)].solid) this.velx = min(this.velx,-0.1)
+										else if(blockData[this.world.getBlock(railX-1,railY,railZ)].solid) this.velx = max(this.velx,0.1)
+									}
+								}
+							}
+						}else{
+							this.velx *= 0.65
+							this.velz *= 0.65
+							this.vely *= 0.65
+						}
+					}
+				}else this.prevOnTrack = false
+				
+				if(this.harmEffect > 0){
+					this.harmEffect--
+					this.roll = sin(this.harmEffect/3*Math.PI)*this.harmEffect*Math.PI*0.025
+				}else this.roll = 0
+			}
+			serverUpdate(){
+				if(this.health <= 0){
+					this.canDespawn = true
+					this.world.addItems(this.x,this.y,this.z,0,0,0,blockIds.minecart,true,1,null,null,this.id)
+				}
+			}
+			onhit(damage,remote, vx,vz, from){
+				this.health -= damage
+				if(this.harmEffect>0) this.harmEffect += 7-floor(this.health)
+				else this.harmEffect = 7-floor(this.health)
+				if(!remote) this.world.sendEntityPos(this)
+			}
+		}
+	},
+	{
+		name:"allay",
+		Name:"Allay",
+		type: "mob",
+		width: 0.35,
+		height: 0.6,
+		depth: 0.35,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","dancing","can_duplicate"]
+	},
+	{
+		name:"areaEffectCloud",
+		nameMcd:"area_effect_cloud",
+		Name:"Area Effect Cloud",
+		type: "other",
+		width: 6,
+		height: 0.5,
+		depth: 6,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","radius","waiting","particle"]
+	},
+	{
+		name:"armadillo",
+		Name:"Armadillo",
+		type: "animal",
+		width: 0.7,
+		height: 0.65,
+		depth: 0.7,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","baby","armadillo_state"]
+	},
+	{
+		name:"armorStand",
+		nameMcd:"armor_stand",
+		Name:"Armor Stand",
+		type: "living",
+		width: 0.5,
+		height: 1.975,
+		depth: 0.5,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","client_flags","head_pose","body_pose","left_arm_pose","right_arm_pose","left_leg_pose","right_leg_pose"]
+	},
+	{
+		name:"axolotl",
+		Name:"Axolotl",
+		type: "animal",
+		width: 0.75,
+		height: 0.42,
+		depth: 0.75,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","baby","variant","playing_dead","from_bucket"]
+	},
+	{
+		name:"bat",
+		Name:"Bat",
+		type: "ambient",
+		width: 0.5,
+		height: 0.9,
+		depth: 0.5,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","flags"]
+	},
+	{
+		name:"bee",
+		Name:"Bee",
+		type: "animal",
+		width: 0.7,
+		height: 0.6,
+		depth: 0.7,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","baby","flags","remaining_anger_time"]
+	},
+	{
+		name:"boat",
+		Name:"Boat",
+		type: "other",
+		width: 1.375,
+		height: 0.5625,
+		depth: 1.375,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","hurt","hurtdir","damage","type","paddle_left","paddle_right","bubble_time"]
+	},
+	{
+		name:"bogged",
+		Name:"Bogged",
+		type: "hostile",
+		width: 0.6,
+		height: 1.99,
+		depth: 0.6,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","sheared"]
+	},
+	{
+		name:"breeze",
+		Name:"Breeze",
+		type: "hostile",
+		width: 0.6,
+		height: 1.77,
+		depth: 0.6,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags"]
+	},
+	{
+		name:"breezeWindCharge",
+		nameMcd:"breeze_wind_charge",
+		Name:"Wind Charge",
+		type: "projectile",
+		width: 0.3125,
+		height: 0.3125,
+		depth: 0.3125,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen"]
+	},
+	{
+		name:"camel",
+		Name:"Camel",
+		type: "animal",
+		width: 1.7,
+		height: 2.375,
+		depth: 1.7,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","baby","flags","dash","last_pose_change_tick"]
+	},
+	{
+		name:"cat",
+		Name:"Cat",
+		type: "animal",
+		width: 0.6,
+		height: 0.7,
+		depth: 0.6,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","baby","flags","owneruuid","variant","is_lying","relax_state_one","collar_color"]
+	},
+	{
+		name:"caveSpider",
+		nameMcd:"cave_spider",
+		Name:"Cave Spider",
+		type: "hostile",
+		width: 0.7,
+		height: 0.5,
+		depth: 0.7,
+		metadata: "bat"
+	},
+	{
+		name:"chestBoat",
+		nameMcd:"chest_boat",
+		Name:"Boat with Chest",
+		type: "other",
+		width: 1.375,
+		height: 0.5625,
+		depth: 1.375,
+		metadata: "boat"
+	},
+	{
+		name:"chestMinecart",
+		nameMcd:"chest_minecart",
+		Name:"Minecart with Chest",
+		type: "other",
+		width: 0.98,
+		height: 0.7,
+		depth: 0.98,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","hurt","hurtdir","damage","display_block","display_offset","custom_display"]
+	},
+	{
+		name:"cod",
+		Name:"Cod",
+		type: "water_creature",
+		width: 0.5,
+		height: 0.3,
+		depth: 0.5,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","from_bucket"]
+	},
+	{
+		name:"commandBlockMinecart",
+		nameMcd:"command_block_minecart",
+		Name:"Minecart with Command Block",
+		type: "other",
+		width: 0.98,
+		height: 0.7,
+		depth: 0.98,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","hurt","hurtdir","damage","display_block","display_offset","custom_display","command_name","last_output"]
+	},
+	{
+		name:"dolphin",
+		Name:"Dolphin",
+		type: "water_creature",
+		width: 0.9,
+		height: 0.6,
+		depth: 0.9,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","treasure_pos","got_fish","moistness_level"]
+	},
+	{
+		name:"donkey",
+		Name:"Donkey",
+		type: "animal",
+		width: 1.3964844,
+		height: 1.5,
+		depth: 1.3964844,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","baby","flags","chest"]
+	},
+	{
+		name:"dragonFireball",
+		nameMcd:"dragon_fireball",
+		Name:"Dragon Fireball",
+		type: "projectile",
+		width: 1,
+		height: 1,
+		depth: 1,
+		metadata: "breezeWindCharge"
+	},
+	{
+		name:"drowned",
+		Name:"Drowned",
+		type: "hostile",
+		width: 0.6,
+		height: 1.95,
+		depth: 0.6,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","baby","special_type","drowned_conversion"]
+	},
+	{
+		name:"elderGuardian",
+		nameMcd:"elder_guardian",
+		Name:"Elder Guardian",
+		type: "hostile",
+		width: 1.9975,
+		height: 1.9975,
+		depth: 1.9975,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","moving","attack_target"]
+	},
+	{
+		name:"endCrystal",
+		nameMcd:"end_crystal",
+		Name:"End Crystal",
+		type: "other",
+		width: 2,
+		height: 2,
+		depth: 2,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","beam_target","show_bottom"]
+	},
+	{
+		name:"endermite",
+		Name:"Endermite",
+		type: "hostile",
+		width: 0.4,
+		height: 0.3,
+		depth: 0.4,
+		metadata: "breeze"
+	},
+	{
+		name:"evoker",
+		Name:"Evoker",
+		type: "hostile",
+		width: 0.6,
+		height: 1.95,
+		depth: 0.6,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","is_celebrating","spell_casting"]
+	},
+	{
+		name:"evokerFangs",
+		nameMcd:"evoker_fangs",
+		Name:"Evoker Fangs",
+		type: "other",
+		width: 0.5,
+		height: 0.8,
+		depth: 0.5,
+		metadata: "breezeWindCharge"
+	},
+	{
+		name:"experienceBottle",
+		nameMcd:"experience_bottle",
+		Name:"Thrown Bottle o' Enchanting",
+		type: "projectile",
+		width: 0.25,
+		height: 0.25,
+		depth: 0.25,
+		metadata: "egg"
+	},
+	{
+		name:"eyeOfEnder",
+		nameMcd:"eye_of_ender",
+		Name:"Eye of Ender",
+		type: "other",
+		width: 0.25,
+		height: 0.25,
+		depth: 0.25,
+		metadata: "egg"
+	},
+	{
+		name:"fallingBlock",
+		nameMcd:"falling_block",
+		Name:"Falling Block",
+		type: "other",
+		width: 0.98,
+		height: 0.98,
+		depth: 0.98,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","start_pos"]
+	},
+	{
+		name:"fireworkRocket",
+		nameMcd:"firework_rocket",
+		Name:"Firework Rocket",
+		type: "projectile",
+		width: 0.25,
+		height: 0.25,
+		depth: 0.25,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","fireworks_item","attached_to_target","shot_at_angle"]
+	},
+	{
+		name:"fox",
+		Name:"Fox",
+		type: "animal",
+		width: 0.6,
+		height: 0.7,
+		depth: 0.6,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","baby","type","flags","trusted_0","trusted_1"]
+	},
+	{
+		name:"frog",
+		Name:"Frog",
+		type: "animal",
+		width: 0.5,
+		height: 0.5,
+		depth: 0.5,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","baby","variant","tongue_target"]
+	},
+	{
+		name:"furnaceMinecart",
+		nameMcd:"furnace_minecart",
+		Name:"Minecart with Furnace",
+		type: "other",
+		width: 0.98,
+		height: 0.7,
+		depth: 0.98,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","hurt","hurtdir","damage","display_block","display_offset","custom_display","fuel"]
+	},
+	{
+		name:"ghast",
+		Name:"Ghast",
+		type: "mob",
+		width: 4,
+		height: 4,
+		depth: 4,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","is_charging"]
+	},
+	{
+		name:"giant",
+		Name:"Giant",
+		type: "hostile",
+		width: 3.6,
+		height: 12,
+		depth: 3.6,
+		metadata: "breeze"
+	},
+	{
+		name:"glowItemFrame",
+		nameMcd:"glow_item_frame",
+		Name:"Glow Item Frame",
+		type: "other",
+		width: 0.5,
+		height: 0.5,
+		depth: 0.5,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","item","rotation"],
+		class: ({itemFrame}) => class extends itemFrame{}
+	},
+	{
+		name:"glowSquid",
+		nameMcd:"glow_squid",
+		Name:"Glow Squid",
+		type: "water_creature",
+		width: 0.8,
+		height: 0.8,
+		depth: 0.8,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","dark_ticks_remaining"]
+	},
+	{
+		name:"goat",
+		Name:"Goat",
+		type: "animal",
+		width: 0.9,
+		height: 1.3,
+		depth: 0.9,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","baby","is_screaming_goat","has_left_horn","has_right_horn"]
+	},
+	{
+		name:"guardian",
+		Name:"Guardian",
+		type: "hostile",
+		width: 0.85,
+		height: 0.85,
+		depth: 0.85,
+		metadata: "elderGuardian"
+	},
+	{
+		name:"hoglin",
+		Name:"Hoglin",
+		type: "animal",
+		width: 1.3964844,
+		height: 1.4,
+		depth: 1.3964844,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","baby","immune_to_zombification"]
+	},
+	{
+		name:"hopperMinecart",
+		nameMcd:"hopper_minecart",
+		Name:"Minecart with Hopper",
+		type: "other",
+		width: 0.98,
+		height: 0.7,
+		depth: 0.98,
+		metadata: "chestMinecart"
+	},
+	{
+		name:"horse",
+		Name:"Horse",
+		type: "animal",
+		width: 1.3964844,
+		height: 1.6,
+		depth: 1.3964844,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","baby","flags","type_variant"]
+	},
+	{
+		name:"husk",
+		Name:"Husk",
+		type: "hostile",
+		width: 0.6,
+		height: 1.95,
+		depth: 0.6,
+		metadata: "drowned"
+	},
+	{
+		name:"illusioner",
+		Name:"Illusioner",
+		type: "hostile",
+		width: 0.6,
+		height: 1.95,
+		depth: 0.6,
+		metadata: "evoker"
+	},
+	{
+		name:"interaction",
+		Name:"Interaction",
+		type: "other",
+		width: 0,
+		height: 0,
+		depth: 0,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","width","height","response"]
+	},
+	{
+		name:"ironGolem",
+		nameMcd:"iron_golem",
+		Name:"Iron Golem",
+		type: "mob",
+		width: 1.4,
+		height: 2.7,
+		depth: 1.4,
+		metadata: "bat"
+	},
+	{
+		name:"itemDisplay",
+		nameMcd:"item_display",
+		Name:"Item Display",
+		type: "other",
+		width: 0,
+		height: 0,
+		depth: 0,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","transformation_interpolation_start_delta_ticks","transformation_interpolation_duration","pos_rot_interpolation_duration","translation","scale","left_rotation","right_rotation","billboard_render_constraints","brightness_override","view_range","shadow_radius","shadow_strength","width","height","glow_color_override","item_stack","item_display"]
+	},
+	{
+		name:"ominousItemSpawner",
+		nameMcd:"ominous_item_spawner",
+		Name:"Ominous Item Spawner",
+		type: "other",
+		width: 0.25,
+		height: 0.25,
+		depth: 0.25,
+		metadata: "item"
+	},
+	{
+		name:"fireball",
+		Name:"Fireball",
+		type: "projectile",
+		width: 1,
+		height: 1,
+		depth: 1,
+		metadata: "egg"
+	},
+	{
+		name:"leashKnot",
+		nameMcd:"leash_knot",
+		Name:"Leash Knot",
+		type: "other",
+		width: 0.375,
+		height: 0.5,
+		depth: 0.375,
+		metadata: "breezeWindCharge"
+	},
+	{
+		name:"lightningBolt",
+		nameMcd:"lightning_bolt",
+		Name:"Lightning Bolt",
+		type: "other",
+		width: 0,
+		height: 0,
+		depth: 0,
+		metadata: "breezeWindCharge"
+	},
+	{
+		name:"llama",
+		Name:"Llama",
+		type: "animal",
+		width: 0.9,
+		height: 1.87,
+		depth: 0.9,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","baby","flags","chest","strength","variant"]
+	},
+	{
+		name:"llamaSpit",
+		nameMcd:"llama_spit",
+		Name:"Llama Spit",
+		type: "projectile",
+		width: 0.25,
+		height: 0.25,
+		depth: 0.25,
+		metadata: "breezeWindCharge"
+	},
+	{
+		name:"magmaCube",
+		nameMcd:"magma_cube",
+		Name:"Magma Cube",
+		type: "mob",
+		width: 0.52,
+		height: 0.52,
+		depth: 0.52,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","size"]
+	},
+	{
+		name:"marker",
+		Name:"Marker",
+		type: "other",
+		width: 0,
+		height: 0,
+		depth: 0,
+		metadata: "breezeWindCharge"
+	},
+	{
+		name:"mooshroom",
+		Name:"Mooshroom",
+		type: "animal",
+		width: 0.9,
+		height: 1.4,
+		depth: 0.9,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","baby","type"]
+	},
+	{
+		name:"mule",
+		Name:"Mule",
+		type: "animal",
+		width: 1.3964844,
+		height: 1.6,
+		depth: 1.3964844,
+		metadata: "donkey"
+	},
+	{
+		name:"ocelot",
+		Name:"Ocelot",
+		type: "animal",
+		width: 0.6,
+		height: 0.7,
+		depth: 0.6,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","baby","trusting"]
+	},
+	{
+		name:"painting",
+		Name:"Painting",
+		type: "other",
+		width: 0.5,
+		height: 0.5,
+		depth: 0.5,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","painting_variant"]
+	},
+	{
+		name:"panda",
+		Name:"Panda",
+		type: "animal",
+		width: 1.3,
+		height: 1.25,
+		depth: 1.3,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","baby","unhappy_counter","sneeze_counter","eat_counter","main_gene","hidden_gene","flags"]
+	},
+	{
+		name:"parrot",
+		Name:"Parrot",
+		type: "animal",
+		width: 0.5,
+		height: 0.9,
+		depth: 0.5,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","baby","flags","owneruuid","variant"]
+	},
+	{
+		name:"phantom",
+		Name:"Phantom",
+		type: "mob",
+		width: 0.9,
+		height: 0.5,
+		depth: 0.9,
+		metadata: "magmaCube"
+	},
+	{
+		name:"piglin",
+		Name:"Piglin",
+		type: "hostile",
+		width: 0.6,
+		height: 1.95,
+		depth: 0.6,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","immune_to_zombification","baby","is_charging_crossbow","is_dancing"]
+	},
+	{
+		name:"piglinBrute",
+		nameMcd:"piglin_brute",
+		Name:"Piglin Brute",
+		type: "hostile",
+		width: 0.6,
+		height: 1.95,
+		depth: 0.6,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","immune_to_zombification"]
+	},
+	{
+		name:"pillager",
+		Name:"Pillager",
+		type: "hostile",
+		width: 0.6,
+		height: 1.95,
+		depth: 0.6,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","is_celebrating","is_charging_crossbow"]
+	},
+	{
+		name:"polarBear",
+		nameMcd:"polar_bear",
+		Name:"Polar Bear",
+		type: "animal",
+		width: 1.4,
+		height: 1.4,
+		depth: 1.4,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","baby","standing"]
+	},
+	{
+		name:"potion",
+		Name:"Potion",
+		type: "projectile",
+		width: 0.25,
+		height: 0.25,
+		depth: 0.25,
+		metadata: "egg"
+	},
+	{
+		name:"pufferfish",
+		Name:"Pufferfish",
+		type: "water_creature",
+		width: 0.7,
+		height: 0.7,
+		depth: 0.7,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","from_bucket","puff_state"]
+	},
+	{
+		name:"rabbit",
+		Name:"Rabbit",
+		type: "animal",
+		width: 0.4,
+		height: 0.5,
+		depth: 0.4,
+		metadata: "mooshroom"
+	},
+	{
+		name:"ravager",
+		Name:"Ravager",
+		type: "hostile",
+		width: 1.95,
+		height: 2.2,
+		depth: 1.95,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","is_celebrating"]
+	},
+	{
+		name:"salmon",
+		Name:"Salmon",
+		type: "water_creature",
+		width: 0.7,
+		height: 0.4,
+		depth: 0.7,
+		metadata: "cod"
+	},
+	{
+		name:"shulker",
+		Name:"Shulker",
+		type: "mob",
+		width: 1,
+		height: 1,
+		depth: 1,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","attach_face","peek","color"]
+	},
+	{
+		name:"shulkerBullet",
+		nameMcd:"shulker_bullet",
+		Name:"Shulker Bullet",
+		type: "projectile",
+		width: 0.3125,
+		height: 0.3125,
+		depth: 0.3125,
+		metadata: "breezeWindCharge"
+	},
+	{
+		name:"silverfish",
+		Name:"Silverfish",
+		type: "hostile",
+		width: 0.4,
+		height: 0.3,
+		depth: 0.4,
+		metadata: "breeze"
+	},
+	{
+		name:"skeletonHorse",
+		nameMcd:"skeleton_horse",
+		Name:"Skeleton Horse",
+		type: "animal",
+		width: 1.3964844,
+		height: 1.6,
+		depth: 1.3964844,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","baby","flags"]
+	},
+	{
+		name:"slime",
+		Name:"Slime",
+		type: "mob",
+		width: 0.52,
+		height: 0.52,
+		depth: 0.52,
+		metadata: "magmaCube"
+	},
+	{
+		name:"sniffer",
+		Name:"Sniffer",
+		type: "animal",
+		width: 1.9,
+		height: 1.75,
+		depth: 1.9,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","baby","state","drop_seed_at_tick"]
+	},
+	{
+		name:"snowGolem",
+		nameMcd:"snow_golem",
+		Name:"Snow Golem",
+		type: "mob",
+		width: 0.7,
+		height: 1.9,
+		depth: 0.7,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","pumpkin"]
+	},
+	{
+		name:"spawnerMinecart",
+		nameMcd:"spawner_minecart",
+		Name:"Minecart with Monster Spawner",
+		type: "other",
+		width: 0.98,
+		height: 0.7,
+		depth: 0.98,
+		metadata: "chestMinecart"
+	},
+	{
+		name:"spectralArrow",
+		nameMcd:"spectral_arrow",
+		Name:"Spectral Arrow",
+		type: "projectile",
+		width: 0.5,
+		height: 0.5,
+		depth: 0.5,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","flags","pierce_level"]
+	},
+	{
+		name:"squid",
+		Name:"Squid",
+		type: "water_creature",
+		width: 0.8,
+		height: 0.8,
+		depth: 0.8,
+		metadata: "breeze"
+	},
+	{
+		name:"stray",
+		Name:"Stray",
+		type: "hostile",
+		width: 0.6,
+		height: 1.99,
+		depth: 0.6,
+		metadata: "breeze"
+	},
+	{
+		name:"strider",
+		Name:"Strider",
+		type: "animal",
+		width: 0.9,
+		height: 1.7,
+		depth: 0.9,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","baby","boost_time","suffocating","saddle"]
+	},
+	{
+		name:"tadpole",
+		Name:"Tadpole",
+		type: "water_creature",
+		width: 0.4,
+		height: 0.3,
+		depth: 0.4,
+		metadata: "cod"
+	},
+	{
+		name:"tntMinecart",
+		nameMcd:"tnt_minecart",
+		Name:"Minecart with TNT",
+		type: "other",
+		width: 0.98,
+		height: 0.7,
+		depth: 0.98,
+		metadata: "chestMinecart"
+	},
+	{
+		name:"traderLlama",
+		nameMcd:"trader_llama",
+		Name:"Trader Llama",
+		type: "animal",
+		width: 0.9,
+		height: 1.87,
+		depth: 0.9,
+		metadata: "llama"
+	},
+	{
+		name:"trident",
+		Name:"Trident",
+		type: "projectile",
+		width: 0.5,
+		height: 0.5,
+		depth: 0.5,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","flags","pierce_level","loyalty","foil"]
+	},
+	{
+		name:"tropicalFish",
+		nameMcd:"tropical_fish",
+		Name:"Tropical Fish",
+		type: "water_creature",
+		width: 0.5,
+		height: 0.4,
+		depth: 0.5,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","from_bucket","type_variant"]
+	},
+	{
+		name:"turtle",
+		Name:"Turtle",
+		type: "animal",
+		width: 1.2,
+		height: 0.4,
+		depth: 1.2,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","baby","home_pos","has_egg","laying_egg","travel_pos","going_home","travelling"]
+	},
+	{
+		name:"vex",
+		Name:"Vex",
+		type: "hostile",
+		width: 0.4,
+		height: 0.8,
+		depth: 0.4,
+		metadata: "bat"
+	},
+	{
+		name:"villager",
+		Name:"Villager",
+		type: "passive",
+		width: 0.6,
+		height: 1.95,
+		depth: 0.6,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","baby","unhappy_counter","villager_data"]
+	},
+	{
+		name:"vindicator",
+		Name:"Vindicator",
+		type: "hostile",
+		width: 0.6,
+		height: 1.95,
+		depth: 0.6,
+		metadata: "ravager"
+	},
+	{
+		name:"wanderingTrader",
+		nameMcd:"wandering_trader",
+		Name:"Wandering Trader",
+		type: "passive",
+		width: 0.6,
+		height: 1.95,
+		depth: 0.6,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","baby","unhappy_counter"]
+	},
+	{
+		name:"warden",
+		Name:"Warden",
+		type: "hostile",
+		width: 0.9,
+		height: 2.9,
+		depth: 0.9,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","client_anger_level"]
+	},
+	{
+		name:"windCharge",
+		nameMcd:"wind_charge",
+		Name:"Wind Charge",
+		type: "projectile",
+		width: 0.3125,
+		height: 0.3125,
+		depth: 0.3125,
+		metadata: "breezeWindCharge"
+	},
+	{
+		name:"witch",
+		Name:"Witch",
+		type: "hostile",
+		width: 0.6,
+		height: 1.95,
+		depth: 0.6,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","is_celebrating","using_item"]
+	},
+	{
+		name:"wither",
+		Name:"Wither",
+		type: "hostile",
+		width: 0.9,
+		height: 3.5,
+		depth: 0.9,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","target_a","target_b","target_c","inv"]
+	},
+	{
+		name:"witherSkeleton",
+		nameMcd:"wither_skeleton",
+		Name:"Wither Skeleton",
+		type: "hostile",
+		width: 0.7,
+		height: 2.4,
+		depth: 0.7,
+		metadata: "breeze"
+	},
+	{
+		name:"witherSkull",
+		nameMcd:"wither_skull",
+		Name:"Wither Skull",
+		type: "projectile",
+		width: 0.3125,
+		height: 0.3125,
+		depth: 0.3125,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","dangerous"]
+	},
+	{
+		name:"zoglin",
+		Name:"Zoglin",
+		type: "hostile",
+		width: 1.3964844,
+		height: 1.4,
+		depth: 1.3964844,
+		metadata: "chicken"
+	},
+	{
+		name:"zombieHorse",
+		nameMcd:"zombie_horse",
+		Name:"Zombie Horse",
+		type: "animal",
+		width: 1.3964844,
+		height: 1.6,
+		depth: 1.3964844,
+		metadata: "skeletonHorse"
+	},
+	{
+		name:"zombieVillager",
+		nameMcd:"zombie_villager",
+		Name:"Zombie Villager",
+		type: "hostile",
+		width: 0.6,
+		height: 1.95,
+		depth: 0.6,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","mob_flags","baby","special_type","drowned_conversion","converting","villager_data"]
+	},
+	{
+		name:"zombifiedPiglin",
+		nameMcd:"zombified_piglin",
+		Name:"Zombified Piglin",
+		type: "hostile",
+		width: 0.6,
+		height: 1.95,
+		depth: 0.6,
+		metadata: "drowned"
+	},
+	{
+		name:"player",
+		Name:"Player",
+		type: "player",
+		width: 0.6,
+		height: 1.8,
+		depth: 0.6,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","living_entity_flags","health","effect_particles","effect_ambience","arrow_count","stinger_count","sleeping_pos","player_absorption","score","player_mode_customisation","player_main_hand","shoulder_left","shoulder_right"]
+	},
+	{
+		name:"fishingBobber",
+		nameMcd:"fishing_bobber",
+		Name:"Fishing Bobber",
+		type: "projectile",
+		width: 0.25,
+		height: 0.25,
+		depth: 0.25,
+		metadata: ["shared_flags","air_supply","custom_name","custom_name_visible","silent","no_gravity","pose","ticks_frozen","hooked_entity","biting"]
 	}
+]
+win.entityData = entityData
+//todo n: extra used variables (like color) in posEntity
+//find: \t+(this.)*(\w*?) = (.*?)\n
+//replace: \t\t$2: $3,\n
+let entityClassMap = {Entity,Mob}
+for(let i=0; i<entityData.length; i++){
+	let data = entityData[i]
+	if(!data) continue
+	if(!data.name) throw new Error("missing name at "+i)
+	let mob = data.type === "animal" || data.type === "hostile" || data.type === "passive"
+	if(mob) {
+		data.hostile = data.type === "hostile"
+		data.mob = true
+	}
+	let ent = data.class ? data.class(entityClassMap) : (class extends (mob ? Mob : Entity) {
+		constructor(x,y,z){
+			super(x,y,z,0,0,0,0,0, data.width,data.height,data.depth, null,null,null)
+			if(this.onspawn) this.onspawn()
+		}
+	})
+	Object.assign(ent.prototype, data)
+	ent.name2 = data.name
+	ent.prototype.type = data.name
+	ent.prototype.entId = i
+	entityIds[data.name] = i
+	entityClassMap[data.name] = ent
+	entities[i] = ent
 }
 
-entities[entities.length] = class TextDisplay extends Entity{
-	static name2 = "TextDisplay"
-	constructor(x,y,z,text,size,color,background,glow) {
-		size = size || 1/2
-		super(x, y, z, 0, 0, 0, 0, 0, size, size, size, null,null, 0, 0)
-		this.gravityStength = 0
-		this.setText(text)
-		this.color = color || [1,1,1]
-		this.background = background || [0,0,0,0]
-		this.glow = glow || false
-		this.size = size
-	}
-	setText(t){this.text = t}
-}
-
-let entityOrder = ['Item','BlockEntity', 'PrimedTNT', 'PrimedSuperTNT', 'PrimedUltraTNT', 'PrimedUnTNT', 'MovingBlock', 'EnderPearl', 'Snowball', 'Egg', 'SlingshotShot', 'Arrow', 'Sign', 'ItemFrame', 'ExperienceOrb', 'Cow', 'Pig', 'Creeper', 'Sheep', 'Chicken', 'Zombie', 'Skeleton', 'Spider', 'EnderDragon', 'BlockParticle', 'PoofParticle', 'FallingDustParticle', 'RedstoneParticle', 'ShockwaveParticle', 'SmokeParticle', 'NoteParticle', 'GlintParticle', 'FlameParticle', 'LavaParticle', 'DripParticle', 'SplashParticle', 'Spark', 'TextDisplay','Wolf','HeartParticle',"Blaze","SmallFireball","BlockDisplay","BeaconBeam","Enderman","Minecart"]
-let unorderedEntities = entities.slice()
-for(let i=0; i<entities.length; i++){
-	entityIds[entities[i].name2] = i
-}
-for(let i=0; i<entityOrder.length; i++){
-	if(entityIds[entityOrder[i]] === undefined){
-		delete entities[i]
-		delete entityIds[entityOrder[i]]
-		continue
-	}
-	entities[i] = unorderedEntities[entityIds[entityOrder[i]]]
-	entities[i].prototype.entId = i
-	entities[i].prototype.type = entities[i].name2
-	entityIds[entities[i].name2] = i
-}
-win.serverEntities = entities, win.serverEntityIds = entityIds
+//let entityOrder = ['Item','BlockEntity', 'PrimedTNT', 'PrimedSuperTNT', 'PrimedUltraTNT', 'PrimedUnTNT', 'MovingBlock', 'EnderPearl', 'Snowball', 'Egg', 'SlingshotShot', 'Arrow', 'Sign', 'ItemFrame', 'ExperienceOrb', 'cow', 'pig', 'creeper', 'sheep', 'chicken', 'zombie', 'skeleton', 'spider', 'EnderDragon', 'BlockParticle', 'PoofParticle', 'FallingDustParticle', 'RedstoneParticle', 'ShockwaveParticle', 'SmokeParticle', 'NoteParticle', 'GlintParticle', 'FlameParticle', 'LavaParticle', 'DripParticle', 'SplashParticle', 'Spark', 'TextDisplay','Wolf','HeartParticle',"Blaze","SmallFireball","BlockDisplay","BeaconBeam","Enderman","Minecart"]
+win.serverEntities = entities, win.entityIds = entityIds
+//win.entityOrder = entityOrder
 console.log(entities.length,'entities and particles on server side')
 
 //islandgenerator from https://www.khanacademy.org/computer-programming/minekhan-island-world-type/5771215095939072
@@ -25115,7 +33162,7 @@
 			}
 		}
 	}
-	tick() {
+	tick() {//todo n: move to blockData
 		var world = this.world
 		for (let i = 0; i < 40; i++) {
 			let rnd = Math.random() * this.blocks.length | 0
@@ -25124,248 +33171,19 @@
 			let y = (rnd >> 4 & 15) + this.y
 			let z = (rnd & 15) + this.z
 			if(i<18){
-				if ((blockID & isCube) === blockIds.grass || (blockID & isCube) === blockIds.mycelium) {
-					// Spread grass
-					if (!blockData[world.getBlock(x, y + 1, z, this.type)].transparent) {
-						world.setBlock(x, y, z, blockIds.dirt, false,false,false,false, this.type)
-						return
-					}
-
-					let rnd2 = Math.random() * 27 | 0
-					let x2 = rnd2 % 3 - 1
-					rnd2 = (rnd2 - x2 - 1) / 3
-					let y2 = rnd2 % 3 - 1
-					rnd2 = (rnd2 - y2 - 1) / 3
-					z += rnd2 - 1
-					x += x2
-					y += y2
-
-					let spreadTo = this.world.getBlock(x, y, z, this.type)
-					if ((spreadTo & isCube) === blockIds.dirt && this.world.getBlock(x, y + 1, z, this.type) === blockIds.air) {
-						this.world.setBlock(x, y, z, (blockID & isCube) | (spreadTo & (~isCube)), false,false,false,false, this.type)
-					}
-				} else if((blockID & isCube) === blockIds.crimsonNylium || (blockID & isCube) === blockIds.warpedNylium){
-					// Spread nylium
-					if (!blockData[world.getBlock(x, y + 1, z, this.type)].transparent) {
-						world.setBlock(x, y, z, blockIds.netherrack, false,false,false,false, this.type)
-						return
-					}
-
-					let rnd2 = Math.random() * 27 | 0
-					let x2 = rnd2 % 3 - 1
-					rnd2 = (rnd2 - x2 - 1) / 3
-					let y2 = rnd2 % 3 - 1
-					rnd2 = (rnd2 - y2 - 1) / 3
-					z += rnd2 - 1
-					x += x2
-					y += y2
-
-					let spreadTo = this.world.getBlock(x, y, z, this.type)
-					if ((spreadTo & isCube) === blockIds.netherrack && this.world.getBlock(x, y + 1, z, this.type) === blockIds.air) {
-						this.world.setBlock(x, y, z, (blockID & isCube) | (spreadTo & (~isCube)), false,false,false,false, this.type)
-					}
-				} else if (block.grow){
-					block.grow(x,y,z,this.world)
-				}else if(block.name === "vine" || block.name === "weepingVines"){
-					if(!this.world.getBlock(x,y-1,z)){
-						this.world.setBlock(x,y-1,z,blockID, false,false,false,false)
-					}
-				}else if(block.name === "twistingVines"){
-					let i = (rnd >> 8) + this.x
-					let j = (rnd >> 4 & 15) + this.y
-					let k = (rnd & 15) + this.z
-					if(!this.world.getBlock(x,y+1,z)){
-						this.world.setBlock(x,y+1,z,blockID, false,false,false,false)
-					}
+				if (block.grow){
+					block.grow(x,y,z,this.world,blockID)
 				}
 			}
 			if(i<8){
-				if(blockID === blockIds.tomatoPlant){
-					world.setBlock(x, y, z, blockIds.tomatoPlant|SLAB, false,false,false,false, this.type)
-				}else if(blockID === (blockIds.tomatoPlant|SLAB)){
-					world.setBlock(x, y, z, blockIds.tomatoPlant|STAIR, false,false,false,false, this.type)
-				}else if(blockID === (blockIds.tomatoPlant|STAIR)){
-					world.setBlock(x, y, z, blockIds.tomatoPlant|CROSS, false,false,false,false, this.type)
-				}else if(blockID === (blockIds.tomatoPlant|CROSS)){
-					world.setBlock(x, y, z, blockIds.tomatoPlant|TALLCROSS, false,false,false,false, this.type)
-				}/*wheat*/else if(blockID === (blockIds.wheat)){
-					world.setBlock(x, y, z, blockIds.wheat|SLAB, false,false,false,false, this.type)
-				}else if(blockID === (blockIds.wheat|SLAB)){
-					world.setBlock(x, y, z, blockIds.wheat|STAIR, false,false,false,false, this.type)
-				}else if(blockID === (blockIds.wheat|STAIR)){
-					world.setBlock(x, y, z, blockIds.wheat|CROSS, false,false,false,false, this.type)
-				}else if(blockID === (blockIds.wheat|CROSS)){
-					world.setBlock(x, y, z, blockIds.wheat|TALLCROSS, false,false,false,false, this.type)
-				}else if(blockID === (blockIds.wheat|TALLCROSS)){
-					world.setBlock(x, y, z, blockIds.wheat|DOOR, false,false,false,false, this.type)
-				}else if(blockID === (blockIds.wheat|DOOR)){
-					world.setBlock(x, y, z, blockIds.wheat|TORCH, false,false,false,false, this.type)
-				}else if(blockID === (blockIds.wheat|TORCH)){
-					world.setBlock(x, y, z, blockIds.wheat|LANTERN, false,false,false,false, this.type)
-				}/*cactus fruit*/else if(blockID === (blockIds.newCactusFruit|CROSS)){
-					world.setBlock(x, y, z, blockIds.greenCactusFruit|CROSS, false,false,false,false, this.type)
-				}else if(blockID === (blockIds.greenCactusFruit|CROSS)){
-					world.setBlock(x, y, z, blockIds.redCactusFruit|CROSS, false,false,false,false, this.type)
-				}else if(blockID === (blockIds.redCactusFruit|CROSS)){
-					world.setBlock(x, y, z, blockIds.purpleCactusFruit|CROSS, false,false,false,false, this.type)
-				}/*cactus*/else if(blockID === (blockIds.cactus|CACTUS)){
-					var tall = 0
-					var maxTall = 3
-					for(var t=0; t<maxTall; t++){
-						if(world.getBlock(x,y-t,z) === (blockIds.cactus|CACTUS)) tall++
-						else break
-					}
-					if(tall >= maxTall) return
-					
-					var above = world.getBlock(x,y+1,z)
-					if(blockData[above].cactusFruit){
-						if(world.getBlock(x,y+2,z)) return //the cactus fruit can't replace blocks
-						world.setBlock(x,y+2,z, above, false,false,false,false, this.type) //move the cactus fruit up
-					}else if(above) return //there is a block so it can't grow
-					world.setBlock(x,y+1,z, blockIds.cactus|CACTUS, false,false,false,false, this.type)
-				}else if(blockID === blockIds.sweetBerryBush){
-					world.setBlock(x, y, z, blockIds.sweetBerryBush|SLAB, false,false,false,false, this.type)
-				}else if(blockID === (blockIds.sweetBerryBush | SLAB)){
-					world.setBlock(x, y, z, blockIds.sweetBerryBush|STAIR, false,false,false,false, this.type)
-				}else if(blockID === (blockIds.sweetBerryBush | STAIR)){
-					world.setBlock(x, y, z, blockIds.sweetBerryBush|CROSS, false,false,false,false, this.type)
-				}else if(blockID === (blockIds.cocoa | (blockID & ROTATION))){
-					world.setBlock(x, y, z, blockIds.cocoa|SLAB|(blockID&ROTATION), false,false,false,false, this.type)
-				}else if(blockID === (blockIds.cocoa | SLAB | (blockID & ROTATION))){
-					world.setBlock(x, y, z, blockIds.cocoa|STAIR|(blockID&ROTATION), false,false,false,false, this.type)
-				}else if(blockID === blockIds.beetroots){//beetroot
-					world.setBlock(x, y, z, (blockIds.beetroots|SLAB), false,false,false,false, this.type)
-				}else if(blockID === (blockIds.beetroots | SLAB)){
-					world.setBlock(x, y, z, (blockIds.beetroots|STAIR), false,false,false,false, this.type)
-				}else if(blockID === (blockIds.beetroots | STAIR)){
-					world.setBlock(x, y, z, (blockIds.beetroots|CROSS), false,false,false,false, this.type)
-				}else if(blockID === blockIds.potatoes){//potato
-					world.setBlock(x, y, z, (blockIds.potatoes|SLAB), false,false,false,false, this.type)
-				}else if(blockID === (blockIds.potatoes | SLAB)){
-					world.setBlock(x, y, z, (blockIds.potatoes|STAIR), false,false,false,false, this.type)
-				}else if(blockID === (blockIds.potatoes | STAIR)){
-					world.setBlock(x, y, z, (blockIds.potatoes|CROSS), false,false,false,false, this.type)
-				}else if(blockID === blockIds.carrots){//carrot
-					world.setBlock(x, y, z, (blockIds.carrots|SLAB), false,false,false,false, this.type)
-				}else if(blockID === (blockIds.carrots | SLAB)){
-					world.setBlock(x, y, z, (blockIds.carrots|STAIR), false,false,false,false, this.type)
-				}else if(blockID === (blockIds.carrots | STAIR)){
-					world.setBlock(x, y, z, (blockIds.carrots|CROSS), false,false,false,false, this.type)
-				}else if(blockID === (blockIds.bambooStalk | STAIR) || blockID === (blockIds.bambooStalk | SLAB) || blockID === blockIds.bambooStalk || blockID === (blockIds.bambooStalk | CROSS) || blockID === (blockIds.bambooStalk | TALLCROSS)){
-					var tall = 0
-					var maxTall = 16
-					let blocks = []
-					for(let t=0; t<maxTall; t++){
-						let block = world.getBlock(x,y-t,z)
-						if(blockData[block].name === "bambooStalk"){
-							tall++
-							blocks.push(block)
-						}else break
-					}
-					if(tall >= maxTall) return
-					
-					var above = world.getBlock(x,y+1,z)
-					if(above) return //there is a block so it can't grow
-					world.setBlock(x,y+1,z, blockIds.bambooStalk | (tall > 3 ? STAIR : TALLCROSS), false,false,false,false, this.type)
-					if(tall > 3){
-						for(let t=0; t<tall; t++){
-							let block = blocks[t]
-							if(t === 0 && block !== (blockIds.bambooStalk | SLAB)) world.setBlock(x,y-t,z,blockIds.bambooStalk | SLAB,false,false,false,false)
-							else if(block !== blockIds.bambooStalk) world.setBlock(x,y-t,z,blockIds.bambooStalk,false,false,false,false)
-						}
-					}else{
-						for(let t=0; t<tall; t++){
-							let block = blocks[t]
-							if(t === 0 && block !== (blockIds.bambooStalk | CROSS)) world.setBlock(x,y-t,z,blockIds.bambooStalk | CROSS,false,false,false,false)
-						}
-					}
-				}else if(blockID === (blockIds.bambooShoot | CROSS)){
-					if(world.getBlock(x,y+1,z)) return
-					world.setBlock(x, y, z, blockIds.bambooStalk|CROSS, false,false,false,false, this.type)
-					world.setBlock(x, y+1, z, blockIds.bambooStalk|TALLCROSS, false,false,false,false, this.type)
-				}else if(block.name === "sugarCane"){
-					let b = blockID
-					var tall = 0
-					var maxTall = 3
-					for(var t=0; t<maxTall; t++){
-						if(world.getBlock(x,y-t,z) === b) tall++
-						else break
-					}
-					if(tall >= maxTall) return
-					
-					var above = world.getBlock(x,y+1,z)
-					if(above) return //there is a block so it can't grow
-					world.setBlock(x,y+1,z, b, false,false,false,false, this.type)
-				}else if(blockID === blockIds.pitcherCrop){
-					world.setBlock(x, y, z, (blockIds.pitcherCrop|SLAB), false,false,false,false, this.type)
-				}else if(blockID === (blockIds.pitcherCrop | SLAB)){
-					world.setBlock(x, y, z, (blockIds.pitcherCrop|STAIR), false,false,false,false, this.type)
-				}else if(blockID === (blockIds.pitcherCrop | STAIR)){
-					world.setBlock(x, y, z, (blockIds.pitcherCrop|CROSS), false,false,false,false, this.type)
-				}else if(blockID === (blockIds.pitcherCrop | CROSS)){
-					world.setBlock(x, y, z, (blockIds.pitcherCrop|TALLCROSS), false,false,false,false, this.type)
-				}else if(blockID === (blockIds.torchflower | SLAB)){
-					world.setBlock(x, y, z, (blockIds.torchflower|STAIR), false,false,false,false, this.type)
-				}else if(blockID === (blockIds.torchflower | STAIR)){
-					world.setBlock(x, y, z, (blockIds.torchflower|CROSS), false,false,false,false, this.type)
-				}else if(block.name === "pointedDripstone"){
-					let renjofdxnjlasfrsjln = world.getBlock(x,y+2,z, this.type), asoieuhisd
-					if(blockData[renjofdxnjlasfrsjln].liquid){
-						let y2
-						for(y2=y-1; y2>y-12; y2--){
-							asoieuhisd = world.getBlock(x,y2,z)
-							if(blockData[asoieuhisd].name !== "pointedDripstone") break
-						}
-						if(!blockData[asoieuhisd].solid){
-							world.setBlock(x,y2,z,blockIds.pointedDripstone|FLIP,false,false,false,false)
-							let y3
-							for(y3=y2-1; y3>y2-12; y3--){
-								asoieuhisd = world.getBlock(x,y3,z)
-								if(blockData[asoieuhisd].solid) break
-							}
-							if(blockData[asoieuhisd].solid){
-								world.setBlock(x,y3+1,z,blockIds.pointedDripstone,false,false,false,false)
-							}
-						}
-					}
-				}else if(block.coralBlock || block.coral || block.coralFan){
-					let state = blockID&isState
-					if(state === CUBE || state === SLAB || state === STAIR || state === VERTICALSLAB){
-						let wall = state === STAIR || state === VERTICALSLAB
-						let wet = (
-							blockData[world.getBlock(x,y+1,z)].wet ||
-							blockData[world.getBlock(x,y-1,z)].wet ||
-							blockData[world.getBlock(x+1,y,z)].wet ||
-							blockData[world.getBlock(x-1,y,z)].wet ||
-							blockData[world.getBlock(x,y,z+1)].wet ||
-							blockData[world.getBlock(x,y,z-1)].wet
-						)
-						let newState = wall?(wet?STAIR:VERTICALSLAB):(wet?CUBE:SLAB)
-						if(newState !== state){
-							world.setBlock(x, y, z, (blockID&(~isState))|newState, false,false,false,false, this.type)
-						}
-					}
-				}else if(blockID === blockIds.cornPlant){
-					world.setBlock(x, y, z, (blockIds.cornPlant|SLAB), false,false,false,false, this.type)
-				}else if(blockID === (blockIds.cornPlant|SLAB)){
-					world.setBlock(x, y, z, (blockIds.cornPlant|STAIR), false,false,false,false, this.type)
-				}else if(blockID === (blockIds.cornPlant|STAIR)){
-					world.setBlock(x, y, z, (blockIds.cornPlant|CROSS), false,false,false,false, this.type)
-				}else if(blockID === (blockIds.cornPlant|CROSS)){
-					world.setBlock(x, y, z, (blockIds.cornPlant|TALLCROSS), false,false,false,false, this.type)
-				}else if(blockID === (blockIds.cornPlant|TALLCROSS)){
-					world.setBlock(x, y, z, (blockIds.cornPlant|DOOR), false,false,false,false, this.type)
+				if(block.growSlow){
+					world.growSlow(x,y,z,this.world,blockID)
 				}
 			}
 			if(i<40){
-				if(block.name === "fire" || block.name === "Lava"){
-					if(this.world.world.settings.fireSpreads) block.tick(x,y,z,this.world)
-				}else if(block.tick){
+				if(block.tick){
 					block.tick(block,x,y,z,this.world)
 				}
-				if(block.beacon){
-					block.update(x,y,z,this.world)
-				}
 			}
 		}
 	}
@@ -29364,6 +37182,7 @@
 		}
 		if(this.allGenerated) for (let [i,entity] of this.entities) {
 			entity.update()
+			entity.serverUpdate()
 			if (entity.canDespawn || (entity.y <= minEntityY)) {
 				world.deleteEntity(i)
 			}
@@ -30011,6 +37830,39 @@
 	return ent.x > ix && ent.y > iy && ent.z > iz && ent.x < ix + iw && ent.y <= iy + ih && ent.z < iz + id
 }
 
+function getPosition(pos,face){
+	let x = pos[0], y = pos[1], z = pos[2]
+	let side = false
+	switch(face) {
+		case "top":
+			y += 1
+			break
+		case "bottom":
+			y -= 1
+			break
+		case "south":
+			z -= 1
+			side = true
+			break
+		case "north":
+			z += 1
+			side = true
+			break
+		case "west":
+			x -= 1
+			side = true
+			break
+		case "east":
+			x += 1
+			side = true
+			break
+	}
+	pos[0] = x
+	pos[1] = y
+	pos[2] = z
+	return pos
+}
+
 function hitSound(p){
 	var i = Math.ceil(Math.random()*3)
 	p.world.playSound(p.x,p.y,p.z,"damage.hit"+i)
@@ -31113,7 +38965,7 @@
 			this.spawnPoint.y = this.worldType === "superflat" ? 4 : round(this.noiseProfile.noise(this.spawnPoint.x * generator.smooth, this.spawnPoint.z * generator.smooth) * generator.height) + generator.extra
 		}
 	}
-	serverChangeBlock(x,y,z,place,p,face,shift,blockMode,rotate,flip){
+	serverChangeBlock(x,y,z,place,p,face,shift,blockMode,rotate,flip){//todo n: use new blockstates
 		let {dimension} = p
 		let holding = p.inventory.hotbar[p.inventory.hotbarSlot] ? p.inventory.hotbar[p.inventory.hotbarSlot].id : 0
 		let blockDat = blockData[holding], holdObj = p.inventory.hotbar[p.inventory.hotbarSlot]
@@ -31175,48 +39027,6 @@
 					if(holdObj && !holdObj.amount) p.inventory.hotbar[p.inventory.hotbarSlot] = null
 					return
 				}
-			}else if(holding && blockData[holding].shovel){
-				if(cblock === blockIds.grass || cblock === blockIds.dirt || cblock === blockIds.rootedDirt || cblock === blockIds.mycelium || cblock === blockIds.podzol){
-					this[dimension].setBlock(ox,oy,oz,blockIds.dirtPath)
-					holdObj.durability --
-				}
-				if(blockData[cblock].campfire){
-					this[dimension].setBlock(ox,oy,oz,blockData[cblock].id | SLAB)
-					holdObj.durability --
-				}
-				return
-			}else if(holding && cblock && blockData[holding].axe){
-				var name = blockData[cblock].name
-				name = name[0].toUpperCase() + name.substring(1)
-				name = "stripped"+name
-				if(blockIds[name]){
-					this[dimension].setBlock(ox,oy,oz,blockIds[name])
-					holdObj.durability --
-				}
-				return
-			}else if(holding && cblock && blockData[holding].hoe){
-				if((blockData[cblock].name === "grass" || cblock === blockIds.dirt) && !this[dimension].getBlock(ox,oy+1,oz)){
-					this[dimension].setBlock(ox,oy,oz,blockIds.farmland)
-					holdObj.durability --
-				}
-				if(cblock === blockIds.rootedDirt){
-					this[dimension].setBlock(ox,oy,oz,blockIds.dirt)
-					this[dimension].addItems(ox, oy+0.5, oz, 0, 0, 0, blockIds.hangingRoots, true)
-					holdObj.durability --
-				}
-				return
-			}else if(holding && cblock && blockData[holding].shears){
-				if(cblock === blockIds.pumpkin){
-					this[dimension].setBlock(ox,oy,oz,blockIds.carvedPumpkin)
-					this[dimension].addItems(ox, oy+0.5, oz, 0, 0, 0, blockIds.pumpkinSeeds, true, 4)
-					holdObj.durability --
-				}
-				return
-			}else if(holding && cblock && blockData[holding].name === "eyeOfEnder" && blockData[cblock].name === "endPortalFrame"){
-				this[dimension].setBlock(ox,oy,oz,cblock | SLAB)
-				blockData[cblock].eyeplace(ox,oy,oz,this[dimension])
-				this[dimension].blockSound(holding, "place", ox,oy,oz)
-				return
 			}
 			if(blockDat.serveronuse && (blockDat.useAnywhere || cblock)){
 				let cont = blockDat.serveronuse(ox,oy,oz,cblock,this[dimension],face,holdObj,p, blockMode)
@@ -31227,7 +39037,7 @@
 			if(holding && blockData[holding].useAs){
 	      let useAs = blockData[holding].useAs
 	      if(typeof useAs === "function"){
-	        useAs = useAs(x,y,z,cblock,face)
+	        useAs = blockData[holding].useAs(x,y,z,cblock,face,this[dimension],rotate,flip)
 	        if(typeof useAs === "string" && blockIds[useAs]){
 	          holding = blockIds[useAs]
 	        }else holding = useAs
@@ -31238,7 +39048,7 @@
 			if(!holding || blockData[holding].item) return
 			if(!p.cheats) blockMode = 0
 			let under = this[dimension].getBlock(x,y-1,z)
-      let onPot = !side && blockData[under] && blockData[under].pot
+      /*let onPot = !side && blockData[under] && blockData[under].pot
       if(blockData[holding].potCross && onPot){
         blockMode = POTCROSS
       }else if(blockData[holding].crossShape){
@@ -31248,174 +39058,49 @@
         }else{
           blockMode = CROSS
         }
-      }
-      if(blockData[holding].sideCross){
-        if(side){
-          blockMode = CUBE
-        }else if(face === "bottom"){
-          blockMode = SLAB
-        }else blockMode = CROSS
-      }
-      if(blockData[holding].tallcrossShape){
-        blockMode = TALLCROSS
-      }
-      if(blockData[holding].door && blockMode !== SLAB){
-        blockMode = DOOR
-      }
-      if(blockData[holding].torch){
-        blockMode = TORCH
-        if(side) blockMode = SLAB
-      }
-      if(blockData[holding].lantern){
-        if(this[dimension].getBlock(x,y+1,z)){
-          blockMode = LANTERNHANG
-        }else{
-          blockMode = LANTERN
-        }
-      }
-      if(blockData[holding].beacon){
-        blockMode = BEACON
-      }
-      if(blockData[holding].cactus && blockMode !== POTCROSS){
-        blockMode = CACTUS
-      }
-      if(blockData[holding].pane){
-        if(side) blockMode = SLAB
-        else blockMode = PANE
-      }
-      if(blockData[holding].portal){
-        blockMode = PORTAL
-      }
-      if(blockData[holding].wallFlat){
-        blockMode = WALLFLAT
-      }
-      if(blockData[holding].trapdoor){
-        if(side){
-          blockMode = TRAPDOOROPEN
-        }else{
-          blockMode = TRAPDOOR
-        }
-      }
-      if(blockData[holding].chain){
-        if(side)blockMode = SLAB
-        else blockMode = CHAIN
-      }
-      if(blockData[holding].button){
-        blockMode = BUTTON
-      }
-      if(blockData[holding].pot){
-        blockMode = POT
-      }
-      
-      if(blockData[holding].name === "endRod"){
-        if(side){
-          blockMode = SLAB
-        }else{
-          blockMode = CUBE
-        }
-      }
-      
-      if(blockData[holding].barrel || blockData[holding].commandBlock){
-        if(side) blockMode = SLAB
-        else if(face === "bottom") blockMode = STAIR
-        else blockMode = CUBE
-      }
-      
-      if(blockData[holding].redstoneTorch){
-        if(side) blockMode = SLAB
-        else blockMode = CUBE
-      }
-      
-      if(blockData[holding].lever){
-        if(side) blockMode = CUBE
-        else if(face === "top") blockMode = STAIR
-        else if(face === "bottom") blockMode = TALLCROSS
-      }
-      
-      if(blockData[holding].piston){
-        if(face === "top") blockMode = CUBE
-        else if(face === "bottom") blockMode = FLIP
-        else if(side) blockMode = SLAB
-      }
-      
-      if(blockData[holding].name === "observer"){
-        if(face === "top") blockMode = SLAB | FLIP
-        else if(face === "bottom") blockMode = SLAB
-        else blockMode = CUBE
-      }
-      
-      if(blockData[holding].name === "pointedDripstone"){
-        if(face === "top") blockMode = CUBE
-        else blockMode = FLIP
-      }
-      if(blockData[holding].sign){
-        if(side) blockMode = STAIR
-        else blockMode = CUBE
-      }
-      if(blockData[holding].name === "dropper" || blockData[holding].name === "dispenser"){
-        if(face === "top") blockMode = SLAB
-        else if(face === "bottom") blockMode = STAIR
-        else blockMode = CUBE
-      }
-      if(blockData[holding].name === "hopper"){
-        if(side) blockMode = SLAB
-        else blockMode = CUBE
-      }
-			if(blockData[holding].coralFan){
-				if(side) blockMode = STAIR
-        else blockMode = CUBE
+      }*/
+			if(side && blockData[holding].useAsWall) holding = blockIds[blockData[holding].useAsWall]
+			let states = blockData[holding].blockStatesMap
+			
+			if(states.facing){
+				if(face === "top" && ("up" in states.facing)) holding = setBlockState(holding,states.facing,"up")
+				if(face === "bottom" && ("down" in states.facing)) holding = setBlockState(holding,states.facing,"down")
+				else{
+					let adjFace = rotate
+					if(adjFace in states.facing) holding = setBlockState(holding,states.facing,adjFace)
+				}
+			}
+			if(states.face){
+				let adjFace = face === "top" ? "ceiling" : face === "bottom" ? "floor" : "wall"
+				if(adjFace in states.face) holding = setBlockState(holding,states.face,adjFace)
+			}
+			if(states.axis){
+				switch(face){
+					case "north": case "south":
+						return setBlockState(holding,states.axis,"z")
+					case "east": case "west":
+						return setBlockState(holding,states.axis,"x")
+					default:
+						return setBlockState(holding,states.axis,"y")
+				}
 			}
       
-      if(side && blockData[holding].swId){
-        holding = blockData[holding].swId
-      }
-      if(blockData[holding].layers){
-        let b = this[dimension].getBlock(ox,oy,oz)
-        let layer = 0
-				let state = b&isState
-        if(state === LAYER1) layer = 1
-        if(state === LAYER2) layer = 2
-        if(state === LAYER3) layer = 3
-        if(state === LAYER4) layer = 4
-        if(state === LAYER5) layer = 5
-        if(state === LAYER6) layer = 6
-        if(state === LAYER7) layer = 7
-        if(state === LAYER8) layer = 8
-        if(((b & isCube) === (holding & isCube)) && layer > 0 && layer < 8){
+      if(states.layers){
+        let b = cblock
+        let layer = +getBlockState(cblock,states.layers)
+        if(blockData[cblock].id === blockData[holding].id && ((layer+1)+"" in states.layers)){
 					//p.connection.send({type:"setBlock", data:{x:x, y:y, z:z, block:this[dimension].getBlock(x,y,z), dimension}})
           x = ox, y = oy, z = oz
           layer ++
-          switch(layer){
-            case 2:
-              blockMode = LAYER2
-              break
-            case 3:
-              blockMode = LAYER3
-              break
-            case 4:
-              blockMode = LAYER4
-              break
-            case 5:
-              blockMode = LAYER5
-              break
-            case 6:
-              blockMode = LAYER6
-              break
-            case 7:
-              blockMode = LAYER7
-              break
-            case 8:
-              blockMode = LAYER8
-              break
-          }
+          holding = setBlockState(cblock,states.layers, ""+layer)
         }else{
-          blockMode = LAYER1
+					holding = setBlockState(cblock,states.layers, "1")
         }
-				holding = holding&isCube
       }
-			if(!blockData[holding|blockMode]) throw new Error("no block holding: "+holding+"blockMode: "+blockMode)
+
+			if(!blockData[holding|blockMode]) throw new Error("no block holding: "+holding+" blockMode: "+blockMode)
 			let shape = holding && blockData[holding|blockMode].shape
-			if (shape && shape.rotate){
+			/*if (shape && shape.rotate){
 				if(rotate === SOUTH) blockMode |= SOUTH
 				if(rotate === EAST) blockMode |= EAST
 				if(rotate === WEST) blockMode |= WEST
@@ -31423,7 +39108,7 @@
 			if (shape && shape.flip){
 				if(flip === FLIP) blockMode |= FLIP
 			}
-			holding |= blockMode
+			holding |= blockMode*/
 		}
 		let dropAmount, drop
 		if(p.survival && !place){
@@ -31435,18 +39120,20 @@
 			if(!blockData[prevBlock].type) canDrop = true
 			if(canDrop){
 				if(amount === undefined) amount = 1
-				if(amount.length === 2){
-					amount = round(rand(amount[0], amount[1]))
+				else if(typeof amount === "function") amount = amount(prevBlock)
+				else if(amount.length === 2){
+					amount = randInt(amount[0], amount[1])
 				}
 				if(holding && blockData[holding].shears && blockData[prevBlock].dropSelfWhenSheared){
 					if(blockData[prevBlock].shearDropAmount){
 						amount = blockData[prevBlock].shearDropAmount
 					}
 				}else{
+					if(typeof theDrop === "function"){
+						block = theDrop(prevBlock)
+					}
 					if(typeof theDrop === "number") block = theDrop
-					else if(typeof theDrop === "function"){
-						block = blockIds[theDrop()]
-					}else if(Array.isArray(theDrop)){
+					else if(Array.isArray(theDrop)){
 						block = theDrop
 					}else if(theDrop) block = blockIds[theDrop]
 				}
@@ -31506,7 +39193,7 @@
 		let holdObj = p.inventory.hotbar[p.inventory.hotbarSlot]
 		let block = blockData[holdObj ? holdObj.id : 0]
 		if(hit){
-			if(!ent.damage) return
+			if(!ent.onhit && ent.type !== "Player") return
 			let atime = (typeof block.attackTime === "number") ? block.attackTime : 5
 			let attackDamage = (block && block.attackDamage) || 1
 			let damage, critical
@@ -31522,7 +39209,7 @@
 				}
 			}else{
 				let pd = p.direction
-				ent.damage(damage,pd.x/2,0.5,pd.z/2)
+				ent.onhit(damage,false,pd.x/2,0.5,pd.z/2,p.id)
 			}
 			if(block.pickaxe){
 				holdObj.durability -= 2
@@ -31558,8 +39245,8 @@
 	static entityPacketType = [
 		["version","constant",0],["id","basicString"],["entId","byte"],["x","double"],["y","double"],["z","double"],packetDimension,
 		["pitch","double"],["yaw","double"],["velx","double"],["vely","double"],["velz","double"],["spawnRelative","double"],
-		[ent=>ent.type==="Item"||ent.type==="ExperienceOrb","includeIf",[["amount","double"]]],
-		[ent=>ent.type==="Item"||(ent instanceof BlockEntity),"includeIf",[["block","uint"]]],
+		[ent=>"amount" in ent,"includeIf",[["amount","double"]]],
+		[ent=>"block" in ent,"includeIf",[["block","uint"]]],
 		[ent=>ent.type==="Item","includeIf",[["from","basicString"],["durability","int"],["name","string"]]],
 		[ent=>ent.type==="BlockEntity","includeIf",[["solidOnGround","boolean"]]],
 		[ent=>ent.type==="MovingBlock","includeIf",[["sx","int"],["sy","int"],["sz","int"],["mx","int"],["my","int"],["mz","int"],["despawns","int"],["solidWhenDone","boolean"]]],
@@ -31567,9 +39254,9 @@
 		[ent=>ent.mob,"includeIf",[
 			["harmEffect","number",6,1],["health","double"],["burning","boolean"],["burnTimer","double"],["oxygen","double"],["spinTarget","double"],
 			[ent=>ent.path,"includeIf",[["path","array",[null,"int"]]]],
-			[ent=>ent.type==="Sheep"||ent.type==="Spider","includeIf",[["fur","boolean"]]],
-			[ent=>ent.type==="Sheep","includeIf",[["wool","basicString"]]],
-			[ent=>ent.type==="Sheep"||ent.type==="Wolf","includeIf",[["color","array",[null,"number",8,255]]]],
+			[ent=>"fur" in ent,"includeIf",[["fur","boolean"]]],
+			[ent=>"wool" in ent,"includeIf",[["wool","basicString"]]],
+			[ent=>"color" in ent,"includeIf",[["color","array",[null,"number",8,255]]]],
 			["eating","boolean"],["target","basicString"],["tame","boolean"],["sitting","boolean"],["owner","string"],["holding","uint"],["attractedBy","basicString"],
 			[ent=>ent.type==="Creeper","includeIf",[["explodeAmount","byte"],["timerStartRelative","double"]]],
 			["attackCooldown","byte"],["effects","mapObject",[null,"object",[["level","byte"],["time","int"],["showParticles","boolean"]]]]
@@ -31674,14 +39361,16 @@
 		if(p.data[0] !== 0 || preBetaVersion) return this.posEntityOldBab(p, m, preBetaVersion)
 		let now = performance.now()
 		p = bitArrayToPacket(p,this.constructor.entityPacketType)
-		const entType = entityOrder[p.entId]
+		const entType = entities[p.entId].name2
 		let ent = this.entities[this.getEntity(p.id)]
 		if(ent){
 			if(entType === "TextDisplay" && ent.text !== p.text) ent.setText(p.text)
-			if(entType === "Item" && ent.amount !== p.amount) ent.amount = p.amount, ent.willUpdateShape = true
 		}else{
 			ent = entities[p.entId]
-			switch(entType){
+			if(ent.mob){
+				ent = new ent(p.x,p.y,p.z) //todo: cave spider 'cave', fur
+			}
+			else switch(entType){
 				case "Item":
 					ent = new ent(p.x, p.y, p.z, p.velx, p.vely, p.velz, p.block, false, p.amount, p.durability||null, null)
 					break
@@ -31711,26 +39400,6 @@
 				case "ExperienceOrb":
 					ent = new ent(p.x,p.y,p.z,p.amount)
 					break
-				case "Cow":
-				case "Pig":
-				case "Creeper":
-				case "Chicken":
-				case "Zombie":
-				case "Skeleton":
-				case "Wolf":
-				case "Blaze":
-				case "Enderman":
-					ent = new ent(p.x,p.y,p.z)
-					break
-				case "Sheep":
-					ent = new ent(p.x,p.y,p.z, p.color, p.wool)
-					break
-				case "Spider":
-					ent = new ent(p.x,p.y,p.z,p.fur)
-					break
-				case "EnderDragon":
-					ent = new ent(p.x,p.y,p.z)
-					break
 				case "TextDisplay":
 					ent = new ent(p.x,p.y,p.z,p.text,p.size,p.color,p.background,p.glow)
 					break
@@ -31794,10 +39463,12 @@
 			ent.harmEffect = p.harmEffect
 			ent.health = p.health
 		}
+		if("amount" in ent) ent.amount = p.amount
+		if("block" in ent) ent.block = p.block
 		ent.updateChunk()
 		return ent
 	}
-	posEntityOldBab(p, m, preBetaVersion){
+	posEntityOldBab(p, m, preBetaVersion){ //todo n
 		let now = performance.now()
 		let nameLen = p.read(8)
 		let id = ""
@@ -32223,7 +39894,7 @@
 		return done
 	}
 	
-	getSaveString(){
+	getSaveString(){//todo n: new save format (blockStates seperate, include name of blockstate and block, pallete has values and id of name, name pallete has names)
 		let loadFrom = this.loadFrom
 
 		let worldTypeBits1 = this.worldType==="island" ? 2 : (this.worldType === "void" ? 3 : (this.worldType === "superflat" ? 1 : 0))
@@ -33439,12 +41110,12 @@
 				world.loadedUpdate = true
 			}else if(data.type === "mySkin" || data.type === "particles" || data.type === "achievment" || data.type === "harmEffect" || data.type === "playSound" || data.type === "title" || data.type === "joined"){
 				sendOthers(data)
-			}else if(data.type === "hit"){
+			}else /*if(data.type === "hit"){
 				if(data.isEntity){
 					let ent = world.entities[world[p.dimension].getEntity(data.TO)]
 					if(ent) ent.onhit(data.damage,false, data.velx,data.velz, data.id)
 				}else world.sendPlayer(data,data.TO)
-			}else if(data.type === "message"){
+			}else*/ if(data.type === "message"){
 				data.fromServer = false
 				data.username = username
 				sendOthers(data)
@@ -33875,10 +41546,10 @@
 					inventory.anvilOutput.customName = inventory.anvilRename
 					inventory.anvilCost++
 				}
-				if(blockData[id].durability && blockData[id].material && inventory.anvilMaterial){
+				if(blockData[id].durability && blockData[id].repairMaterial && inventory.anvilMaterial){
 					let materialName = blockData[inventory.anvilMaterial.id].name
 					let maxDurability = blockData[id].durability
-					if(blockData[id].material === materialName){
+					if(blockData[id].repairMaterial === materialName){
 						inventory.anvilOutput.durability += maxDurability/4
 						if(inventory.anvilOutput.durability > maxDurability) inventory.anvilOutput.durability = maxDurability
 						inventory.anvilCost++
@@ -34686,7 +42357,7 @@
 				if(!xyArrayHas(spreaded,spreadAt,x,y-1,z) && blockData[this.getBlock(x,y-1,z)].carryRedstone) spreadAt.push(x,y-1,z,i+1)
 				
 				let tags = this.getTags(x,y,z), block = this.getBlock(x,y,z)
-				if(blockData[block].name === "redstoneDust"){
+				if(blockData[block].redstoneDust){
 					if(getTagBits(tags,"westUp",block) && !xyArrayHas(spreaded,spreadAt,x+1,y+1,z)) spreadAt.push(x+1,y+1,z,i+1)
 					if(getTagBits(tags,"eastUp",block) && !xyArrayHas(spreaded,spreadAt,x-1,y+1,z)) spreadAt.push(x-1,y+1,z,i+1)
 					if(getTagBits(tags,"northUp",block) && !xyArrayHas(spreaded,spreadAt,x,y+1,z+1)) spreadAt.push(x,y+1,z+1,i+1)
@@ -34761,7 +42432,7 @@
 	}
 	getPowerForWire(x,y,z,blue=0,rail=false){
 		let block = this.getBlock(x,y,z)
-		if(blockData[block].name === "redstoneDust" && blue !== (block & FLIP)) return 0
+		if(blockData[block].redstoneDust && blue !== (block & FLIP)) return 0
 		if(rail && !blockData[block].rail) return 0
 		return this.getPower(x,y,z)
 	}
@@ -34775,7 +42446,7 @@
 		let top = this.getPowerForWire(x,y+1,z,blue)
 		let bottom = this.getPowerForWire(x,y-1,z,blue)
 		let westUp = 0, eastUp = 0, northUp = 0, southUp = 0, westDown = 0, eastDown = 0, northDown = 0, southDown = 0
-		if(tags && blockData[block].name === "redstoneDust"){
+		if(tags && blockData[block].redstoneDust){
 			westUp = getTagBits(tags,"westUp",block) ? this.getPowerForWire(x+1,y+1,z,blue) : 0
 			eastUp = getTagBits(tags,"eastUp",block) ? this.getPowerForWire(x-1,y+1,z,blue) : 0
 			northUp = getTagBits(tags,"northUp",block) ? this.getPowerForWire(x,y+1,z+1,blue) : 0
@@ -34951,46 +42622,6 @@
 			blockData[block].onpowerupdate(x,y,z,sx,sy,sz, blockPowerChanged,this)
 		}
 	}
-	getBlockRotation(block){
-		switch(block&ROTATION){
-			case NORTH:
-				return 0
-			case EAST:
-				return 1
-			case SOUTH:
-				return 2
-			case WEST:
-				return 3
-		}
-	}
-	getRotationBlock(rot){
-		switch(rot){
-			case 0:
-				return NORTH
-			case 1:
-				return EAST
-			case 2:
-				return SOUTH
-			case 3:
-				return WEST
-		}
-	}
-	canStairConnect(sourceBlock,otherBlock,isBack){
-		if((sourceBlock&FLIP) !== (otherBlock&FLIP)) return
-		let sourceRot = this.getBlockRotation(sourceBlock)
-		let otherRot = this.getBlockRotation(otherBlock)
-		let rotDiff = mod(sourceRot-otherRot,4)
-		if((otherBlock&isState) === STAIR){
-			if(rotDiff === 1) return 1
-			else if(rotDiff === 3) return -1
-		}else if((otherBlock&isState) === CORNERSTAIRIN){
-			if(rotDiff === 0 && isBack || rotDiff === 1 && !isBack) return 1
-			else if(rotDiff === 3 && isBack || rotDiff === 2 && !isBack) return -1
-		}else if((otherBlock&isState) === CORNERSTAIROUT){
-			if(rotDiff === 1 && isBack || rotDiff === 0 && !isBack) return 1
-			else if(rotDiff === 2 && isBack || rotDiff === 3 && !isBack) return -1
-		}
-	}
 	setTimeout(func,time,x,y,z,block){
 		let exist
 		if(x || x === 0) for(let i = this.timeoutQueue.length-1; i>=0; i--){
@@ -35013,34 +42644,6 @@
 	doBlockUpdate(x,y,z,sx,sy,sz){
 		let block = this.getBlock(x,y,z)
 		if(blockData[block].onupdate) blockData[block].onupdate(x,y,z,block,this,sx,sy,sz)
-		else if((block & isState) === STAIR && blockData[block].shape.varients.includes(shapes.stair)){//stair corner update
-			let front, back //front is lower side
-			switch(block&ROTATION){
-				case NORTH:
-					front = this.getBlock(x,y,z-1)
-					back = this.getBlock(x,y,z+1)
-					break
-				case SOUTH:
-					front = this.getBlock(x,y,z+1)
-					back = this.getBlock(x,y,z-1)
-					break
-				case EAST:
-					front = this.getBlock(x-1,y,z)
-					back = this.getBlock(x+1,y,z)
-					break
-				case WEST:
-					front = this.getBlock(x+1,y,z)
-					back = this.getBlock(x-1,y,z)
-					break
-			}
-			let connectBack = this.canStairConnect(block,back,true)
-			let connectFront = this.canStairConnect(block,front,false)
-			if(connectBack || connectFront) this.setTimeout(() => {
-				if(connectBack === -1 || connectFront === -1) block = block&(~ROTATION) | this.getRotationBlock(mod(this.getBlockRotation(block)+1,4))
-				if(connectBack) this.setBlock(x,y,z,(block&(~isState))|CORNERSTAIROUT)
-				else if(connectFront) this.setBlock(x,y,z,(block&(~isState))|CORNERSTAIRIN)
-			},tickTime)
-		}
 	}
 	getTop(x,z){
 		let chunk = this.getChunk(x,z)
@@ -35053,7 +42656,7 @@
 }
 win.ServerWorld = World
 
-initShapes()
+initShapes() //init required shapes (like air)
 initBlockData()
 win.initServerBlockData = function(){
 	initBlockDataShapes()
